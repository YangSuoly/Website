<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Conda channel setting</title>
    <url>/2020/11/23/Conda%20channel%20setting/</url>
    <content><![CDATA[<h1 id="show-channel">1 Show channel</h1>
<p><code>conda config --show</code>显示所有的 conda 的config 信息，<code>conda config --show channels</code>显示所有 channel 信息</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>conda config --show channels</span><br><span class="line">channels:</span><br><span class="line">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/</span><br><span class="line">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/</span><br><span class="line">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/pytorch/win-<span class="number">64</span>/</span><br><span class="line">  - defaults</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h1 id="delete-channel">2 Delete channel</h1>
<p>Using <code>conda config --remove channels</code> to delete channels from config</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">conda config --remove channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/</span><br></pre></td></tr></table></figure>
<h1 id="add-channel">3 Add channel</h1>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/</span><br><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/   </span><br><span class="line"></span><br><span class="line"><span class="comment"># 从 channel 中安装包时显示channel 的url，这样就可以知道包的安装来源</span></span><br><span class="line">conda config --<span class="built_in">set</span> show_channel_urls yes</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装确认中，不默认yes，而是由我来决定</span></span><br><span class="line">conda config --<span class="built_in">set</span> always_yes false</span><br></pre></td></tr></table></figure>
<h1 id="install-package-offline">4 Install package offline</h1>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">conda install --offline &lt; package &gt;</span><br></pre></td></tr></table></figure>
<h1 id="other-command">5 Other command</h1>
<p><code>conda install &lt;包名&gt;</code> 安装指定包 <code>conda remove &lt;包名&gt;</code> 移除指定包 <code>conda update &lt;包名&gt;</code> 更新指定包</p>
]]></content>
      <categories>
        <category>Notes</category>
        <category>Software</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Anaconda</tag>
      </tags>
  </entry>
  <entry>
    <title>Eviews notes</title>
    <url>/2020/11/22/Eviews/</url>
    <content><![CDATA[<h1 id="create-workfile">1 Create workfile</h1>
<p>Eviews 10 创建时间序列工作文件，界面如下</p>
<p><img src="https://s3.ax1x.com/2020/11/25/DUNDeA.png" /></p>
<center>
figure 1-1 时间序列类型
</center>
<p>参数释义为：</p>
<a id="more"></a>
<ul>
<li>Annual：年度数据</li>
<li>Semi-annual：半年(2010S1 - 2019S1)</li>
<li>Quarteryly：季度 （2010Q3 - 2019Q2）</li>
<li>Monthly：月度（2010M01 - 2019M11）</li>
<li>Bimonthly：半月（2010-3-01 - 2019-8-8）</li>
<li>Fortnightly：两周</li>
<li>Daily-custom week：用户自定义选择周几</li>
<li>Intraday：当日数据，精确到每天每隔多少时间</li>
<li>Integer data：可以是年度（eg：2001 - 2012），也可以是哪一期（eg：3 - 33）</li>
</ul>
<p>创建平衡面板数据：</p>
<p><img src="https://s3.ax1x.com/2020/11/25/DUN0Ld.png" /></p>
<center>
figure 1-2 平衡面板数据
</center>
<h1 id="least-squares最小二乘法">2 Least Squares（最小二乘法）</h1>
<p>Command中输入 <code>ls y c x</code>即可得到如下结果：</p>
<p><img src="https://s3.ax1x.com/2020/11/25/DUNrdI.md.png" /></p>
<center>
figure 1-3 Parameters
</center>
<p>Parameters:</p>
<ul>
<li>Coefficient：系数，参数估计值</li>
<li>Std. Error：参数估计量标准差估计值</li>
<li>t-Statistic：<span class="math inline">\(t\)</span> 统计量的值</li>
<li>Prob: <span class="math inline">\(P\)</span> 值</li>
<li>R-squared: $ R^2$</li>
<li>Adjusted R-squared: $^ - $</li>
<li>S.E. of regression: <span class="math inline">\(\sigma ^2\)</span></li>
<li>Sum squared resid: $ RSS$，残差平方和</li>
<li>Mean dependent var: <span class="math inline">\(\overset{-}{Y}\)</span>，被解释变量的均值</li>
<li>S.D. dependent var: 被解释变量的标准差</li>
</ul>
]]></content>
      <categories>
        <category>Notes</category>
        <category>Software</category>
      </categories>
      <tags>
        <tag>Eviews</tag>
        <tag>Software</tag>
      </tags>
  </entry>
  <entry>
    <title>Git notes</title>
    <url>/2020/11/22/Git-notes/</url>
    <content><![CDATA[<h1 id="版本控制">1. 版本控制</h1>
<h2 id="版本控制迭代">1.1 版本控制（迭代）</h2>
<p>版本控制（Revision control）是一种在开发的过程中用于管理我们对文件、目录或工程等内容的修改历史，方便查看更改历史记录，备份以便恢复以前的版本的软件工程技术。</p>
<ul>
<li>实现跨区域多人协同开发</li>
<li>追踪和记载一个或者多个文件的历史记录</li>
<li>组织和保护你的源代码和文档</li>
<li>统计工作量</li>
<li>并行开发、提高开发效率</li>
<li>跟踪记录整个软件的开发过程</li>
<li>减轻开发人员的负担，节省时间，同时降低人为错误</li>
</ul>
<a id="more"></a>
<h2 id="版本控制工具">1.2 版本控制工具</h2>
<h3 id="主流的版本控制器">1.2.1 主流的版本控制器：</h3>
<ul>
<li><strong>Git</strong></li>
<li><strong>SVN</strong>（Subversion）</li>
<li><strong>CVS</strong>（Concurrent Versions System）</li>
<li><strong>VSS</strong>（Micorosoft Visual SourceSafe）</li>
<li><strong>TFS</strong>（Team Foundation Server）</li>
<li>Visual Studio Online</li>
</ul>
<h3 id="版本控制分类">1.2.2 版本控制分类</h3>
<ul>
<li>本地版本控制：RCS</li>
</ul>
<blockquote>
<p><img src="https://s3.ax1x.com/2020/11/25/DauN11.png" /></p>
</blockquote>
<center>
图 1-1 本地版本控制
</center>
<ul>
<li>集中版本控制：SVN</li>
</ul>
<p><img src="https://s3.ax1x.com/2020/11/25/Dauu60.png" /></p>
<center>
图 1-2 集中版本控制
</center>
<ul>
<li>分布式版本控制：Git</li>
</ul>
<p><img src="https://s3.ax1x.com/2020/11/25/DauZfs.md.jpg" /></p>
<center>
图 1-3 分布式版本控制
</center>
<h3 id="git-与-svn-的区别">1.2.3 Git 与 SVN 的区别</h3>
<blockquote>
<ul>
<li><p>SVN是集中式版本控制系统，版本库集中放在中央服务器的，工作时，需要从中央服务器得到最新的版本，完成工作后，把做完的活推送到中央服务器。集中式版本控制系统是必须联网才能工作，对网络带宽要求较高。</p></li>
<li><p>Git是分布式版本控制系统，没有中央服务器，每个人的电脑就是一个完整的版本库</p></li>
</ul>
</blockquote>
<h1 id="git-环境配置">2. Git 环境配置</h1>
<h2 id="git配置">2.1 Git配置</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">git config -l</span><br><span class="line"><span class="comment"># 查看配置</span></span><br><span class="line"></span><br><span class="line">git config --system --<span class="built_in">list</span></span><br><span class="line"><span class="comment"># 系统配置</span></span><br><span class="line"></span><br><span class="line">git config --<span class="keyword">global</span> --<span class="built_in">list</span></span><br><span class="line"><span class="comment"># 查看当前用户 (global) 配置</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>Git 相关的配置文件</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">D:\Program files\Git\Git\etc：</span><br><span class="line"><span class="comment"># Git 安装目录下的 gitconfig --system 系统级</span></span><br><span class="line"></span><br><span class="line">C:\Users\YangSu\.gitconfig</span><br><span class="line"><span class="comment">#  只适用于当前登录用户的配置  --global 全局</span></span><br><span class="line"></span><br><span class="line">git config --<span class="keyword">global</span> user.name <span class="string">&quot;YS&quot;</span> <span class="comment">#名称</span></span><br><span class="line">git config --<span class="keyword">global</span> user.email num@qq.com   <span class="comment"># 邮箱</span></span><br></pre></td></tr></table></figure>
<h1 id="git-基本理论">3. Git 基本理论</h1>
<h2 id="工作区域">3.1 工作区域</h2>
<blockquote>
<p>四个工作区域：</p>
<ul>
<li>工作目录 (Working Directory)</li>
<li>暂存区 (Stage / Index)</li>
<li>资源库 (Repository 或 Git Directory)</li>
<li>远程 Git 仓库 (Remote Directory)</li>
</ul>
</blockquote>
<p><img src="https://s3.ax1x.com/2020/11/25/Daunlq.png" /></p>
<center>
图 1-4 工作区域（核心）
</center>
<ul>
<li>Workspace：工作区，就是你平时存放项目代码的地方</li>
<li>Index / Stage：暂存区，用于临时存放你的改动，事实上它只是一个文件，保存即将提交到文件列表信息</li>
<li>Repository：仓库区（或本地仓库），就是安全存放数据的位置，这里面有你提交到所有版本的数据。其中HEAD指向最新放入仓库的版本</li>
<li>Remote：远程仓库，托管代码的服务器，可以简单的认为是你项目组中的一台电脑用于远程数据交换</li>
</ul>
<p>本地的三个区域确切的说应该是git仓库中HEAD指向的版本：</p>
<p><img src="https://s3.ax1x.com/2020/11/25/Daumpn.png" /></p>
<center>
图 1-5 Git示意图
</center>
<ul>
<li>Directory：使用Git管理的一个目录，也就是一个仓库，包含我们的工作空间和Git的管理空间。</li>
<li>WorkSpace：需要通过Git进行版本控制的目录和文件，这些目录和文件组成了工作空间。</li>
<li>.git：存放Git管理信息的目录，初始化仓库的时候自动创建。</li>
<li>Index/Stage：暂存区，或者叫待提交更新区，在提交进入repo之前，我们可以把所有的更新放在暂存区。</li>
<li>Local Repo：本地仓库，一个存放在本地的版本库；HEAD会只是当前的开发分支（branch）。</li>
<li>Stash：隐藏，是一个工作状态保存栈，用于保存/恢复WorkSpace中的临时状态。</li>
</ul>
<h2 id="工作流程">3.2 工作流程</h2>
<ol type="1">
<li>在工作目录中添加、修改文件；</li>
<li>将需要进行版本管理的文件放入暂存区域；</li>
<li>将暂存区域的文件提交到git仓库。</li>
</ol>
<p>因此，git管理的文件有三种状态：已修改（modified）,已暂存（staged）,已提交(committed)</p>
<p><img src="https://s3.ax1x.com/2020/11/25/DauKXV.jpg" /></p>
<center>
1-6 工作流程
</center>
<h1 id="项目搭建">4. 项目搭建</h1>
<h2 id="创建工作目录">4.1 创建工作目录</h2>
<p>工作目录（WorkSpace)一般就是你希望Git帮助你管理的文件夹，可以是你项目的目录，也可以是一个空目录，建议不要有中文。</p>
<p><img src="https://s3.ax1x.com/2020/11/25/DauQmT.png" /></p>
<center>
1-7 常用命令
</center>
<h2 id="创建本地仓库">4.2 创建本地仓库</h2>
<ul>
<li>创建全新的仓库</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在当前目录新建一个Git代码库</span></span><br><span class="line">$ git init</span><br><span class="line"><span class="comment"># 执行后，项目目录多出了一个.git目录</span></span><br></pre></td></tr></table></figure>
<ul>
<li>克隆远程仓库</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 克隆一个项目和它的整个代码历史(版本信息)</span></span><br><span class="line">$ git clone [url]  </span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">从 gitee 或 github 中克隆</span></span><br><span class="line"><span class="string">https://gitee.com/kuangstudy/openclass.git</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<h1 id="git-文件操作">5. Git 文件操作</h1>
<h2 id="文件的四种状态">5.1 文件的四种状态</h2>
<ul>
<li>Untracked: 未跟踪, 此文件在文件夹中, 但并没有加入到git 库, 不参与版本控制. 通过 git add 状态变为 Staged.</li>
<li>Unmodify: 文件已经入库, 未修改, 即版本库中的文件快照内容与文件夹中完全一致. 这种类型的文件有两种去处, 如果它被修改, 而变为 Modified. 如果使用git rm移出版本库, 则成为 Untracked 文件</li>
<li>Modified: 文件已修改, 仅仅是修改, 并没有进行其他的操作. 这个文件也有两个去处, 通过git add可进入暂存staged状态, 使用git checkout 则丢弃修改过, 返回到unmodify状态, 这个git checkout即从库中取出文件, 覆盖当前修改 !</li>
<li>Staged: 暂存状态. 执行git commit则将修改同步到库中, 这时库中的文件和本地文件又变为一致, 文件为Unmodify状态. 执行git reset HEAD filename取消暂存, 文件状态为Modified</li>
</ul>
<h2 id="查看文件状态">5.2 查看文件状态</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">touch hello.py</span><br><span class="line"></span><br><span class="line">git status hello.py <span class="comment"># 产看指定文件状态</span></span><br><span class="line">git status <span class="comment"># 查看所有文件状态</span></span><br><span class="line"></span><br><span class="line">git add hello.py <span class="comment"># 添加指定文件到暂存区</span></span><br><span class="line">git add . <span class="comment"># 添加所有文件到暂存区 (repository)</span></span><br><span class="line"></span><br><span class="line">git rm --cached hello.py <span class="comment"># 将文件从暂存区移除</span></span><br><span class="line">git restore -staged add.py <span class="comment"># 将文件从暂存区移除</span></span><br><span class="line"></span><br><span class="line">git commit -m <span class="string">&quot;a new file named hello.py&quot;</span> </span><br><span class="line"><span class="comment"># 提交暂存区内容至本地仓库</span></span><br><span class="line"></span><br><span class="line">git push -u origin master -f</span><br><span class="line"><span class="comment"># 第一次使用push的时候加上-u,以后可不加，-f强制上传</span></span><br></pre></td></tr></table></figure>
<h2 id="忽略文件">5.3 忽略文件</h2>
<p>有些时候我们不想把某些文件纳入版本控制中，比如数据库文件，临时文件，设计文件等</p>
<p>在主目录下建立".gitignore"文件，此文件有如下规则：</p>
<ul>
<li>忽略文件中的空行或以井号（#）开始的行将会被忽略。</li>
<li>可以使用Linux通配符。例如：星号（*）代表任意多个字符，问号（？）代表一个字符，方括号（[abc]）代表可选字符范围，大括号（{string1,string2,...}）代表可选的字符串等。</li>
<li>如果名称的最前面有一个感叹号（!），表示例外规则，将不被忽略。</li>
<li>如果名称的最前面是一个路径分隔符（/），表示要忽略的文件在此目录下，而子目录中的文件不忽略。</li>
<li>如果名称的最后面是一个路径分隔符（/），表示要忽略的是此目录下该名称的子目录，而非文件（默认文件或目录都忽略）。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 为注释</span></span><br><span class="line">*.txt  <span class="comment"># 忽略.txt结尾的文件,上传时不会被选中！</span></span><br><span class="line">!lib.txt     <span class="comment"># 但lib.txt除外</span></span><br><span class="line">/temp        <span class="comment">#仅忽略项目根目录下的TODO文件,不包括其它目录temp</span></span><br><span class="line">build/       <span class="comment">#忽略build/目录下的所有文件</span></span><br><span class="line">doc/*.txt    <span class="comment">#忽略doc/notes.txt 但不包括 doc/server/arch.txt</span></span><br></pre></td></tr></table></figure>
<h1 id="使用码云">6. 使用码云</h1>
<blockquote>
<p>github 是有墙的，比较慢，国内一般用 gitee</p>
</blockquote>
<h2 id="设置免密码登录">6.1 设置免密码登录</h2>
<ol type="1">
<li><p>设置本机绑定SSH公钥，实现免密码登录！</p>
<p>免密码登录，这一步挺重要的，码云是远程仓库，我们是平时工作在本地仓库！</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 进入 C:\Users\YangSu\.ssh 目录</span></span><br><span class="line"><span class="comment"># 生成公钥</span></span><br><span class="line">ssh-keygen -t rsa <span class="comment"># 加密算法</span></span><br></pre></td></tr></table></figure></li>
<li><p>将公钥信息public key 添加到码云账户中</p>
<p>密钥信息存储在 id_rsa.pub 文件中</p></li>
<li><p>使用 gitee 创建一个自己的仓库</p>
<p><strong>许可证：</strong>开源是否可以随意转载，开源但是不能商业使用，不能转载，... 限制！</p></li>
</ol>
<h2 id="添加远程库">7.2 添加远程库</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">git remote add origin https://gitee.com/yangsuoly/GitStudy.git</span><br><span class="line"><span class="comment"># 添加远程库, HTTPS方式，ssh可以免密</span></span><br><span class="line"></span><br><span class="line">git remote -v <span class="comment"># 查看 clone 的地址</span></span><br><span class="line">git remote rm origin <span class="comment"># 移除远程库地址</span></span><br><span class="line">git remote add origin git@gitee.com:yangsuoly/GitStudy.git <span class="comment"># 添加远程库地址，SSH方式</span></span><br><span class="line"></span><br><span class="line">cat /c/Users/YangSu/.ssh/id_rsa.pub <span class="comment"># 查看公玥</span></span><br><span class="line">    </span><br><span class="line">git push -u origin master -f <span class="comment"># 首次使用</span></span><br><span class="line">git push <span class="comment"># 之后</span></span><br></pre></td></tr></table></figure>
<h1 id="git-分支">8. Git 分支</h1>
<h2 id="git-常用指令">8.1 Git 常用指令</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 列出所有本地分支</span></span><br><span class="line">git branch</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出所有远程分支</span></span><br><span class="line">git branch -r</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个分支，但依然停留在当前分支</span></span><br><span class="line">git branch [branch-name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个分支，并切换到该分支</span></span><br><span class="line">git checkout -b [branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 合并指定分支到当前分支</span></span><br><span class="line">$ git merge [branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除分支</span></span><br><span class="line">$ git branch -d [branch-name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除远程分支</span></span><br><span class="line">$ git push origin --delete [branch-name]</span><br><span class="line">$ git branch -dr [remote/branch]</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Notes</category>
        <category>OS</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux notes</title>
    <url>/2020/11/23/Linux/</url>
    <content><![CDATA[<h1 id="command">1. Command</h1>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cd / pwd / ls</span><br><span class="line">mkdir / rmdir</span><br><span class="line">cp / rm / mv</span><br><span class="line">tar / <span class="built_in">zip</span> / unzip</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="cd">1.1 cd</h2>
<p>即 current directory，切换目录</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cd /home/YangSu/Desktop <span class="comment">#按TAB键可以自动补全</span></span><br><span class="line">cd ~/Desktop <span class="comment">#其中~特指用户的主目录</span></span><br><span class="line">cd.. <span class="comment"># 回到上一个目录</span></span><br><span class="line">cd <span class="comment">#回到用户目录位置</span></span><br></pre></td></tr></table></figure>
<h4 id="绝对路径">绝对路径</h4>
<p>/home/YangSu/Desktop</p>
<h4 id="相对路径">相对路径</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">. 当前目录</span><br><span class="line">.. 上级目录</span><br><span class="line">../Videos 上级目录下的Videos子目录</span><br></pre></td></tr></table></figure>
<h2 id="pwd">1.2 pwd</h2>
<p>即 print working directory 显示当前工作目录</p>
<h2 id="ls">1.3 ls</h2>
<p>即 list，列出文件和目录</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ls</span><br><span class="line">ls ~/Desktop</span><br><span class="line">ls -l ~/Desktop <span class="comment">#其中，-l参数表示详细模式</span></span><br></pre></td></tr></table></figure>
<h2 id="mkdir">1.4 mkdir</h2>
<p>即 make directory，创建目录</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">mkdir abc</span><br><span class="line">mkdir -p abc/<span class="number">123</span>/test </span><br><span class="line"><span class="comment">#使用-p参数，可以将路径的层次目录全部创建</span></span><br></pre></td></tr></table></figure>
<h2 id="touch">1.5 touch</h2>
<p>新建一个文件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">touch index.js</span><br><span class="line"><span class="comment"># 在当前目录下新建一个 index.js 文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># windows terminal中</span></span><br><span class="line">new-item index.js</span><br></pre></td></tr></table></figure>
<h2 id="rm">1.6 rm</h2>
<h3 id="rm-1">rm</h3>
<p>即 remove 删除文件或目录</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">rm -rf abc <span class="comment">#删除abc目录，和子项一并删除</span></span><br><span class="line"><span class="comment">#其中，r:recursive, f:force</span></span><br></pre></td></tr></table></figure>
<h3 id="rmdir">rmdir</h3>
<p>即 remove directory，删除空目录</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">rmdir abc <span class="comment">#删除空目录，如果目录非空，则会删除失败</span></span><br></pre></td></tr></table></figure>
<h2 id="cp">1.7 cp</h2>
<p>即 copy，复制文件或者目录</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cp -rf Test Test1</span><br></pre></td></tr></table></figure>
<h2 id="mv">1.8 mv</h2>
<p>即 move，移动文件或目录（重命名）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">mv Test1 HelloWorld</span><br></pre></td></tr></table></figure>
<h2 id="tar">1.9 tar</h2>
<p>即 tape archive档案打包</p>
<h3 id="创建档案包">创建档案包</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tar -cvf example.tar example</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">c: create</span></span><br><span class="line"><span class="string">v: verbose，显示详情</span></span><br><span class="line"><span class="string">f: file</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># 也可以多个目录打包</span></span><br><span class="line">tar -cvd xxx.tar file1 file2 file3</span><br></pre></td></tr></table></figure>
<h4 id="还原档案包">还原档案包</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tar -xvf example.tar</span><br><span class="line">tar -xvf example.tar -C outdir</span><br></pre></td></tr></table></figure>
<h4 id="归档并压缩">归档并压缩</h4>
<p>上述的tar格式并没有对文件进行压缩，体积较大</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 并档并压缩</span></span><br><span class="line">tar -czvf example.tar.gz example</span><br><span class="line"><span class="comment"># 解压缩</span></span><br><span class="line">tar -xzvf example.tar.gz -C outdir</span><br></pre></td></tr></table></figure>
<h2 id="man">1.10 man</h2>
<p>即 manual，手册</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">man tar</span><br></pre></td></tr></table></figure>
<h2 id="ln">1.11 ln</h2>
<p>软链接，即Windows中的 “ 快捷方式 ”</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ln -s source link</span><br><span class="line"><span class="comment"># s: soft</span></span><br><span class="line">ls -l <span class="comment"># 查看软链接，显示为：test -&gt; Test/</span></span><br><span class="line">ls -l / <span class="comment">#详细列出根目录</span></span><br></pre></td></tr></table></figure>
<h2 id="other">1.12 other</h2>
<ul>
<li>reset：重新初始化终端，即清屏</li>
<li>clear：清屏</li>
<li>history：查看命令历史</li>
<li>help：帮助</li>
<li>exit：推出</li>
<li>#：表示注释</li>
</ul>
<h1 id="management">2 Management</h1>
<h2 id="switch-user">2.1 Switch user</h2>
<ul>
<li>su</li>
</ul>
<p>即 switch user，切换用户。用户管理需要以管理员身份执行，所以，要先切换账户到 <strong>root</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">su root</span><br><span class="line">su <span class="comment"># 默认为 root</span></span><br></pre></td></tr></table></figure>
<h2 id="user-operation">2.2 User operation</h2>
<ul>
<li>useradd</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">useradd username</span><br></pre></td></tr></table></figure>
<ul>
<li>passwd</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">passwd username</span><br></pre></td></tr></table></figure>
<ul>
<li>userdel</li>
</ul>
<p>即 user delete</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">userdel username</span><br></pre></td></tr></table></figure>
<h2 id="group-operation">2.3 Group operation</h2>
<ul>
<li>groupadd</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">groupadd boys <span class="comment"># 创建用户组</span></span><br></pre></td></tr></table></figure>
<ul>
<li>groupdel</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">groupdel boys <span class="comment"># 删除用户组</span></span><br></pre></td></tr></table></figure>
<ul>
<li>useradd</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">useradd -g boys ming <span class="comment"># -g表示添加用户，同时添加到boys中</span></span><br></pre></td></tr></table></figure>
<ul>
<li>usermod</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">usermod -g boys YangSu <span class="comment"># 修改用户信息</span></span><br></pre></td></tr></table></figure>
<ul>
<li>cat</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cat /etc/group <span class="comment"># 查看用户组，每一行表示一个group的信息</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">输出为：名称 + ID</span></span><br><span class="line"><span class="string">YangSu:x:1000:</span></span><br><span class="line"><span class="string">boys:x:1001:</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">cat /etc/passwd <span class="comment"># 查看用户列表，每一行表示一个user信息</span></span><br></pre></td></tr></table></figure>
<h2 id="file-permission">2.4 File permission</h2>
<ul>
<li>View Permission</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ls -l test.txt</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">-rw-------</span></span><br><span class="line"><span class="string">第一个字母，如果是文件夹，则为d，文件则为-</span></span><br><span class="line"><span class="string">后面九个字符分为三部分：自己 | 同组 | 别人</span></span><br><span class="line"><span class="string">rwx------ # 自己可读可写可执行</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>chmod</li>
</ul>
<p>即 Change file mode，修改文件的访问权限</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">chmod o+w test.txt</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">o: other</span></span><br><span class="line"><span class="string">a: all</span></span><br><span class="line"><span class="string">u: user # 省略怎默认修改自己和本组的权限</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">+w: add write permission</span></span><br><span class="line"><span class="string">-w: delete write permission</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>chown</li>
</ul>
<p>即 Change owner，修改文件的属主，一般每个用户只操作自己用户目录</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">su</span><br><span class="line">mkdir /opt/source <span class="comment"># 在/opt目录下创建一个文件夹source</span></span><br><span class="line">chown -R YangSu /opt/source <span class="comment"># 将source目录分配给YangSu</span></span><br><span class="line">ls -ld /opt/source</span><br></pre></td></tr></table></figure>
<h2 id="script">2.5 Script</h2>
<ul>
<li>Shell 脚本： *.sh</li>
<li>Perl 脚本： *.pl</li>
<li>Python 脚本：*.py</li>
</ul>
<p>脚本程序本质上是一个文本文件，具有可执行权限</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Shell 脚本解释器：/<span class="built_in">bin</span>/sh</span><br><span class="line">Perl 脚本解释器：/<span class="built_in">bin</span>/perl</span><br><span class="line">Python 脚本解释器：/usr/<span class="built_in">bin</span>/python3</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行一个脚本时，以下两种方式等效</span></span><br><span class="line">./hello.py</span><br><span class="line">/usr/<span class="built_in">bin</span>/python3 hello.py</span><br></pre></td></tr></table></figure>
<ul>
<li>Shell 脚本</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 编辑一个文本文件</span></span><br><span class="line"><span class="comment">#!/bin/sh # 申明解释器</span></span><br><span class="line">echo <span class="string">&quot;Hello World!&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存为Hello.sh</span></span><br><span class="line"><span class="comment"># 添加可执行权限，必须要有x权限，才能够执行</span></span><br><span class="line">chmod +x Hello.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行程序</span></span><br><span class="line">./Hello.sh <span class="comment"># 执行程序时，必须加上路径</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">./表示当前路径</span></span><br><span class="line"><span class="string">/home/YangSu/Test/Hello.sh</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>Perl 脚本</li>
<li>Py 脚本</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br></pre></td></tr></table></figure>
<h2 id="shell">2.6 Shell</h2>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 定义变量，NAME=value</span></span><br><span class="line">JAVA_HOME=/opt/java #中间不能有空格</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 调用命令</span></span><br><span class="line">echo $&#123;JAVA_HOME&#125;/bin</span><br><span class="line">ls $&#123;JAVA_HOME&#125; #使用变量</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 逻辑控制</span></span><br><span class="line">if ... while ...</span><br></pre></td></tr></table></figure>
<h1 id="enviroment">3 Enviroment</h1>
<h2 id="enviromental-viriables">3.1 Enviromental Viriables</h2>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export JAVA_HOME=/opt/jdk1.8 # 定义临时的环境变量</span><br><span class="line">echo $JAVA_HOME # 显示环境变量</span><br><span class="line">printenv #查看所有环境变量</span><br></pre></td></tr></table></figure>
<p>使用环境变量：</p>
<ul>
<li>在当前命令行中使用</li>
<li>在 Shell 脚本中使用</li>
</ul>
<h2 id="user-viriables">3.2 User Viriables</h2>
<p>用户环境变量定义在：~/.bash_profile 中（注：在 Linux 下，以 . 开头的文件为 <strong>隐藏文件</strong> ）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ls -la # a 表示 all，显示所有文件</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 用户环境变量，g 表示 GNU</span></span><br><span class="line">gedit ~/.bash_profile</span><br><span class="line"><span class="meta">#</span><span class="bash"> 添加</span></span><br><span class="line">export JAVA_HOME=/opt/jdk1.8</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 注销当前用户，再次登陆时生效</span></span><br><span class="line">echo $&#123;JAVA_HOME&#125;</span><br></pre></td></tr></table></figure>
<h2 id="system-variables">3.3 System Variables</h2>
<p>系统环境变量定义在：/etc/profile 中，其中的环境变量对 <strong>所有用户</strong> 有效</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 以 root 登录或执行</span></span><br><span class="line">gedit /etc/profile</span><br><span class="line"></span><br><span class="line">:&#x27;</span><br><span class="line"><span class="meta">#</span><span class="bash">在 CentOS 中，一般不可以直接修改 /etc/profile，而是在 /etc/profile.d 创建一个自定义的脚本</span></span><br><span class="line">&#x27;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 用 gedit 创建一个脚本</span></span><br><span class="line">gedit /etc/profile.d/myprofile.sh</span><br><span class="line"><span class="meta">#</span><span class="bash"> 定义环境变量</span></span><br><span class="line">export TOMCAT=/opt/tomcat</span><br><span class="line"><span class="meta">#</span><span class="bash"> 注销并重新登录</span></span><br></pre></td></tr></table></figure>
<h2 id="path-variables">3.4 PATH Variables</h2>
<p>PATH，最常见的环境变量，用来描述可执行程序的搜索路径</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo $PATH </span><br><span class="line"><span class="meta">#</span><span class="bash"> OUTPUT:/home/YangSu/.<span class="built_in">local</span>/bin:/home/YangSu/bin:/home/YangSu/.<span class="built_in">local</span>/bin:/home/YangSu/bin:/home/YangSu/.<span class="built_in">local</span>/bin:/home/YangSu/bin:/usr/<span class="built_in">local</span>/bin:/usr/<span class="built_in">local</span>/sbin:/usr/bin:/usr/sbin</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 多个路径之间用冒号分隔</span></span><br></pre></td></tr></table></figure>
<h2 id="network">3.5 Network</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ifconfig <span class="comment"># 检查IP地址，Windows 为ipconfig</span></span><br><span class="line">ping www.baidu.com <span class="comment"># 测试外网</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">虚拟机和宿主机时互相连通的</span></span><br><span class="line"><span class="string">虚拟机：192.168.11.128</span></span><br><span class="line"><span class="string">宿主机：192.168.11.1</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<h1 id="centos8-图形界面和命令行切换">4 CentOS8 图形界面和命令行切换</h1>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看目前默认的启动默认</span></span><br><span class="line">systemctl get-default</span><br><span class="line"><span class="meta">#</span><span class="bash"> 命令行模式:multi-user.target</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 图形界面模式:graphical.target</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置为图形界面模式</span></span><br><span class="line">systemctl set-default graphical.target</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置为命令行模式</span></span><br><span class="line">systemctl set-default multi-user.target</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Notes</category>
        <category>OS</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>CentOS</tag>
      </tags>
  </entry>
  <entry>
    <title>Numpy</title>
    <url>/2020/11/29/Numpy/</url>
    <content><![CDATA[<h1 id="numpy-version">1 NumPy version</h1>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">print(np.__version__) <span class="comment"># 查看 numpy 版本</span></span><br></pre></td></tr></table></figure>
<p>NumPy( Numerical Python) 是 Python 数值计算最重要的基础库，核心是 N 维数组对象 ndarray ( N-dimensional array )。</p>
<a id="more"></a>
<h1 id="create-ndarray">2 Create ndarray</h1>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">array_1x6 = np.array([<span class="number">1.0</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>], dtype = np.float64) <span class="comment"># 用 list 创建 array，可以通过 dtype 参数指定元素的类型  </span></span><br><span class="line"></span><br><span class="line">print(array_1x6.dtype)</span><br><span class="line"></span><br><span class="line"><span class="comment"># number of dimension</span></span><br><span class="line">print(<span class="string">&#x27;number of dim: &#x27;</span>,array_1x6.ndim)</span><br><span class="line">print(<span class="string">&#x27;shape: &#x27;</span>,array_1x6.shape)</span><br><span class="line">print(<span class="string">&#x27;size: &#x27;</span>,array_1x6.size) </span><br><span class="line"><span class="comment"># total number of elements </span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(array_1x6) <span class="comment"># 空格分隔元素</span></span><br><span class="line">[<span class="number">1.</span> <span class="number">2.</span> <span class="number">3.</span> <span class="number">4.</span> <span class="number">5.</span> <span class="number">6.</span>]</span><br></pre></td></tr></table></figure>
<h1 id="special-ndarray">4 Special ndarray</h1>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a1 = np.zeros((<span class="number">3</span>,<span class="number">4</span>)) <span class="comment"># 零矩阵</span></span><br><span class="line">a2 = np.ones((<span class="number">3</span>,<span class="number">4</span>)) <span class="comment"># 1 矩阵</span></span><br><span class="line">a3 = np.empty((<span class="number">3</span>,<span class="number">4</span>)) <span class="comment"># 未初始化的矩阵</span></span><br><span class="line">a4 = arange(<span class="number">10</span>, <span class="number">20</span>, <span class="number">2</span>) <span class="comment"># 步长为 2 的数列</span></span><br><span class="line">a5 = np.arange(<span class="number">12</span>).reshape(<span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">a6 = np.linspace(<span class="number">1</span>, <span class="number">10</span>, <span class="number">5</span>) <span class="comment"># 5 个元素的线段</span></span><br><span class="line">print(a1, a2, a3, a4, sep = <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">print(a6 &lt; <span class="number">5</span>) <span class="comment"># 返回布尔类型的矩阵</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 随机矩阵</span></span><br><span class="line">a = np.random.random((<span class="number">2</span>, <span class="number">4</span>)) <span class="comment"># 0-1的随机数</span></span><br><span class="line">print(np.<span class="built_in">sum</span>(a), np.<span class="built_in">min</span>(a), np.<span class="built_in">max</span>(a))</span><br><span class="line">np.<span class="built_in">sum</span>(a, axis = <span class="number">0</span>) <span class="comment"># 列操作，axis = 1行操作，the default, axis = None，will sum all of the elements of the input array</span></span><br></pre></td></tr></table></figure>
<h1 id="array-operations">4 Array operations</h1>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = np.array([[<span class="number">10</span>, <span class="number">20</span>], [<span class="number">30</span>, <span class="number">40</span>]])</span><br><span class="line">b = np.arange(<span class="number">4</span>).reshape(<span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line">print(a, b, sep = <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">print(<span class="string">&#x27;-------------&#x27;</span>)</span><br><span class="line">c1 = a + b</span><br><span class="line">c2 = a * b <span class="comment"># 对应元素相乘</span></span><br><span class="line"></span><br><span class="line">c3 = np.dot(a, b) <span class="comment"># 矩阵相乘，点乘</span></span><br><span class="line">c4 = a.dot(b) <span class="comment"># 和上式相同，a 值不改变</span></span><br><span class="line">print(c1, c2, c3, sep = <span class="string">&#x27;\n&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h1 id="array-basic-methods">5 Array basic methods</h1>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># find elements</span></span><br><span class="line">A = np.arange(<span class="number">2</span>, <span class="number">14</span>).reshape(<span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">index = np.argmax(A)  <span class="comment"># 最大值索引or argmin</span></span><br><span class="line">mean = np.mean(A) <span class="comment"># 均值</span></span><br><span class="line">median = np.median(A) <span class="comment"># 中位数</span></span><br><span class="line">print(index, mean, median, sep = <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">上述函数皆默认axis = None, the index is into the flattened array，若添加参数：axis = 1 则返回每一行的相关操作，axis = 0 则返回每一列的相关操作，具体参照: help(np.mean)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># A：3x4 的数组</span></span><br><span class="line">cumsum = np.cumsum(A) </span><br><span class="line"><span class="comment"># 累加，axis默认为None，输出1x12数组</span></span><br><span class="line">diff = np.diff(A) </span><br><span class="line"><span class="comment"># 差分，默认axis=-1，即行操作与axis=1效果相同，返回3X3的数组，axis=0，返回2x4数组</span></span><br><span class="line"></span><br><span class="line">non = np.nonzero(A)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">查找非零元素的索引，返回两个array，第一个为行索引，第二个为列索引</span></span><br><span class="line"><span class="string">输出：</span></span><br><span class="line"><span class="string">(array([0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2], dtype=int64), array([0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3], dtype=int64))</span></span><br><span class="line"><span class="string"> &#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 矩阵转置, transpose array</span></span><br><span class="line">transpose1 = np.transpose(A)</span><br><span class="line">transpose2 = A.T</span><br><span class="line">print(transpose1, transpose2, sep = <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">print(transpose1.dot(A)) <span class="comment"># $&#123;A * A^T&#125;$ </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># clip</span></span><br><span class="line">a = np.arange(<span class="number">2</span>, <span class="number">14</span>).reshape(<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line">clip = np.clip(a, <span class="number">5</span>, <span class="number">9</span>)</span><br><span class="line">print(a, clip, sep = <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">Given an interval [5, 9], values outside this interval are clipped to this interval edges, namely 5 and 9</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 行迭代输出</span></span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> a:</span><br><span class="line">    print(row)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 列迭代输出    </span></span><br><span class="line"><span class="keyword">for</span> column <span class="keyword">in</span> a.T:</span><br><span class="line">    print(column.T)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 元素迭代, flat返回迭代器，flatten()返回array</span></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> a.flat: <span class="comment"># or a.flatten()</span></span><br><span class="line">    print(item)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="array-joint">6 Array joint</h1>
<h2 id="vstack-and-hstack">6.1 vstack and hstack</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = np.array([<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>])</span><br><span class="line">b = np.array([<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>])</span><br><span class="line">c = np.vstack((a, b)) <span class="comment">#vertical stack 纵向</span></span><br><span class="line">d = np.hstack((a, b)) <span class="comment"># horizontal stack 横</span></span><br><span class="line">print(a.shape, c.shape) <span class="comment"># a 的shape为序列</span></span><br><span class="line">print(c, d, sep = <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">print(a.T.shape) <span class="comment"># 并未改变shape，0x3维</span></span><br><span class="line">a1 = a[:, np.newaxis] <span class="comment"># 在后面加维度，3x1维</span></span><br><span class="line">a2 = a[np.newaxis, :] <span class="comment"># add before, 1x3</span></span><br><span class="line">c= np.array([[<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>],[<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>]]) <span class="comment"># 2x3</span></span><br><span class="line">c1 = c[np.newaxis, :] <span class="comment"># add before 1x2x3</span></span><br><span class="line">c2 = c[:, np.newaxis] <span class="comment"># same as c3</span></span><br><span class="line">c3 = c[:, np.newaxis, :] <span class="comment"># 2x1x3</span></span><br><span class="line">c4 = c[:, :, np.newaxis] <span class="comment"># 2x3x1</span></span><br></pre></td></tr></table></figure>
<h2 id="concatenate">6.2 concatenate</h2>
<p>Join a sequence of arrays along a existing axis, default axis is o, if axis = None, arrays will be flattened before use.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = np.array([<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>])[:, np.newaxis]</span><br><span class="line">b = np.array([<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>])[:, np.newaxis]</span><br><span class="line"></span><br><span class="line">c1 = np.concatenate((a,b,b,a)) <span class="comment"># same as c2</span></span><br><span class="line">c2 = np.concatenate((a,b,b,a), axis = <span class="number">0</span>)</span><br><span class="line">c3 = np.concatenate((a,b,b,a), axis = <span class="number">1</span>)</span><br><span class="line">c4 = np.concatenate((a,b,b,a), axis = <span class="literal">None</span>)</span><br><span class="line">print(c1, c2, c3, c4, sep=<span class="string">&#x27;\n&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h1 id="array-split">7 Array split</h1>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">a = np.arange(<span class="number">2</span>, <span class="number">14</span>).reshape(<span class="number">3</span>, <span class="number">4</span>) <span class="comment"># 3x4</span></span><br><span class="line">print(a)</span><br><span class="line">print(np.split(a, <span class="number">3</span>, axis = <span class="number">0</span>)) <span class="comment"># vertical</span></span><br><span class="line">print(np.split(a, <span class="number">2</span>, axis = <span class="number">1</span>)) <span class="comment">#horizontal</span></span><br><span class="line"><span class="comment"># 只能进行相等的分割</span></span><br></pre></td></tr></table></figure>
<ul>
<li><strong>np.split(ary, indices_or sections, axis = 0)</strong></li>
</ul>
<p>Array to be divided into multiple sub-arrays along the given 'axis ', if such split is not possible, then an error will be rasied.</p>
<h1 id="array-copy">8 Array copy</h1>
<ul>
<li><strong>Copy and deep copy</strong></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">a = np.arange(<span class="number">2</span>, <span class="number">5</span>)</span><br><span class="line">b = a <span class="comment"># shallow copy</span></span><br><span class="line">a[<span class="number">0</span>] = <span class="number">10</span></span><br><span class="line">print(a, b)</span><br><span class="line">b1 = a.copy() <span class="comment"># deep copy</span></span><br><span class="line">a[<span class="number">0</span>] = <span class="number">20</span></span><br><span class="line">print(a, b1)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Notes</category>
        <category>Python module</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Data analysis</tag>
        <tag>Numpy</tag>
      </tags>
  </entry>
  <entry>
    <title>PDF_test</title>
    <url>/2020/12/01/PDF-test/</url>
    <content><![CDATA[<p><br><div class="pdfobject-container" data-target="https://yangsuoly.com/file/Latex-Notes.pdf" data-height="500px"></div></p>
<p><br></p>
]]></content>
      <categories>
        <category>Notes</category>
        <category>Latex</category>
      </categories>
      <tags>
        <tag>Latex</tag>
      </tags>
  </entry>
  <entry>
    <title>Pandas</title>
    <url>/2020/11/27/Pandas/</url>
    <content><![CDATA[<h1 id="series">1 Series</h1>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">t = pd.Timestamp(<span class="string">&#x27;20180901&#x27;</span>) <span class="comment"># time type</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># np.nan means NaN</span></span><br><span class="line">s = pd.Series([<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, np.nan, <span class="number">44</span>, <span class="number">1</span>])</span><br><span class="line">print(s)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dates = pd.date_range(<span class="string">&#x27;20200101&#x27;</span>, periods = <span class="number">6</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dates</span><br><span class="line">DatetimeIndex([<span class="string">&#x27;2020-01-01&#x27;</span>, <span class="string">&#x27;2020-01-02&#x27;</span>, <span class="string">&#x27;2020-01-03&#x27;</span>, <span class="string">&#x27;2020-01-04&#x27;</span>,<span class="string">&#x27;2020-01-05&#x27;</span>, <span class="string">&#x27;2020-01-06&#x27;</span>],dtype=<span class="string">&#x27;datetime64[ns]&#x27;</span>, freq=<span class="string">&#x27;D&#x27;</span>)</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<ul>
<li><strong>DataFrame</strong></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># create a dataframe based on imported array</span></span><br><span class="line">df0 = pd.DataFrame(np.random.randn(<span class="number">6</span>,<span class="number">4</span>), index = dates, columns = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>])</span><br><span class="line">df1 = pd.DataFrame(np.arange(<span class="number">12</span>).reshape(<span class="number">3</span>,<span class="number">4</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># create a dataframe based on dict</span></span><br><span class="line">df3 = pd.DataFrame(&#123;<span class="string">&#x27;A&#x27;</span>:<span class="number">1.</span>, <span class="string">&#x27;B&#x27;</span>:pd.Timestamp(<span class="string">&#x27;20160901&#x27;</span>), <span class="string">&#x27;C&#x27;</span>:pd.Series(<span class="number">1</span>,index=<span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">4</span>)),dtype=<span class="string">&#x27;float32&#x27;</span>), <span class="string">&#x27;D&#x27;</span>:np.array([<span class="number">3</span>]*<span class="number">4</span>, dtype =<span class="string">&#x27;int32&#x27;</span>),<span class="string">&#x27;E&#x27;</span>:pd.Categorical([<span class="string">&#x27;test&#x27;</span>,<span class="string">&#x27;train&#x27;</span>,<span class="string">&#x27;test&#x27;</span>,<span class="string">&#x27;train&#x27;</span>]),<span class="string">&#x27;F&#x27;</span>:<span class="string">&#x27;foo&#x27;</span>&#125;)</span><br><span class="line">print(df0, df1, df3, sep = <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">df3.dtypes <span class="comment"># dimensional type</span></span><br><span class="line">df3.index <span class="comment"># row index name</span></span><br><span class="line">df3.columns <span class="comment"># column name</span></span><br><span class="line">df3.describe() <span class="comment"># describe numerical characteristics, including count, mean, std, min etc.</span></span><br><span class="line">df3.T </span><br><span class="line">df3.transpose() <span class="comment"># transpose array</span></span><br><span class="line">df3.sort_index(axis = <span class="number">1</span>, ascending = <span class="literal">False</span>)</span><br><span class="line"><span class="comment"># horizontal descending sort</span></span><br></pre></td></tr></table></figure>
<h1 id="choose-data">2 Choose data</h1>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">df = pd.DataFrame(&#123;<span class="string">&#x27;A&#x27;</span>:<span class="number">1.</span>, <span class="string">&#x27;B&#x27;</span>:pd.Timestamp(<span class="string">&#x27;20160901&#x27;</span>), <span class="string">&#x27;C&#x27;</span>:pd.Series(<span class="number">1</span>,index=<span class="built_in">list</span>(arange(<span class="number">4</span>)),dtype=<span class="string">&#x27;float32&#x27;</span>), <span class="string">&#x27;D&#x27;</span>:np.array([<span class="number">3</span>]*<span class="number">4</span>, dtype =<span class="string">&#x27;int32&#x27;</span>),<span class="string">&#x27;E&#x27;</span>:pd.Categorical([<span class="string">&#x27;test&#x27;</span>,<span class="string">&#x27;train&#x27;</span>,<span class="string">&#x27;test&#x27;</span>,<span class="string">&#x27;train&#x27;</span>]),<span class="string">&#x27;F&#x27;</span>:<span class="string">&#x27;foo&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line">df1 = df.A <span class="comment"># same sa df.[&#x27;A&#x27;]</span></span><br><span class="line">df2 = df[<span class="number">0</span>:<span class="number">3</span>] <span class="comment"># row operation, 0-3 row</span></span><br><span class="line">df2_1 = df[<span class="number">0</span>:<span class="number">1</span>] <span class="comment"># single row</span></span><br><span class="line">df2_2 = df[<span class="string">&#x27;A&#x27;</span>] <span class="comment"># single column</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># select by label based index: loc</span></span><br><span class="line">df3 = df.loc[<span class="number">1</span>] <span class="comment"># the second row</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># selct by postitional index: iloc</span></span><br><span class="line">df4 = df.iloc[:,<span class="number">1</span>:<span class="number">3</span>] <span class="comment"># 1-3 column</span></span><br><span class="line"><span class="comment"># mixed selection: ix</span></span><br><span class="line">df5 = df.ix[:<span class="number">2</span>,[<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;D&#x27;</span>]] <span class="comment"># deprecated</span></span><br><span class="line"></span><br><span class="line">df6 = df[df[<span class="string">&#x27;A&#x27;</span>] &gt; <span class="number">4</span>]</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">df[&#x27;A&#x27;] &gt; 4 return the row index which number is bigger than 4, let me name this index as iRow, then df[iRow] return the row date that meets above filter condition</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<h1 id="set-value">3 Set Value</h1>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">df = pd.DataFrame(&#123;<span class="string">&#x27;A&#x27;</span>:<span class="number">1.</span>, <span class="string">&#x27;B&#x27;</span>:pd.Timestamp(<span class="string">&#x27;20160901&#x27;</span>), <span class="string">&#x27;C&#x27;</span>:pd.Series(<span class="number">1</span>,index=<span class="built_in">list</span>(arange(<span class="number">4</span>)),dtype=<span class="string">&#x27;float32&#x27;</span>), <span class="string">&#x27;D&#x27;</span>:np.array([<span class="number">3</span>]*<span class="number">4</span>, dtype =<span class="string">&#x27;int32&#x27;</span>),<span class="string">&#x27;E&#x27;</span>:pd.Categorical([<span class="string">&#x27;test&#x27;</span>,<span class="string">&#x27;train&#x27;</span>,<span class="string">&#x27;test&#x27;</span>,<span class="string">&#x27;train&#x27;</span>]),<span class="string">&#x27;F&#x27;</span>:<span class="string">&#x27;foo&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line">df.iloc[<span class="number">2</span>, <span class="number">2</span>] = <span class="number">111</span></span><br><span class="line">df.loc[<span class="number">0</span>,<span class="string">&#x27;B&#x27;</span>] = pd.Timestamp(<span class="string">&#x27;20180901&#x27;</span>)</span><br><span class="line"><span class="comment"># Note: below command will create a new column named (0, &#x27;B&#x27;) which values are given</span></span><br><span class="line">df[<span class="number">0</span>,<span class="string">&#x27;B&#x27;</span>] = pd.Timestamp(<span class="string">&#x27;20180901&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h1 id="process-default-value">4 Process default value</h1>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">df = pd.DataFrame(&#123;<span class="string">&#x27;A&#x27;</span>:<span class="number">1.</span>, <span class="string">&#x27;B&#x27;</span>:pd.Timestamp(<span class="string">&#x27;20160901&#x27;</span>), <span class="string">&#x27;C&#x27;</span>:pd.Series(<span class="number">1</span>,index=<span class="built_in">list</span>(arange(<span class="number">4</span>)),dtype=<span class="string">&#x27;float32&#x27;</span>), <span class="string">&#x27;D&#x27;</span>:np.array([<span class="number">3</span>]*<span class="number">4</span>, dtype =<span class="string">&#x27;int32&#x27;</span>),<span class="string">&#x27;E&#x27;</span>:pd.Categorical([<span class="string">&#x27;test&#x27;</span>,<span class="string">&#x27;train&#x27;</span>,<span class="string">&#x27;test&#x27;</span>,<span class="string">&#x27;train&#x27;</span>]),<span class="string">&#x27;F&#x27;</span>:<span class="string">&#x27;foo&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># let (0,2) become default value</span></span><br><span class="line">df.iloc[<span class="number">2</span>, <span class="number">2</span>] = <span class="number">111</span></span><br><span class="line">df.loc[<span class="number">0</span>,<span class="string">&#x27;C&#x27;</span>] = np.nan </span><br><span class="line"></span><br><span class="line"><span class="comment"># Drop NaN</span></span><br><span class="line">df.dropna(axis =<span class="number">0</span>, how = <span class="string">&#x27;any&#x27;</span>) </span><br><span class="line"><span class="comment"># how = [&#x27;any, &#x27;all&#x27;], default is any</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Fill NaN, can&#x27;t do it with df.fillna(0)</span></span><br><span class="line">df[<span class="string">&#x27;C&#x27;</span>] = df[<span class="string">&#x27;C&#x27;</span>].fillna(<span class="number">0</span>)</span><br><span class="line">print(df)</span><br><span class="line"><span class="comment"># maybe below command also can work?</span></span><br><span class="line">df_1 = df.fillna(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">df.isnull() <span class="comment"># find which position is null, return a dataframe same size as df</span></span><br><span class="line">np.<span class="built_in">any</span>(df.isnull()) == <span class="literal">True</span> </span><br></pre></td></tr></table></figure>
<h1 id="read-and-save-file">5 Read and save file</h1>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">data = pd.read_csv(<span class="string">&#x27;xx.csv&#x27;</span>) <span class="comment"># read</span></span><br><span class="line">data.to_csv(<span class="string">&#x27;xxx.csv&#x27;</span>) <span class="comment"># save file</span></span><br></pre></td></tr></table></figure>
<h1 id="merge-dataframes">6 Merge dataframes</h1>
<h2 id="concatenation">6.1 Concatenation</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1 array multiply o is o</span></span><br><span class="line">df1 = pd.DataFrame(np.ones((<span class="number">3</span>, <span class="number">4</span>)) * <span class="number">0</span>, columns = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>])</span><br><span class="line">df2 = pd.DataFrame(np.ones((<span class="number">3</span>, <span class="number">4</span>)) * <span class="number">1</span>, columns = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>])</span><br><span class="line">df3 = pd.DataFrame(np.ones((<span class="number">3</span>, <span class="number">4</span>)) * <span class="number">2</span>, columns = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>])</span><br><span class="line">res = pd.concat([df1, df2, df3], axis = <span class="number">0</span>, ignore_index = <span class="literal">True</span>) <span class="comment"># default don&#x27;t ignore index, the difference seen in below pic</span></span><br></pre></td></tr></table></figure>
<p><img src="https://s3.ax1x.com/2020/11/25/DamaCR.png" /></p>
<center>
fig. 1 differenc of ignoring index
</center>
<ul>
<li><strong>join = ['inner', 'outer']</strong></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">df1 = pd.DataFrame(np.ones((<span class="number">3</span>, <span class="number">4</span>)) * <span class="number">0</span>, columns = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>], index = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line">df2 = pd.DataFrame(np.ones((<span class="number">3</span>, <span class="number">4</span>)) * <span class="number">1</span>, columns = [<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>], index = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># default join is outer, fill the null space with NaN</span></span><br><span class="line">df3 = pd.concat([df1, df2], axis = <span class="number">0</span>, join = <span class="string">&#x27;outer&#x27;</span>, sort=<span class="literal">False</span>, ignore_index = <span class="literal">True</span>)</span><br><span class="line"><span class="comment"># inner will take the intersection index of two arrays</span></span><br><span class="line">df4 = pd.concat([df1, df2], axis = <span class="number">0</span>, join = <span class="string">&#x27;inner&#x27;</span>, sort=<span class="literal">False</span>, ignore_index = <span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将 df2 合并到 df1，并基于 index 去掉 df2 中有而 df1 没有的数据， 并填充 NaN</span></span><br><span class="line">df5 = pd.concat([df1, df2], axis = <span class="number">1</span>, join_axes = [df1.index])</span><br></pre></td></tr></table></figure>
<h2 id="append">6.2 append</h2>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">df1 &#x3D; pd.DataFrame(np.ones((3, 4)) * 0, columns &#x3D; [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;])</span><br><span class="line">df2 &#x3D; pd.DataFrame(np.ones((3, 4)) * 1, columns &#x3D; [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;])</span><br><span class="line">df3 &#x3D; pd.DataFrame(np.ones((3, 4)) * 1, columns &#x3D; [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;])</span><br><span class="line"> </span><br><span class="line">res &#x3D; df1.append([df2, df3], ignore_index &#x3D; True)</span><br><span class="line"></span><br><span class="line"># add a row series into a df</span><br><span class="line">s1 &#x3D; pd.Series([1, 2, 3, 4], index &#x3D; [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;])</span><br><span class="line">res1 &#x3D; df1.append(s1, ignore_index &#x3D; True)</span><br></pre></td></tr></table></figure>
<h2 id="merge">6.3 merge</h2>
<ul>
<li>merged by single key</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">left = pd.DataFrame(&#123;<span class="string">&#x27;key&#x27;</span>: [<span class="string">&#x27;K0&#x27;</span>, <span class="string">&#x27;K1&#x27;</span>, <span class="string">&#x27;K2&#x27;</span>, <span class="string">&#x27;K3&#x27;</span>],<span class="string">&#x27;A&#x27;</span>: [<span class="string">&#x27;A0&#x27;</span>, <span class="string">&#x27;A1&#x27;</span>, <span class="string">&#x27;A2&#x27;</span>, <span class="string">&#x27;A3&#x27;</span>],<span class="string">&#x27;B&#x27;</span>: [<span class="string">&#x27;B0&#x27;</span>, <span class="string">&#x27;B1&#x27;</span>, <span class="string">&#x27;B2&#x27;</span>, <span class="string">&#x27;B3&#x27;</span>]&#125;)</span><br><span class="line">right = pd.DataFrame(&#123;<span class="string">&#x27;key&#x27;</span>: [<span class="string">&#x27;K0&#x27;</span>, <span class="string">&#x27;K1&#x27;</span>, <span class="string">&#x27;K2&#x27;</span>, <span class="string">&#x27;K3&#x27;</span>],<span class="string">&#x27;C&#x27;</span>: [<span class="string">&#x27;C0&#x27;</span>, <span class="string">&#x27;C1&#x27;</span>, <span class="string">&#x27;C2&#x27;</span>, <span class="string">&#x27;C3&#x27;</span>],<span class="string">&#x27;D&#x27;</span>: [<span class="string">&#x27;D0&#x27;</span>, <span class="string">&#x27;D1&#x27;</span>, <span class="string">&#x27;D2&#x27;</span>, <span class="string">&#x27;D3&#x27;</span>]&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># merge two dfs based on the same key value</span></span><br><span class="line">res = pd.merge(left, right, on = <span class="string">&#x27;key&#x27;</span>)</span><br></pre></td></tr></table></figure>
<ul>
<li>merged by multiple keys</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">left = pd.DataFrame(&#123;<span class="string">&#x27;key1&#x27;</span>: [<span class="string">&#x27;K0&#x27;</span>, <span class="string">&#x27;K0&#x27;</span>, <span class="string">&#x27;K1&#x27;</span>, <span class="string">&#x27;K2&#x27;</span>],<span class="string">&#x27;key2&#x27;</span>: [<span class="string">&#x27;K0&#x27;</span>, <span class="string">&#x27;K1&#x27;</span>, <span class="string">&#x27;K0&#x27;</span>, <span class="string">&#x27;K1&#x27;</span>],<span class="string">&#x27;A&#x27;</span>: [<span class="string">&#x27;A0&#x27;</span>, <span class="string">&#x27;A1&#x27;</span>, 		<span class="string">&#x27;A2&#x27;</span>, <span class="string">&#x27;A3&#x27;</span>],<span class="string">&#x27;B&#x27;</span>: [<span class="string">&#x27;B0&#x27;</span>, <span class="string">&#x27;B1&#x27;</span>, <span class="string">&#x27;B2&#x27;</span>, <span class="string">&#x27;B3&#x27;</span>]&#125;)</span><br><span class="line">right = pd.DataFrame(&#123;<span class="string">&#x27;key1&#x27;</span>: [<span class="string">&#x27;K0&#x27;</span>, <span class="string">&#x27;K1&#x27;</span>, <span class="string">&#x27;K1&#x27;</span>, <span class="string">&#x27;K2&#x27;</span>],<span class="string">&#x27;key2&#x27;</span>: [<span class="string">&#x27;K0&#x27;</span>, <span class="string">&#x27;K1&#x27;</span>, <span class="string">&#x27;K0&#x27;</span>, <span class="string">&#x27;K0&#x27;</span>],<span class="string">&#x27;C&#x27;</span>: [<span class="string">&#x27;C0&#x27;</span>, <span class="string">&#x27;C1&#x27;</span>, 		<span class="string">&#x27;C2&#x27;</span>, <span class="string">&#x27;C3&#x27;</span>],<span class="string">&#x27;D&#x27;</span>: [<span class="string">&#x27;D0&#x27;</span>, <span class="string">&#x27;D1&#x27;</span>, <span class="string">&#x27;D2&#x27;</span>, <span class="string">&#x27;D3&#x27;</span>]&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># merge two dfs based the same key value, default how = inner</span></span><br><span class="line">res1 = pd.merge(left, right, on = [<span class="string">&#x27;key1&#x27;</span>,<span class="string">&#x27;key2&#x27;</span>])</span><br><span class="line">res2 = pd.merge(left, right, on = [<span class="string">&#x27;key1&#x27;</span>,<span class="string">&#x27;key2&#x27;</span>], how = <span class="string">&#x27;inner&#x27;</span>)</span><br><span class="line">res2 = pd.merge(left, right, on = [<span class="string">&#x27;key1&#x27;</span>,<span class="string">&#x27;key2&#x27;</span>], indicator = <span class="literal">True</span>) </span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">how = [&#x27;inner, &#x27;outer&#x27;,&#x27;left&#x27;,&#x27;right&#x27;]</span></span><br><span class="line"><span class="string">if how = &#x27;right&#x27;, this operation will fill left void space with NaN when left haven&#x27;t same key value with right, then merge into right</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">default indicator is False, this parameter will create a new column named _merge(indicator = &#x27;indicator_column&#x27;, then the new column&#x27;s name is indicator_column), which show if both arrays have a meanful value. </span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>merged by index</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">left = pd.DataFrame(&#123;<span class="string">&#x27;A&#x27;</span>: [<span class="string">&#x27;A0&#x27;</span>, <span class="string">&#x27;A1&#x27;</span>, <span class="string">&#x27;A2&#x27;</span>, <span class="string">&#x27;A3&#x27;</span>],<span class="string">&#x27;B&#x27;</span>: [<span class="string">&#x27;B0&#x27;</span>, <span class="string">&#x27;B1&#x27;</span>, <span class="string">&#x27;B2&#x27;</span>, <span class="string">&#x27;B3&#x27;</span>]&#125;, index = [<span class="string">&#x27;K0&#x27;</span>, <span class="string">&#x27;K1&#x27;</span>, <span class="string">&#x27;K2&#x27;</span>,<span class="string">&#x27;K4&#x27;</span>])</span><br><span class="line">right = pd.DataFrame(&#123;<span class="string">&#x27;C&#x27;</span>: [<span class="string">&#x27;C0&#x27;</span>, <span class="string">&#x27;C1&#x27;</span>, <span class="string">&#x27;C2&#x27;</span>, <span class="string">&#x27;C3&#x27;</span>],<span class="string">&#x27;D&#x27;</span>: [<span class="string">&#x27;D0&#x27;</span>, <span class="string">&#x27;D1&#x27;</span>, <span class="string">&#x27;D2&#x27;</span>, <span class="string">&#x27;D3&#x27;</span>]&#125;, index = [<span class="string">&#x27;K0&#x27;</span>, <span class="string">&#x27;K1&#x27;</span>, <span class="string">&#x27;K3&#x27;</span>,<span class="string">&#x27;K5&#x27;</span>])</span><br><span class="line">print(left, right, sep = <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># left_index and right_index</span></span><br><span class="line">res1 = pd.merge(left, right, left_index = <span class="literal">True</span>, right_index = <span class="literal">True</span>, how = <span class="string">&#x27;inner&#x27;</span>) <span class="comment"># based on left_index = right_index</span></span><br><span class="line">res2 = pd.merge(left, right, left_index = <span class="literal">True</span>, right_index = <span class="literal">True</span>, how = <span class="string">&#x27;outer&#x27;</span>) <span class="comment"># fill the blank with NaN</span></span><br></pre></td></tr></table></figure>
<ul>
<li>suffixes para</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">boys = pd.DataFrame(&#123;<span class="string">&#x27;K&#x27;</span>: [<span class="string">&#x27;K0&#x27;</span>, <span class="string">&#x27;K1&#x27;</span>, <span class="string">&#x27;K2&#x27;</span>,<span class="string">&#x27;K4&#x27;</span>],<span class="string">&#x27;age&#x27;</span>: [<span class="number">11</span>, <span class="number">23</span>, <span class="number">32</span>, <span class="number">12</span>]&#125;)</span><br><span class="line">girls = pd.DataFrame(&#123;<span class="string">&#x27;K&#x27;</span>: [<span class="string">&#x27;K0&#x27;</span>, <span class="string">&#x27;K1&#x27;</span>, <span class="string">&#x27;K2&#x27;</span>,<span class="string">&#x27;K4&#x27;</span>],<span class="string">&#x27;age&#x27;</span>: [<span class="number">14</span>, <span class="number">43</span>, <span class="number">12</span>, <span class="number">22</span>]&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># suffixex means the named methods of same positional column</span></span><br><span class="line">res = pd.merge(boys, girls, on = <span class="string">&#x27;K&#x27;</span>, suffixes = [<span class="string">&#x27;_boys&#x27;</span>, <span class="string">&#x27;_girls&#x27;</span>], how = <span class="string">&#x27;inner&#x27;</span>)</span><br><span class="line">print(res) <span class="comment">#  age_boys  age_girls</span></span><br></pre></td></tr></table></figure>
<h1 id="matplotlib">7 matplotlib</h1>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">data1 = pd.Series(np.random.randn(<span class="number">1000</span>), index = np.arange(<span class="number">1000</span>))</span><br><span class="line">data2 = pd.DataFrame(np.random.randn(<span class="number">1000</span>, <span class="number">4</span>), index = np.arange(<span class="number">1000</span>), columns = <span class="built_in">list</span>(<span class="string">&#x27;ABCD&#x27;</span>))</span><br><span class="line"><span class="comment"># print(data1, data2, sep = &#x27;\n&#x27;)</span></span><br><span class="line">data1 = data1.cumsum()</span><br><span class="line">data2 = data2.cumsum()</span><br><span class="line"><span class="comment"># print(data)</span></span><br><span class="line">data1.plot()</span><br><span class="line">data2.plot()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<ul>
<li><p>plot methods</p>
<p>bar, hist, box, kde, area, scatter, hexbin, pie</p></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">data = pd.DataFrame(np.random.randn(<span class="number">1000</span>, <span class="number">4</span>), index = np.arange(<span class="number">1000</span>), columns = <span class="built_in">list</span>(<span class="string">&#x27;ABCD&#x27;</span>))</span><br><span class="line"></span><br><span class="line">data = data.cumsum()</span><br><span class="line"></span><br><span class="line">ax = data.plot.scatter(x = <span class="string">&#x27;A&#x27;</span>, y = <span class="string">&#x27;B&#x27;</span>,color = <span class="string">&#x27;DarkBlue&#x27;</span>, label = <span class="string">&#x27;Class1&#x27;</span>)</span><br><span class="line">data.plot.scatter(x = <span class="string">&#x27;A&#x27;</span>, y = <span class="string">&#x27;C&#x27;</span>,color = <span class="string">&#x27;DarkGreen&#x27;</span>,label = <span class="string">&#x27;Class2&#x27;</span>,ax = ax)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<p>Result:</p>
<p><img src="https://s3.ax1x.com/2020/11/25/Damd81.png" /></p>
<center>
fig. 2 scatter figure
</center>
]]></content>
      <categories>
        <category>Notes</category>
        <category>Python module</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Data analysis</tag>
        <tag>Pandas</tag>
      </tags>
  </entry>
  <entry>
    <title>Scikit-learn</title>
    <url>/2020/11/22/Scikit-learn/</url>
    <content><![CDATA[<h1 id="installing-scikit-learn">1 Installing scikit-learn</h1>
<ul>
<li><p>Windows</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip install -U scikit-learn</span><br></pre></td></tr></table></figure></li>
<li><p>macOS</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip install -U scikit-learn</span><br></pre></td></tr></table></figure></li>
<li><p>Linux</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip3 install -U scikit-learn</span><br></pre></td></tr></table></figure></li>
</ul>
<p>Check installation:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip show scikit-learn</span><br></pre></td></tr></table></figure>
<p>See more about scikit-learn via clicking <a href="https://scikit-learn.org/stable/index.html#">here</a>.</p>
<a id="more"></a>
<h1 id="general-study-mode">2 General study mode</h1>
<p>Steps:</p>
<ol type="1">
<li>Load datas</li>
<li>Split datas into two part: train and test part</li>
<li>Training model</li>
<li>Testing and evaluating model</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># instance for iris</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np </span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> datasets</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"><span class="keyword">from</span> sklearn.neighbors <span class="keyword">import</span> KNeighborsClassifier</span><br><span class="line"></span><br><span class="line">iris = datasets.load_iris()</span><br><span class="line">iris_x = iris.data <span class="comment"># features</span></span><br><span class="line">iris_y = iris.target <span class="comment"># types</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># print(iris_X[:2, :])</span></span><br><span class="line">x_train, x_test, y_train, y_test = train_test_split(iris_x, iris_y, test_size = <span class="number">0.3</span>) <span class="comment"># split original data into train and test part</span></span><br><span class="line"><span class="comment"># the percentage of test sets is 30%</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># print(y_train) # 会打乱原始数据</span></span><br><span class="line">knn = KNeighborsClassifier() <span class="comment"># Classifier</span></span><br><span class="line">knn.fit(x_train, y_train) <span class="comment"># Train</span></span><br><span class="line">print(knn.predict(x_test)) <span class="comment"># Use trained model to predict</span></span><br><span class="line">print(y_test)</span><br></pre></td></tr></table></figure>
<p>Result:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[<span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">2</span> <span class="number">2</span> <span class="number">0</span> <span class="number">0</span> <span class="number">2</span> <span class="number">1</span> <span class="number">0</span> <span class="number">2</span> <span class="number">0</span> <span class="number">0</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">2</span> <span class="number">1</span> <span class="number">0</span> <span class="number">2</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">1</span> <span class="number">2</span> <span class="number">0</span> <span class="number">2</span> <span class="number">2</span>]</span><br><span class="line">[<span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">2</span> <span class="number">2</span> <span class="number">0</span> <span class="number">0</span> <span class="number">2</span> <span class="number">1</span> <span class="number">0</span> <span class="number">2</span> <span class="number">0</span> <span class="number">0</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">2</span> <span class="number">1</span> <span class="number">0</span> <span class="number">2</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">1</span> <span class="number">2</span> <span class="number">0</span> <span class="number">2</span> <span class="number">2</span>]</span><br></pre></td></tr></table></figure>
<h1 id="sklearn.datasets">3 Sklearn.datasets</h1>
<h2 id="generate-regressiong-datas">3.1 Generate regressiong datas</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># instance for making datasets</span></span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> datasets</span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LinearRegression</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">X, y = datasets.make_regression(n_samples = <span class="number">100</span>, </span><br><span class="line">                n_features = <span class="number">1</span>, n_targets = <span class="number">1</span>, noise = <span class="number">2</span>)</span><br><span class="line"><span class="comment"># X, y = datasets.make_regression(n_samples = 100, </span></span><br><span class="line"><span class="comment">#                 n_features = 1, n_targets = 1, noise = 10)</span></span><br><span class="line"></span><br><span class="line">plt.scatter(X, y)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<p>Result:<img src="https://s3.ax1x.com/2020/11/25/DUaqr4.png" /></p>
<center>
fig. 3-1 Synthetic data
</center>
<h2 id="load-datasets-of-linear-regression">3.2 Load datasets of Linear Regression</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># instance for loading boston datasets</span></span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> datasets</span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LinearRegression</span><br><span class="line"></span><br><span class="line"><span class="comment"># LinearRegression example</span></span><br><span class="line">loaded_data = datasets.load_boston()</span><br><span class="line"><span class="comment"># X, y = datasets_loadboston(retern_X_y = true)</span></span><br><span class="line">data_X, data_y = loaded_data.data, loaded_data.target</span><br><span class="line"></span><br><span class="line">model = LinearRegression()</span><br><span class="line">model.fit(data_X, data_y)</span><br><span class="line"></span><br><span class="line">print(data_y[:<span class="number">4</span>])</span><br><span class="line">print(model.predict(data_X[:<span class="number">4</span>, :]))</span><br></pre></td></tr></table></figure>
<p>Result:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[<span class="number">24.</span>  <span class="number">21.6</span> <span class="number">34.7</span> <span class="number">33.4</span>]</span><br><span class="line">[<span class="number">30.00384338</span> <span class="number">25.02556238</span> <span class="number">30.56759672</span> <span class="number">28.60703649</span>]</span><br></pre></td></tr></table></figure>
<h2 id="normalization">3.3 Normalization</h2>
<ul>
<li><p>Demo</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> preprocessing</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"><span class="comment"># cross_validation 更新为 model_selection</span></span><br><span class="line"><span class="keyword">from</span> sklearn.datasets.samples_generator <span class="keyword">import</span> make_classification</span><br><span class="line"><span class="keyword">from</span> sklearn.svm <span class="keyword">import</span> SVC</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"> a = np.array([[<span class="number">10</span>, <span class="number">2.7</span>, <span class="number">3.6</span>],</span><br><span class="line">               [-<span class="number">100</span>, <span class="number">5</span>, <span class="number">2</span>],</span><br><span class="line">               [<span class="number">120</span>, <span class="number">20</span>, <span class="number">40</span>]], dtype = np.float64)</span><br><span class="line"></span><br><span class="line">print(a)</span><br><span class="line">print(preprocessing.scale(a)) <span class="comment"># normalization</span></span><br></pre></td></tr></table></figure>
<p>Result:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[[  <span class="number">10.</span>     <span class="number">2.7</span>    <span class="number">3.6</span>]</span><br><span class="line"> [-<span class="number">100.</span>     <span class="number">5.</span>     <span class="number">2.</span> ]</span><br><span class="line"> [ <span class="number">120.</span>    <span class="number">20.</span>    <span class="number">40.</span> ]]</span><br><span class="line">[[ <span class="number">0.</span>         -<span class="number">0.85170713</span> -<span class="number">0.66102858</span>]</span><br><span class="line"> [-<span class="number">1.22474487</span> -<span class="number">0.55187146</span> -<span class="number">0.75220493</span>]</span><br><span class="line"> [ <span class="number">1.22474487</span>  <span class="number">1.40357859</span>  <span class="number">1.41323351</span>]]</span><br></pre></td></tr></table></figure></li>
<li><p>Comparison of accuracy before and after normalization</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> preprocessing</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"><span class="comment"># cross_validation 更新为 model_selection</span></span><br><span class="line"><span class="keyword">from</span> sklearn.datasets.samples_generator <span class="keyword">import</span> make_classification</span><br><span class="line"><span class="keyword">from</span> sklearn.svm <span class="keyword">import</span> SVC</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">X, y = make_classification(n_samples = <span class="number">300</span>, n_features = <span class="number">2</span>, n_redundant = <span class="number">0</span>,n_informative = <span class="number">2</span>, random_state = <span class="number">22</span>, n_clusters_per_class = <span class="number">1</span>, scale = <span class="number">100</span>)</span><br><span class="line"><span class="comment"># random_state: 固定随机数</span></span><br><span class="line"></span><br><span class="line">plt.scatter(X[:, <span class="number">0</span>], X[:, <span class="number">1</span>], c = y)</span><br><span class="line">plt.title(<span class="string">&#x27;Classification samples&#x27;</span>)</span><br><span class="line">plt.show() <span class="comment"># </span></span><br></pre></td></tr></table></figure>
<p>Plot the generated samples:<img src="https://s3.ax1x.com/2020/11/25/DUajaR.png" /></p>
<center>
<p>fig. 3-2 Samples</p>
</center>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">X_train, X_test, y_train, y_test = train_test_split(X, y ,test_size = <span class="number">.3</span>)</span><br><span class="line">clf = SVC()</span><br><span class="line">clf.fit(X_train, y_train)</span><br><span class="line">print(clf.score(X_test, y_test))</span><br><span class="line"></span><br><span class="line">X = preprocessing.scale(X) <span class="comment"># normalization</span></span><br><span class="line">X_train, X_test, y_train, y_test = train_test_split(X, y ,test_size = <span class="number">.3</span>)</span><br><span class="line">clf = SVC()</span><br><span class="line">clf.fit(X_train, y_train)</span><br><span class="line">print(clf.score(X_test, y_test))</span><br></pre></td></tr></table></figure>
<p>Result:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">0.9111111111111111</span></span><br><span class="line"><span class="number">0.9555555555555556</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="model-features-and-attributes">4 Model features and attributes</h1>
<h2 id="basic-parameters">4.1 Basic parameters</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> datasets</span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LinearRegression</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment"># LinearRegression example</span></span><br><span class="line">loaded_data = datasets.load_boston()</span><br><span class="line"><span class="comment"># X, y = datasets_loadboston(retern_X_y = true)</span></span><br><span class="line">data_X, data_y = loaded_data.data, loaded_data.target</span><br><span class="line"></span><br><span class="line">model = LinearRegression()</span><br><span class="line">model.fit(data_X, data_y)</span><br><span class="line"></span><br><span class="line">print(data_y[:<span class="number">4</span>])</span><br><span class="line">print(model.predict(data_X[:<span class="number">4</span>, :]))</span><br><span class="line"></span><br><span class="line">print(model.coef_) <span class="comment"># 系数</span></span><br><span class="line">print(model.intercept_) <span class="comment"># 截距</span></span><br><span class="line">print(model.get_params) <span class="comment"># 参数</span></span><br><span class="line">print(model.score(data_X, data_y)) <span class="comment"># default is R^2 coefficietn of determination</span></span><br></pre></td></tr></table></figure>
<p>Result:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[24.  21.6 34.7 33.4]</span><br><span class="line">[30.00384338 25.02556238 30.56759672 28.60703649]</span><br><span class="line">[-1.08011358e-01  4.64204584e-02  2.05586264e-02  2.68673382e+00</span><br><span class="line"> -1.77666112e+01  3.80986521e+00  6.92224640e-04 -1.47556685e+00</span><br><span class="line">  3.06049479e-01 -1.23345939e-02 -9.52747232e-01  9.31168327e-03</span><br><span class="line"> -5.24758378e-01]</span><br><span class="line">36.459488385089855</span><br><span class="line">&lt;bound method BaseEstimator.get_params of LinearRegression()&gt;</span><br><span class="line">0.7406426641094095</span><br></pre></td></tr></table></figure>
<h2 id="cross-validation">4.2 Cross validation</h2>
<ul>
<li><p>Evaluate the NN</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> load_iris</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"><span class="keyword">from</span> sklearn.neighbors <span class="keyword">import</span> KNeighborsClassifier</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> cross_val_score</span><br><span class="line"></span><br><span class="line">iris = load_iris()</span><br><span class="line">X = iris.data</span><br><span class="line">y = iris.target</span><br><span class="line"></span><br><span class="line">X_train, X_test, y_train, y_test = train_test_split(X, y, random_state = <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">knn = KNeighborsClassifier(n_neighbors = <span class="number">5</span>)</span><br><span class="line"><span class="comment"># knn.fit(X_train, y_train)</span></span><br><span class="line"><span class="comment"># print(knn.score(X_test, y_test))</span></span><br><span class="line">scores = cross_val_score(knn, X, y, cv = <span class="number">5</span>, scoring = <span class="string">&#x27;accuracy&#x27;</span>) <span class="comment"># 将test进行5次划分</span></span><br><span class="line">print(scores.mean()) <span class="comment"># 取平均值</span></span><br></pre></td></tr></table></figure>
<p>Result:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">0.9733333333333334</span></span><br></pre></td></tr></table></figure></li>
<li><p>Cross validation</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span>  learning_curve</span><br><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> load_digits</span><br><span class="line"><span class="keyword">from</span> sklearn.svm <span class="keyword">import</span> SVC</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">digits = load_digits()</span><br><span class="line">X = digits.data</span><br><span class="line">y = digits.target</span><br><span class="line">train_sizes, train_loss, test_loss= learning_curve( SVC(gamma=<span class="number">0.01</span>), X, y, cv=<span class="number">10</span>, scoring=<span class="string">&#x27;neg_mean_squared_error&#x27;</span>, train_sizes=[<span class="number">0.1</span>, <span class="number">0.25</span>, <span class="number">0.5</span>, <span class="number">0.75</span>, <span class="number">1</span>])</span><br><span class="line"><span class="comment"># &#x27;neg_mean_squared_error&#x27; 非 &#x27;mean_squared_error&#x27;</span></span><br><span class="line"></span><br><span class="line">train_loss_mean = -np.mean(train_loss, axis=<span class="number">1</span>)</span><br><span class="line">test_loss_mean = -np.mean(test_loss, axis=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">plt.plot(train_sizes, train_loss_mean, <span class="string">&#x27;o-&#x27;</span>, color=<span class="string">&quot;r&quot;</span>,</span><br><span class="line">             label=<span class="string">&quot;Training&quot;</span>)</span><br><span class="line">plt.plot(train_sizes, test_loss_mean, <span class="string">&#x27;o-&#x27;</span>, color=<span class="string">&quot;g&quot;</span>,</span><br><span class="line">             label=<span class="string">&quot;Cross-validation&quot;</span>)</span><br><span class="line"></span><br><span class="line">plt.xlabel(<span class="string">&quot;Training examples&quot;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&quot;Loss&quot;</span>)</span><br><span class="line">plt.legend(loc=<span class="string">&quot;best&quot;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<p>Result:</p>
<p><img src="https://s3.ax1x.com/2020/11/25/DUabMF.md.png" /></p>
<center>
<p>fig 4-1 Vross-validation</p>
</center></li>
<li><p>Adjustment parameter-1</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function</span><br><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> load_iris</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"><span class="keyword">from</span> sklearn.neighbors <span class="keyword">import</span> KNeighborsClassifier</span><br><span class="line"></span><br><span class="line">iris = load_iris()</span><br><span class="line">X = iris.data</span><br><span class="line">y = iris.target</span><br><span class="line"></span><br><span class="line"><span class="comment"># test train split #</span></span><br><span class="line">X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=<span class="number">4</span>)</span><br><span class="line">knn = KNeighborsClassifier(n_neighbors=<span class="number">5</span>)</span><br><span class="line">knn.fit(X_train, y_train)</span><br><span class="line">y_pred = knn.predict(X_test)</span><br><span class="line">print(knn.score(X_test, y_test))</span><br><span class="line"></span><br><span class="line"><span class="comment"># this is how to use cross_val_score to choose model and configs #</span></span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> cross_val_score</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">k_range = <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">31</span>)</span><br><span class="line">k_scores = []</span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> k_range:</span><br><span class="line">    knn = KNeighborsClassifier(n_neighbors=k)</span><br><span class="line"><span class="comment">##    loss = -cross_val_score(knn, X, y, cv=10, scoring=&#x27;mean_squared_error&#x27;) # for regression</span></span><br><span class="line">    scores = cross_val_score(knn, X, y, cv=<span class="number">10</span>, scoring=<span class="string">&#x27;accuracy&#x27;</span>) <span class="comment"># for classification</span></span><br><span class="line">    k_scores.append(scores.mean())</span><br><span class="line"></span><br><span class="line">plt.plot(k_range, k_scores)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;Value of K for KNN&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;Cross-Validated Accuracy&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<p>Result:</p>
<p><img src="https://s3.ax1x.com/2020/11/25/DUaXZ9.png" /></p>
<center>
<p>fig. 4-2 Adjustment parameters</p>
</center></li>
<li><p>Adjustment parameter-2</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> validation_curve</span><br><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> load_digits</span><br><span class="line"><span class="keyword">from</span> sklearn.svm <span class="keyword">import</span> SVC</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">digits = load_digits()</span><br><span class="line">X = digits.data</span><br><span class="line">y = digits.target</span><br><span class="line">param_range = np.logspace(-<span class="number">6</span>, -<span class="number">2.3</span>, <span class="number">5</span>)</span><br><span class="line">train_loss, test_loss = validation_curve(</span><br><span class="line">        SVC(), X, y, param_name=<span class="string">&#x27;gamma&#x27;</span>, param_range=param_range, cv=<span class="number">10</span>,</span><br><span class="line">        scoring= <span class="string">&#x27;neg_mean_squared_error&#x27;</span>)</span><br><span class="line">train_loss_mean = -np.mean(train_loss, axis=<span class="number">1</span>)</span><br><span class="line">test_loss_mean = -np.mean(test_loss, axis=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">plt.plot(param_range, train_loss_mean, <span class="string">&#x27;o-&#x27;</span>, color=<span class="string">&quot;r&quot;</span>,</span><br><span class="line">             label=<span class="string">&quot;Training&quot;</span>)</span><br><span class="line">plt.plot(param_range, test_loss_mean, <span class="string">&#x27;o-&#x27;</span>, color=<span class="string">&quot;g&quot;</span>,</span><br><span class="line">             label=<span class="string">&quot;Cross-validation&quot;</span>)</span><br><span class="line"></span><br><span class="line">plt.xlabel(<span class="string">&quot;gamma&quot;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&quot;Loss&quot;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;Overfitting problem&#x27;</span>)</span><br><span class="line">plt.legend(loc=<span class="string">&quot;best&quot;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<p>Result:</p>
<p><img src="https://s3.ax1x.com/2020/11/25/DUaLqJ.png" /></p>
<center>
<p>fig 4-3 Adjustment parameters</p>
</center></li>
</ul>
<h2 id="transform-target-in-regression-model">4.3 Transform target in regression model</h2>
<p>将原始数据转化为分类模式，可以有效地提高预测的精度，效果如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(__doc__)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> make_regression</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> RidgeCV</span><br><span class="line"><span class="keyword">from</span> sklearn.compose <span class="keyword">import</span> TransformedTargetRegressor</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> median_absolute_error, r2_score</span><br><span class="line"><span class="keyword">from</span> sklearn.utils.fixes <span class="keyword">import</span> parse_version</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> parse_version(matplotlib.__version__) &gt;= parse_version(<span class="string">&#x27;2.1&#x27;</span>):</span><br><span class="line">    desity_param = &#123;<span class="string">&#x27;density&#x27;</span>: <span class="literal">True</span>&#125;</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    density_param = &#123;<span class="string">&#x27;normed&#x27;</span>: <span class="literal">True</span>&#125;</span><br><span class="line">    </span><br><span class="line">X, y = make_regression(n_samples = <span class="number">10000</span>, noise = <span class="number">100</span>, random_state = <span class="number">0</span>)</span><br><span class="line">y = np.exp((y + <span class="built_in">abs</span>(y.<span class="built_in">min</span>()))/<span class="number">200</span>)</span><br><span class="line">y_trans = np.log1p(y)</span><br><span class="line"></span><br><span class="line">f, (ax0, ax1) = plt.subplots(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># density: normalization</span></span><br><span class="line">ax0.hist(y, bins = <span class="number">100</span>, density = <span class="literal">True</span>)</span><br><span class="line">ax0.set_xlim([<span class="number">0</span>, <span class="number">2000</span>])</span><br><span class="line">ax0.set_ylabel(<span class="string">&#x27;Probability&#x27;</span>)</span><br><span class="line">ax0.set_xlabel(<span class="string">&#x27;Target&#x27;</span>)</span><br><span class="line">ax0.set_title(<span class="string">&#x27;Target distribution&#x27;</span>)</span><br><span class="line"></span><br><span class="line">ax1.hist(y_trans, bins = <span class="number">100</span>, density = <span class="literal">True</span>)</span><br><span class="line">ax1.set_ylabel(<span class="string">&#x27;Probability&#x27;</span>)</span><br><span class="line">ax1.set_xlabel(<span class="string">&#x27;Target&#x27;</span>)</span><br><span class="line">ax1.set_title(<span class="string">&#x27;Transformed target distribution&#x27;</span>)</span><br><span class="line"></span><br><span class="line">f.suptitle(<span class="string">&#x27;Synthetic data&#x27;</span>, y = <span class="number">0.035</span>)</span><br><span class="line">f.tight_layout(rect = [<span class="number">0.05</span>, <span class="number">0.05</span>, <span class="number">0.95</span>, <span class="number">0.95</span>])</span><br><span class="line"></span><br><span class="line">X_train, X_test, y_train, y_test = train_test_split(X, y, random_state = <span class="number">0</span>)</span><br></pre></td></tr></table></figure>
<p>Result:</p>
<p><img src="https://s3.ax1x.com/2020/11/25/DUavI1.png" /></p>
<center>
fig.4-4 Comparison of Transformation
</center>
<p>然后，再来测试其对预测精度的影响：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">f, (ax0, ax1) = plt.subplots(<span class="number">1</span>, <span class="number">2</span>, sharey=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">regr = RidgeCV()</span><br><span class="line">regr.fit(X_train, y_train)</span><br><span class="line">y_pred = regr.predict(X_test)</span><br><span class="line"></span><br><span class="line">ax0.scatter(y_test, y_pred)</span><br><span class="line">ax0.plot([<span class="number">0</span>, <span class="number">2000</span>], [<span class="number">0</span>, <span class="number">2000</span>], <span class="string">&#x27;--k&#x27;</span>)</span><br><span class="line">ax0.set_ylabel(<span class="string">&#x27;Target predicted&#x27;</span>)</span><br><span class="line">ax0.set_xlabel(<span class="string">&#x27;True Target&#x27;</span>)</span><br><span class="line">ax0.set_title(<span class="string">&#x27;Ridge regression \n without target transformation&#x27;</span>)</span><br><span class="line">ax0.text(<span class="number">100</span>, <span class="number">1750</span>, <span class="string">r&#x27;$R^2$=%.2f, MAE=%.2f&#x27;</span> % (</span><br><span class="line">    r2_score(y_test, y_pred), median_absolute_error(y_test, y_pred)))</span><br><span class="line">ax0.set_xlim([<span class="number">0</span>, <span class="number">2000</span>])</span><br><span class="line">ax0.set_ylim([<span class="number">0</span>, <span class="number">2000</span>])</span><br><span class="line"></span><br><span class="line">regr_trans = TransformedTargetRegressor(regressor=RidgeCV(), func=np.log1p,inverse_func=np.expm1)</span><br><span class="line"></span><br><span class="line">regr_trans.fit(X_train, y_train)</span><br><span class="line">y_pred = regr_trans.predict(X_test)</span><br><span class="line"></span><br><span class="line">ax1.scatter(y_test, y_pred)</span><br><span class="line">ax1.plot([<span class="number">0</span>, <span class="number">2000</span>], [<span class="number">0</span>, <span class="number">2000</span>], <span class="string">&#x27;--k&#x27;</span>)</span><br><span class="line">ax1.set_ylabel(<span class="string">&#x27;Target predicted&#x27;</span>)</span><br><span class="line">ax1.set_xlabel(<span class="string">&#x27;True Target&#x27;</span>)</span><br><span class="line">ax1.set_title(<span class="string">&#x27;Ridge regression \n with target transformation&#x27;</span>)</span><br><span class="line">ax1.text(<span class="number">100</span>, <span class="number">1750</span>, <span class="string">r&#x27;$R^2$=%.2f, MAE=%.2f&#x27;</span> % (</span><br><span class="line">    r2_score(y_test, y_pred), median_absolute_error(y_test, y_pred)))</span><br><span class="line">ax1.set_xlim([<span class="number">0</span>, <span class="number">2000</span>])</span><br><span class="line">ax1.set_ylim([<span class="number">0</span>, <span class="number">2000</span>])</span><br><span class="line"></span><br><span class="line">f.suptitle(<span class="string">&quot;Synthetic data&quot;</span>, y=<span class="number">0.035</span>)</span><br><span class="line">f.tight_layout(rect=[<span class="number">0.05</span>, <span class="number">0.05</span>, <span class="number">0.95</span>, <span class="number">0.95</span>])</span><br></pre></td></tr></table></figure>
<p><img src="https://s3.ax1x.com/2020/11/25/DUazPx.png" /></p>
<center>
fig. 4-5 Comparison before and after transforming
</center>
<p>从结果可以看出，经过预处理转化后的数据集能有效地提高预测的精度，降低 <code>MAE</code> 的值。</p>
<h1 id="save-model">5 Save model</h1>
<p>Train model</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> svm</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> datasets</span><br><span class="line"></span><br><span class="line">clf = svm.SVC()</span><br><span class="line">iris = datasets.load_iris()</span><br><span class="line">X, y = iris.data, iris.target</span><br><span class="line">clf.fit(X, y)</span><br></pre></td></tr></table></figure>
<p>Then, we can use two methods to save our trained models:</p>
<ol type="1">
<li><p>pickle</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="comment"># Save</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;save/clf.pickle&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    pickle.dump(clf, f)</span><br><span class="line"><span class="comment"># Restore</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;save/clf.pickle&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">	clf2 = pickle.load(f)</span><br><span class="line">print(clf2.predict(X[<span class="number">0</span>:<span class="number">1</span>]))</span><br></pre></td></tr></table></figure></li>
<li><p>joblib</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> joblib</span><br><span class="line"><span class="comment"># Save</span></span><br><span class="line">joblib.dump(clf, <span class="string">&#x27;./save/clf.pkl&#x27;</span>)</span><br><span class="line"><span class="comment"># restore</span></span><br><span class="line">clf3 = joblib.load(<span class="string">&#x27;save/clf.pkl&#x27;</span>)</span><br><span class="line">print(clf3.predict(X[<span class="number">0</span>:<span class="number">1</span>]))</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>Notes</category>
        <category>Python module</category>
        <category>Machine learning</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Deep learning</tag>
      </tags>
  </entry>
  <entry>
    <title>Matplotlib</title>
    <url>/2020/11/30/Matplotlib/</url>
    <content><![CDATA[<h1 id="introduction">1 Introduction</h1>
<ul>
<li>中文显示乱码问题</li>
</ul>
<p>Matplotlib 库缺少中文字体，因此在图标上显示中文会出现乱码，解决办法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pyplt <span class="keyword">import</span> mpl</span><br><span class="line">mpl.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = [<span class="string">&#x27;SimHei&#x27;</span>]</span><br><span class="line">mpl.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 或</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = [<span class="string">&#x27;SimHei&#x27;</span>]</span><br><span class="line">plt.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="literal">False</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h1 id="steps">2 Steps</h1>
<ul>
<li>import module and set font style to avoid messy code</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>]=[<span class="string">&#x27;SimHei&#x27;</span>]</span><br><span class="line">plt.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>]=<span class="literal">False</span></span><br></pre></td></tr></table></figure>
<ul>
<li>step one: create figure and fix size (inch)</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plt.figure(figsize = (<span class="number">12</span>, <span class="number">8</span>)) <span class="comment"># length x width</span></span><br></pre></td></tr></table></figure>
<ul>
<li>setp two: generate data</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">start_val = <span class="number">0</span> <span class="comment"># start value</span></span><br><span class="line">stop_val = <span class="number">10</span> <span class="comment"># end value</span></span><br><span class="line">num_val = <span class="number">1000</span> <span class="comment"># samples number</span></span><br><span class="line">x = np.linspace(start_val, stop_val, num_val)</span><br><span class="line">y = np.sin(x)</span><br><span class="line">plt.plot(x, y, <span class="string">&#x27;--g,&#x27;</span>, lw = <span class="number">2</span>, label = <span class="string">&#x27;$sin(x)$&#x27;</span>)</span><br></pre></td></tr></table></figure>
<ul>
<li>step three: adjust axis and set label</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 调整坐标范围</span></span><br><span class="line">x_min, y_max = <span class="number">0</span>, <span class="number">10</span></span><br><span class="line">y_min, y_max = <span class="number">0</span>, <span class="number">1.5</span></span><br><span class="line">plt.xlim(x_min, x_max)</span><br><span class="line">plt.ylim(y_min, y_max)</span><br><span class="line"></span><br><span class="line"><span class="comment"># set axis label</span></span><br><span class="line">plt.xlabel(<span class="string">&#x27;x轴&#x27;</span>, fontsize = <span class="number">15</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;y轴&#x27;</span>, fontsize = <span class="number">15</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ticks: 刻度线</span></span><br><span class="line">x_location = np.arange(<span class="number">0</span>, <span class="number">10</span>, <span class="number">2</span>)</span><br><span class="line">x_labels = [<span class="string">&#x27;2019-01-01&#x27;</span>, <span class="string">&#x27;2019-02-01&#x27;</span>, <span class="string">&#x27;2019-03-01&#x27;</span>, <span class="string">&#x27;2019-04-01&#x27;</span>, <span class="string">&#x27;2019-05-01&#x27;</span>]</span><br><span class="line">y_location = np.arange(-<span class="number">1</span>, <span class="number">1.5</span>, <span class="number">1</span>)</span><br><span class="line">y_labels = [<span class="string">u&#x27;minimum&#x27;</span>, <span class="string">u&#x27;zero&#x27;</span>, <span class="string">u&#x27;maximum&#x27;</span>]</span><br><span class="line">plt.xticks(x_location, x_labels, rotation = <span class="number">45</span>, fontsize = <span class="number">15</span>)</span><br><span class="line">plt.yticks(y_location, y_labels, fontsize = <span class="number">15</span>)</span><br></pre></td></tr></table></figure>
<ul>
<li>step four: set grid and legend</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># grid</span></span><br><span class="line">plt.grid(<span class="literal">True</span>, ls = <span class="string">&#x27;:&#x27;</span>, color = <span class="string">&#x27;r&#x27;</span>, alpha = <span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># title</span></span><br><span class="line">plt.title(<span class="string">&#x27;函数式绘图 vs 对象式绘图&#x27;</span>, fontsize = <span class="number">25</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># legend</span></span><br><span class="line">plt.legend(loc = <span class="string">&#x27;upper right&#x27;</span>, fontsize  = <span class="number">15</span>)</span><br><span class="line">plt.show(</span><br></pre></td></tr></table></figure>
<h2 id="函数式绘图">2.1 函数式绘图</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = [<span class="string">&#x27;SimHei&#x27;</span>]</span><br><span class="line">plt.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># step one: create figure and fix size</span></span><br><span class="line">plt.figure(figsize = (<span class="number">12</span>, <span class="number">6</span>)) <span class="comment"># length x width</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># step two: generate data</span></span><br><span class="line">start_val = <span class="number">0</span> <span class="comment"># start value</span></span><br><span class="line">stop_val = <span class="number">10</span> <span class="comment"># end value</span></span><br><span class="line">num_val = <span class="number">1000</span> <span class="comment"># samples number</span></span><br><span class="line">x = np.linspace(start_val, stop_val, num_val)</span><br><span class="line">y = np.sin(x)</span><br><span class="line">plt.plot(x, y, <span class="string">&#x27;--g,&#x27;</span>, lw = <span class="number">2</span>, label = <span class="string">&#x27;$sin(x)$&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># step three: adjust axis</span></span><br><span class="line">x_min = <span class="number">0</span></span><br><span class="line">x_max = <span class="number">10</span></span><br><span class="line">y_min = <span class="number">0</span></span><br><span class="line">y_max = <span class="number">1.5</span></span><br><span class="line">plt.xlim(x_min, x_max)</span><br><span class="line">plt.ylim(y_min, y_max)</span><br><span class="line"></span><br><span class="line"><span class="comment"># step four: set axis label</span></span><br><span class="line">plt.xlabel(<span class="string">&#x27;x轴&#x27;</span>, fontsize = <span class="number">15</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;y轴&#x27;</span>, fontsize = <span class="number">15</span>)</span><br><span class="line"></span><br><span class="line">x_location = np.arange(<span class="number">0</span>, <span class="number">10</span>, <span class="number">2</span>)</span><br><span class="line">x_labels = [<span class="string">&#x27;2019-01-01&#x27;</span>, <span class="string">&#x27;2019-02-01&#x27;</span>, <span class="string">&#x27;2019-03-01&#x27;</span>, <span class="string">&#x27;2019-04-01&#x27;</span>, <span class="string">&#x27;2019-05-01&#x27;</span>]</span><br><span class="line">y_location = np.arange(-<span class="number">1</span>, <span class="number">1.5</span>, <span class="number">1</span>)</span><br><span class="line">y_labels = [<span class="string">u&#x27;minimum&#x27;</span>, <span class="string">u&#x27;zero&#x27;</span>, <span class="string">u&#x27;maximum&#x27;</span>]</span><br><span class="line">plt.xticks(x_location, x_labels, rotation = <span class="number">45</span>, fontsize = <span class="number">15</span>)</span><br><span class="line">plt.yticks(y_location, y_labels, fontsize = <span class="number">15</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># step five: set grid</span></span><br><span class="line"><span class="comment"># ls: linestyle</span></span><br><span class="line">plt.grid(<span class="literal">True</span>, ls = <span class="string">&#x27;:&#x27;</span>, color = <span class="string">&#x27;r&#x27;</span>, alpha = <span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line">plt.title(<span class="string">&#x27;函数式绘图&#x27;</span>, fontsize = <span class="number">25</span>)</span><br><span class="line">plt.legend(loc = <span class="string">&#x27;upper right&#x27;</span>, fontsize  = <span class="number">15</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<p>result:<img src="https://s3.ax1x.com/2020/11/30/DgWKVf.md.png" /></p>
<center>
fig 2-1 函数式绘图
</center>
<h2 id="对象式绘图">2.2 对象式绘图</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt </span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = [<span class="string">&#x27;SimHei&#x27;</span>]</span><br><span class="line">plt.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 对象式绘图</span></span><br><span class="line"><span class="comment"># pyplot 模块中的 figure() 函数创建名为 fig 的 Figure 对象</span></span><br><span class="line">fig = plt.figure(figsize = (<span class="number">12</span>, <span class="number">8</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在 Figure 对象中创建一个 Axes 对象，每个 Axes 对象即为一个绘图区域</span></span><br><span class="line">ax = fig.add_subplot(<span class="number">111</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># generate data</span></span><br><span class="line">start_val, stop_val, num_val = <span class="number">0</span>, <span class="number">10</span>, <span class="number">1000</span></span><br><span class="line">x = np.linspace(start_val, stop_val, num_val)</span><br><span class="line">y = np.sin(x)</span><br><span class="line"></span><br><span class="line"><span class="comment"># y = sin(x)</span></span><br><span class="line"><span class="comment"># &#x27;--g,&#x27;: format_string, equals with a combination of linestyle, color, market, 即折线、绿色、像素点</span></span><br><span class="line">ax.plot(x, y, <span class="string">&#x27;--g&#x27;</span>, lw = <span class="number">2</span>, label = <span class="string">&#x27;sin(x)&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调整坐标范围</span></span><br><span class="line">x_min, x_max = <span class="number">0</span>, <span class="number">10</span></span><br><span class="line">y_min, y_max = <span class="number">0</span>, <span class="number">1.5</span></span><br><span class="line">ax.set_xlim(x_min, x_max)</span><br><span class="line">ax.set_ylim(y_min, y_max)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置坐标轴标签</span></span><br><span class="line">plt.xlabel(<span class="string">&#x27;x轴&#x27;</span>, fontsize = <span class="number">15</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;y轴&#x27;</span>, fontsize = <span class="number">15</span>)</span><br><span class="line"></span><br><span class="line">x_location = np.arange(<span class="number">0</span>, <span class="number">10</span>, <span class="number">2</span>)</span><br><span class="line">x_labels = [<span class="string">&#x27;2019-01-01&#x27;</span>, <span class="string">&#x27;2019-02-01&#x27;</span>, <span class="string">&#x27;2019-03-01&#x27;</span>, <span class="string">&#x27;2019-04-01&#x27;</span>, <span class="string">&#x27;2019-05-01&#x27;</span>]</span><br><span class="line">y_location = np.arange(-<span class="number">1</span>, <span class="number">1.5</span>, <span class="number">1</span>)</span><br><span class="line">y_labels = [<span class="string">u&#x27;minimum&#x27;</span>, <span class="string">u&#x27;zero&#x27;</span>, <span class="string">u&#x27;maximum&#x27;</span>]</span><br><span class="line">plt.xticks(x_location, x_labels, rotation = <span class="number">45</span>, fontsize = <span class="number">15</span>)</span><br><span class="line">plt.yticks(y_location, y_labels, fontsize = <span class="number">15</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ls: linestyle</span></span><br><span class="line">plt.grid(<span class="literal">True</span>, ls = <span class="string">&#x27;:&#x27;</span>, color = <span class="string">&#x27;r&#x27;</span>, alpha = <span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line">plt.title(<span class="string">&#x27;函数式绘图 vs 对象式绘图&#x27;</span>, fontsize = <span class="number">25</span>)</span><br><span class="line">plt.legend(loc = <span class="string">&#x27;upper right&#x27;</span>, fontsize  = <span class="number">15</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<p>result:<img src="https://s3.ax1x.com/2020/11/30/DgW1Pg.md.png" /></p>
<center>
fig 2-2 对象式绘图
</center>
<h1 id="figure-types">3 Figure types</h1>
<h2 id="line-attributes">3.1 Line attributes</h2>
<p>plot() 函数中，可设置参数以调整线条的属性：</p>
<ul>
<li>linestyle: 设定线条类型</li>
<li>color: 指定线条的颜色</li>
<li>marker: 指定线条的标记风格</li>
<li>linewidth: 设定线条的宽度</li>
<li>label: 设置线条的标签</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">start_val, stop_val, num_val = <span class="number">0</span>, <span class="number">10</span>, <span class="number">1000</span></span><br><span class="line">x = np.linspace(start_val, stop_val, num_val)</span><br><span class="line">y = np.sin(x)</span><br><span class="line"></span><br><span class="line"><span class="comment"># y = sin(x)</span></span><br><span class="line"><span class="comment"># &#x27;--g,&#x27;: format_string, equals with a combination of linestyle, color, market, 即折线、绿色、像素点</span></span><br><span class="line">ax.plot(x, y, <span class="string">&#x27;--g&#x27;</span>, lw = <span class="number">2</span>, label = <span class="string">&#x27;$sin(x)$&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h2 id="标注点的绘制">3.2 标注点的绘制</h2>
<p>当要在图形上给数据添加指向性注释文本时，可以使用 Matplotlib 的 annotate() 函数，支持箭头指示，方便在合适的位置添加描述信息。关键参数如下：</p>
<ul>
<li>s：注释文本内容</li>
<li>xy：备注是的坐标点，二维元组格式 (x, y)</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"> xy : (<span class="built_in">float</span>, <span class="built_in">float</span>)</span><br><span class="line"><span class="comment"># The point *(x,y)* to annotate.</span></span><br></pre></td></tr></table></figure>
<ul>
<li>xytext：注释文本的坐标点，二维元组格式 (x, y)</li>
<li>xycoords：被注释点的坐标系属性，默认为 'data'</li>
<li>textcoords：设置注释文本的坐标系属性，默认与 xycoords 属性值相同，通常设置为 'offset points' or 'offset pixels'， 即相对于被注释点 xy 的偏移量</li>
<li>arrowprops：设置箭头的样式，dict 格式</li>
</ul>
<p>If 'arrowprops' does not contain the key ' arrowstyle', the allowed keys are:</p>
<center>
tab 5-1 arrowstyle key-1
</center>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">Key</th>
<th style="text-align: left;">Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">width</td>
<td style="text-align: left;">The width of the arrow in points</td>
</tr>
<tr class="even">
<td style="text-align: center;">headwidth</td>
<td style="text-align: left;">The width of the base of the arrow head in points</td>
</tr>
<tr class="odd">
<td style="text-align: center;">headlength</td>
<td style="text-align: left;">The length of the arrow head in points</td>
</tr>
<tr class="even">
<td style="text-align: center;">shrink</td>
<td style="text-align: left;">Fraction of total length to shrink from both ends</td>
</tr>
<tr class="odd">
<td style="text-align: center;">?</td>
<td style="text-align: left;">Any key to <code>matplotlib.patches.FancyArrowPatch</code></td>
</tr>
</tbody>
</table>
<p>如果 arrowprops 包含了关键词 ' arrowstyle'， the above keys are forbidden. The allowed values of 'arrowstyle' are:</p>
<center>
tab 5-2 arrowstyle key-2
</center>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">Name</th>
<th style="text-align: center;">Attrs</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;"><code>'-'</code></td>
<td style="text-align: center;">None</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>'-&gt;'</code></td>
<td style="text-align: center;">head_length=0.4,head_width=0.2</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>'-['</code></td>
<td style="text-align: center;">widthB=1.0,lengthB=0.2,angleB=None</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>'|-|'</code></td>
<td style="text-align: center;">widthA=1.0,widthB=1.0</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>'-|&gt;'</code></td>
<td style="text-align: center;">head_length=0.4,head_width=0.2</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>'&lt;-'</code></td>
<td style="text-align: center;">head_length=0.4,head_width=0.2</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>'&lt;-&gt;'</code></td>
<td style="text-align: center;">head_length=0.4,head_width=0.2</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>'&lt;|-'</code></td>
<td style="text-align: center;">head_length=0.4,head_width=0.2</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>'&lt;|-|&gt;'</code></td>
<td style="text-align: center;">head_length=0.4,head_width=0.2</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>'fancy'</code></td>
<td style="text-align: center;">head_length=0.4,head_width=0.4,tail_width=0.4</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>'simple'</code></td>
<td style="text-align: center;">head_length=0.5,head_width=0.5,tail_width=0.2</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>'wedge'</code></td>
<td style="text-align: center;">tail_width=0.3,shrink_factor=0.5</td>
</tr>
</tbody>
</table>
<p>Valid keys for <code>~matplotlib.patches.FancyArrowPatch</code> are:</p>
<center>
tab 5-3 ~matplotlib.patches.FancyArrowPatch
</center>
<table>
<thead>
<tr class="header">
<th>Key</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>arrowstyle</td>
<td>the arrow style</td>
</tr>
<tr class="even">
<td>connectionstyle</td>
<td>the connection style</td>
</tr>
<tr class="odd">
<td>relpos</td>
<td>default is (0.5, 0.5)</td>
</tr>
<tr class="even">
<td>patchA</td>
<td>default is bounding box of the text</td>
</tr>
<tr class="odd">
<td>patchB</td>
<td>default is None</td>
</tr>
<tr class="even">
<td>shrinkA</td>
<td>default is 2 points</td>
</tr>
<tr class="odd">
<td>shrinkB</td>
<td>default is 2 points</td>
</tr>
<tr class="even">
<td>mutation_scale</td>
<td>default is text size (in points)</td>
</tr>
<tr class="odd">
<td>mutation_aspect</td>
<td>default is 1</td>
</tr>
<tr class="even">
<td>?</td>
<td>any key for <code>matplotlib.patches.PathPatch</code></td>
</tr>
</tbody>
</table>
<ul>
<li>bbox：设置文本周围所添加的外框属性</li>
</ul>
<p>Case 1:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># add annotation</span></span><br><span class="line">ax.annotate(<span class="string">u&#x27;The top point&#x27;</span>,</span><br><span class="line">            xy = (np.pi/<span class="number">2</span>, <span class="number">1</span>), <span class="comment"># 箭头指向点的坐标</span></span><br><span class="line">            xytext = (np.pi/<span class="number">2</span>, <span class="number">1.3</span>), <span class="comment"># 注释文本左端的坐标</span></span><br><span class="line">            weight = <span class="string">&#x27;regular&#x27;</span>, <span class="comment"># 注释文本的字体粗细风格，bold：粗体，regular：正常粗细</span></span><br><span class="line">            color = <span class="string">&#x27;g&#x27;</span>, <span class="comment"># 注释文本颜色，green</span></span><br><span class="line">            fontsize = <span class="number">15</span>, <span class="comment"># 注释文本字体大小</span></span><br><span class="line">            arrowprops = &#123; <span class="comment"># arrowprops： arrow properties，以字典格式设置箭头属性</span></span><br><span class="line">                <span class="string">&#x27;arrowstyle&#x27;</span>: <span class="string">&#x27;-&gt;&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;connectionstyle&#x27;</span>: <span class="string">&#x27;arc3&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;color&#x27;</span>:<span class="string">&#x27;g&#x27;</span></span><br><span class="line">                &#125;)</span><br><span class="line"></span><br><span class="line">ax.annotate(<span class="string">u&#x27;The low point&#x27;</span>,</span><br><span class="line">            xy = (np.pi*<span class="number">3</span>/<span class="number">2</span>, -<span class="number">1</span>), </span><br><span class="line">            xytext = (np.pi*<span class="number">3</span>/<span class="number">2</span>, -<span class="number">1.3</span>),</span><br><span class="line">            weight = <span class="string">&#x27;regular&#x27;</span>, </span><br><span class="line">            color = <span class="string">&#x27;r&#x27;</span>, <span class="comment"># red</span></span><br><span class="line">            fontsize = <span class="number">15</span>, </span><br><span class="line">            arrowprops = &#123; </span><br><span class="line">                <span class="string">&#x27;arrowstyle&#x27;</span>: <span class="string">&#x27;-&gt;&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;connectionstyle&#x27;</span>: <span class="string">&#x27;arc3&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;color&#x27;</span>:<span class="string">&#x27;r&#x27;</span></span><br><span class="line">                &#125;)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<p><img src="https://s3.ax1x.com/2020/11/30/DgWeKI.md.png" /></p>
<center>
fig 3-1 Annotation case1
</center>
<p>Case 2：绘制以下四种样式的标注点</p>
<ul>
<li>注释文本 'annotate1' 所对应的样式配置：在 arrowprops 参数中使用关键字 'arrowstyle' 设置 <strong>箭头样式</strong> '-&gt;'，关键字 connectionstyle 设置连接线的样式</li>
<li>注释文本 'annotate2' 所对应的样式配置：在 arrowprops 参数中使用关键字 'arrowstyle' ，允许配置箭头的宽度 width、 箭头两端收缩的百分比 shrink 等</li>
<li>注释文本 'annotate3' 所对应的样式配置：使用 bbox 参数在文本周围添加外框，设置外框为 round 格式</li>
<li>注释文本 'annotate1' 所对应的样式配置：使用 bbox 参数在文本周围添加外框， 设置外框为 round 样式</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = [<span class="string">&#x27;SimHei&#x27;</span>]</span><br><span class="line">plt.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">fig = plt.figure(figsize = (<span class="number">12</span>, <span class="number">8</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在 Figure 对象中创建一个 Axes 对象，每个 Axes 对象即为一个绘图区域</span></span><br><span class="line">ax = fig.add_subplot(<span class="number">111</span>)</span><br><span class="line">x = np.arange(<span class="number">10</span>, <span class="number">20</span>)</span><br><span class="line">y = np.around(np.log(x), <span class="number">2</span>)</span><br><span class="line">ax.plot(x, y, marker = <span class="string">&#x27;o&#x27;</span>)</span><br><span class="line"></span><br><span class="line">ax.annotate(<span class="string">u&#x27;样式1&#x27;</span>, xy = (x[<span class="number">1</span>], y[<span class="number">1</span>]), xytext = (<span class="number">80</span>, <span class="number">10</span>), textcoords = <span class="string">&#x27;offset points&#x27;</span>, </span><br><span class="line">            arrowprops = <span class="built_in">dict</span>(arrowstyle = <span class="string">&#x27;-&gt;&#x27;</span>, connectionstyle = <span class="string">&#x27;angle3, angleA = 80, angleB = 50&#x27;</span>))</span><br><span class="line"></span><br><span class="line">ax.annotate(<span class="string">u&#x27;样式2&#x27;</span>, xy = (x[<span class="number">3</span>], y[<span class="number">3</span>]), xytext = (<span class="number">80</span>, <span class="number">10</span>), textcoords = <span class="string">&#x27;offset points&#x27;</span>, </span><br><span class="line">            arrowprops = <span class="built_in">dict</span>(facecolor = <span class="string">&#x27;black&#x27;</span>, shrink = <span class="number">0.05</span>, width = <span class="number">5</span>))</span><br><span class="line"></span><br><span class="line">ax.annotate(<span class="string">u&#x27;样式3&#x27;</span>, xy = (x[<span class="number">5</span>], y[<span class="number">5</span>]), xytext = (<span class="number">80</span>, <span class="number">10</span>), textcoords = <span class="string">&#x27;offset points&#x27;</span>, </span><br><span class="line">            arrowprops = <span class="built_in">dict</span>(facecolor = <span class="string">&#x27;green&#x27;</span>, headwidth = <span class="number">5</span>, headlength = <span class="number">10</span>),</span><br><span class="line">            bbox = <span class="built_in">dict</span>(boxstyle = <span class="string">&#x27;circle, pad = 0.5&#x27;</span>, fc = <span class="string">&#x27;yellow&#x27;</span>, ec = <span class="string">&#x27;k&#x27;</span>, lw = <span class="number">1</span>, alpha = <span class="number">0.5</span>))</span><br><span class="line"><span class="comment"># fc: facecolor, ec: edegcolor, lw: lineweight</span></span><br><span class="line"></span><br><span class="line">ax.annotate(<span class="string">u&#x27;样式4&#x27;</span>, xy = (x[<span class="number">7</span>], y[<span class="number">7</span>]), xytext = (<span class="number">80</span>, <span class="number">10</span>), textcoords = <span class="string">&#x27;offset points&#x27;</span>, </span><br><span class="line">            arrowprops = <span class="built_in">dict</span>(facecolor = <span class="string">&#x27;blue&#x27;</span>, headwidth = <span class="number">5</span>, headlength = <span class="number">10</span>),</span><br><span class="line">            bbox = <span class="built_in">dict</span>(boxstyle = <span class="string">&#x27;round, pad = 0.5&#x27;</span>, fc = <span class="string">&#x27;gray&#x27;</span>, ec = <span class="string">&#x27;k&#x27;</span>, lw = <span class="number">1</span>, alpha = <span class="number">0.5</span>))</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<p>result:<img src="https://s3.ax1x.com/2020/11/30/DgWMa8.png" /></p>
<center>
fig 3-2 annoatation case2
</center>
<h2 id="参考线区域的绘制">3.3 参考线/区域的绘制</h2>
<ul>
<li>axhline(), axvline()</li>
</ul>
<p>使用 Matplotlib 的 axhline() 函数、axvline() 函数分别在图形中添加水平参考线和垂直参考线，使用 axhline() 函数时给定 y 轴上的位置，同理axvline() 使用时需要给定 x 轴上的位置</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ax.axhline(y = <span class="built_in">min</span>(y), c = <span class="string">&#x27;blue&#x27;</span>, ls = <span class="string">&#x27;:&#x27;</span>, lw = <span class="number">2</span>)</span><br><span class="line">ax.axvline(x = np.pi*<span class="number">3</span>/<span class="number">2</span>, c = <span class="string">&#x27;blue&#x27;</span>, ls = <span class="string">&#x27;-.&#x27;</span>, lw = <span class="number">2</span>)</span><br></pre></td></tr></table></figure>
<p>result:</p>
<p><img src="https://s3.ax1x.com/2020/11/30/DgW3GQ.png" /></p>
<center>
fig 3-3 Reference line
</center>
<ul>
<li>axhspan(), axvspan()</li>
</ul>
<p>使用 axhspan() 函数、axvspan() 函数分别在图形中添加 sin() 函数平行于 x 轴的参考区域和平行于 y 轴的参考区域，axhspan() 函数需给定 y 轴上的区间位置，同理在 axvspan() 中需给定 x 轴上的区间位置</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ax.axhspan(ymin = <span class="number">0</span>, ymax = <span class="number">1</span>, facecolor = <span class="string">&#x27;purple&#x27;</span>, alpha = <span class="number">0.3</span>)</span><br><span class="line">ax.axvspan(xmin = np.pi *<span class="number">2</span>, xmax = np.pi * <span class="number">5</span>/<span class="number">2</span>, facecolor = <span class="string">&#x27;g&#x27;</span>, alpha = <span class="number">0.3</span>)</span><br></pre></td></tr></table></figure>
<p>result:</p>
<p><img src="https://s3.ax1x.com/2020/11/30/DgW82j.png" /></p>
<center>
fig 3-4 Reference interval
</center>
<h2 id="双-y-轴图表的绘制">3.4 双 Y 轴图表的绘制</h2>
<ul>
<li>twinx(), twiny()</li>
</ul>
<p>如果要在同一个 x 轴上显示两个不同数量级别的序列， 可以将第二个序列绘制在右侧辅助的 y 轴上，借助 Matplotlib 的 twinx() 和 twiny() 可以实现两个 y 或 x 轴</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ax_aux = ax.twinx()</span><br><span class="line">ax_aux.plot(x, np.arange(<span class="number">1000</span>), color = <span class="string">&#x27;blue&#x27;</span>, label = <span class="string">&#x27;line 1000&#x27;</span>)</span><br><span class="line"></span><br><span class="line">y_location1 = np.arange(<span class="number">0</span>, <span class="number">1000</span>, <span class="number">100</span>)</span><br><span class="line">y_labels1 = np.arange(<span class="number">0</span>, <span class="number">1000</span>, <span class="number">100</span>)</span><br><span class="line">ax_aux.set_yticks(y_location1) <span class="comment"># 刻度</span></span><br><span class="line">ax_aux.set_yticklabels(y_labels1, fontsize= <span class="number">15</span>) <span class="comment"># 刻度标签</span></span><br><span class="line"></span><br><span class="line">ax_aux.set_ylabel(<span class="string">&#x27;Y 轴 - 辅助&#x27;</span>, fontsize= <span class="number">15</span>)</span><br></pre></td></tr></table></figure>
<p>result:</p>
<p><img src="https://s3.ax1x.com/2020/11/30/DgWGxs.md.png" /></p>
<center>
fig 3-5 双 Y 轴 图表
</center>
<ul>
<li>添加图例</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fig.legend(loc = <span class="string">&#x27;upper right&#x27;</span>, bbox_to_anchor = (<span class="number">1</span>, <span class="number">1</span>), bbox_transform = ax.transAxes, fontsize = <span class="number">15</span>)</span><br></pre></td></tr></table></figure>
<h2 id="条形图的绘制">3.5 条形图的绘制</h2>
<ul>
<li>bar()</li>
</ul>
<p>条形图时通过相同宽度条形的高度/宽度来表现数据差异的图表，可利用 bar() 函数绘制</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = [<span class="string">&#x27;SimHei&#x27;</span>]</span><br><span class="line">plt.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">fig = plt.figure(figsize = (<span class="number">12</span>, <span class="number">8</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在 Figure 对象中创建一个 Axes 对象，每个 Axes 对象即为一个绘图区域</span></span><br><span class="line">ax = fig.add_subplot(<span class="number">111</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># pandas 生成时间序列</span></span><br><span class="line">date_index = pd.date_range(<span class="string">&#x27;2019-01-01&#x27;</span>, freq = <span class="string">&#x27;D&#x27;</span>, periods = <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">y_location = np.arange(<span class="number">0</span>, <span class="number">1000</span>, <span class="number">200</span>)</span><br><span class="line">y_labels = np.arange(<span class="number">0</span>, <span class="number">1000</span>, <span class="number">200</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 分别模拟生成跌涨时的成交量数据</span></span><br><span class="line">red_bar = [<span class="number">1000</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">879</span>, <span class="number">986</span>, <span class="number">213</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">green_bar = [<span class="number">0</span>, <span class="number">200</span>, <span class="number">599</span>, <span class="number">567</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">234</span>, <span class="number">998</span>, <span class="number">489</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制条形图</span></span><br><span class="line">ax.bar(date_index, red_bar, facecolor = <span class="string">&#x27;red&#x27;</span>)</span><br><span class="line">ax.bar(date_index, green_bar, facecolor = <span class="string">&#x27;green&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置轴标签</span></span><br><span class="line">ax.set_xlabel(<span class="string">u&#x27;交易日&#x27;</span>, fontsize = <span class="number">15</span>)</span><br><span class="line">ax.set_ylabel(<span class="string">u&#x27;手&#x27;</span>,fontsize = <span class="number">15</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置标题</span></span><br><span class="line">ax.set_title(<span class="string">u&#x27;成交量&#x27;</span>, fontsize = <span class="number">25</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示图形</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<p>result:</p>
<p><img src="https://s3.ax1x.com/2020/11/30/DgWYMn.png" /></p>
<center>
fig 3-6 条形图
</center>
<h2 id="直方图">3.6 直方图</h2>
<ul>
<li>hist()</li>
</ul>
<p>绘制直方图，首先要将全部样本数据按照不同的区间范围划分为若干组，每个组为直方图的柱子，柱子宽度表示该组的区间，柱子的高度表示数据出现的次数</p>
<ul>
<li>x：绘制直方图的数据（一维数组形式），例如服从正态分布的随机数组</li>
<li>bins：直方图的柱数</li>
<li>desity：是否将直方图的频数（数据出现的次数）转换成频率（数据所占的比例）的表示，默认为 False，True表示显示频数统计结果</li>
<li>n：直方图中每一个 bar 区间数据的频数或频率， 由参数 density 设定</li>
<li>bins：用于返回各个 bin 的区间范围</li>
<li>patches：；列表形式返回每个 bin 的图形对象</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = [<span class="string">&#x27;SimHei&#x27;</span>]</span><br><span class="line">plt.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">fig = plt.figure(figsize = (<span class="number">12</span>, <span class="number">8</span>))</span><br><span class="line">ax = fig.add_subplot(<span class="number">111</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制直方图</span></span><br><span class="line">ax.hist(np.random.normal(loc = <span class="number">0</span>, scale = <span class="number">1</span>, size = <span class="number">1000</span>), bins = <span class="number">50</span>, density = <span class="literal">False</span>, color = <span class="string">&#x27;b&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置轴标签</span></span><br><span class="line">ax.set_xlabel(<span class="string">u&#x27;样本值&#x27;</span>, fontsize = <span class="number">15</span>)</span><br><span class="line">ax.set_ylabel(<span class="string">u&#x27;频数&#x27;</span>, fontsize = <span class="number">15</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置标题</span></span><br><span class="line">ax.set_title(<span class="string">u&#x27;正态分布直方图&#x27;</span>, fontsize = <span class="number">25</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<p>result:<img src="https://s3.ax1x.com/2020/11/30/DgWtrq.md.png" /></p>
<center>
fig 3-7 直方图
</center>
<h2 id="饼图">3.7 饼图</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> pylab <span class="keyword">import</span> *</span><br><span class="line">rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>]=[<span class="string">&#x27;SimHei&#x27;</span>]</span><br><span class="line"></span><br><span class="line">labels=[<span class="string">&quot;东部&quot;</span>,<span class="string">&quot;南部&quot;</span>,<span class="string">&quot;北部&quot;</span>,<span class="string">&quot;中部&quot;</span>]</span><br><span class="line">sizes=[<span class="number">5</span>,<span class="number">10</span>,<span class="number">20</span>,<span class="number">15</span>]</span><br><span class="line">colors=[<span class="string">&quot;red&quot;</span>,<span class="string">&quot;green&quot;</span>,<span class="string">&quot;blue&quot;</span>,<span class="string">&quot;yellow&quot;</span>]</span><br><span class="line">explode=(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.05</span>,<span class="number">0</span>) <span class="comment"># 突出</span></span><br><span class="line">plt.pie(sizes, explode = explode, labels = labels, colors = colors, labeldistance = <span class="number">1.1</span>,autopct = <span class="string">&quot;%3.1f%%&quot;</span>, shadow = <span class="literal">True</span>, startangle = <span class="number">90</span>, pctdistance = <span class="number">0.5</span>)</span><br><span class="line">plt.axis(<span class="string">&quot;equal&quot;</span>)</span><br><span class="line">plt.legend()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<p>result:<img src="https://s3.ax1x.com/2020/11/30/DgWwIU.png" /></p>
<center>
fig 3-8 饼图
</center>
<h2 id="k-线图">3.8 K 线图</h2>
<ul>
<li>candlestick_ochl(), candlestick2_ochl()</li>
</ul>
<p>股票的 K 线记录着一个时间段的开盘价、最高价、最低价、收盘价这 4 个数据，定义如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> mpl_finance <span class="keyword">as</span> mpf</span><br><span class="line">candlestick2_ochl(ax, opens, closea, highs, lows, width = <span class="number">4</span>, colorup = <span class="string">&#x27;k&#x27;</span>, colordown = <span class="string">&#x27;r&#x27;</span>, alpha = <span class="number">0.75</span>)</span><br></pre></td></tr></table></figure>
<ul>
<li>ochl: opens, closes, highs, lows, 分别表示开盘价、收盘价、最高价、最低价的序列</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> mpl_finance <span class="keyword">as</span> mpf</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = [<span class="string">&#x27;SimHei&#x27;</span>]</span><br><span class="line">plt.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 对象式绘图</span></span><br><span class="line"><span class="comment"># pyplt 模块中的 figure() 函数创建名为</span></span><br><span class="line">fig = plt.figure(figsize = (<span class="number">12</span>, <span class="number">8</span>))</span><br><span class="line">ax = fig.add_subplot(<span class="number">111</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制 K 线图</span></span><br><span class="line">opens = [<span class="number">2320.36</span>, <span class="number">2300</span>, <span class="number">2295.35</span>, <span class="number">2347.22</span>, <span class="number">2360.75</span>, <span class="number">2385.43</span>, <span class="number">2376.41</span>, <span class="number">2424.92</span>, <span class="number">2411</span>, <span class="number">2432.68</span>]</span><br><span class="line">closes = [<span class="number">2320.26</span>, <span class="number">2291.3</span>, <span class="number">2347.5</span>, <span class="number">2358.98</span>, <span class="number">2382.48</span>, <span class="number">2385.42</span>, <span class="number">2419.02</span>, <span class="number">2428.15</span>, <span class="number">2433.13</span>, <span class="number">2334.48</span>]</span><br><span class="line">lows = [<span class="number">2287.3</span>, <span class="number">2288.26</span>, <span class="number">2295.35</span>, <span class="number">2337.35</span>, <span class="number">2347.89</span>, <span class="number">2371.23</span>, <span class="number">2369.57</span>, <span class="number">2417.58</span>, <span class="number">2403.3</span>, <span class="number">2427.7</span>]</span><br><span class="line">highs = [<span class="number">2362.94</span>, <span class="number">2308.38</span>, <span class="number">2345.92</span>, <span class="number">2363.8</span>, <span class="number">2382.48</span>, <span class="number">2383.76</span>, <span class="number">2391.82</span>, <span class="number">2421.15</span>, <span class="number">2440.38</span>, <span class="number">2441.73</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制 K 线走势</span></span><br><span class="line">mpf.candlestick2_ochl(ax, opens, closes, highs, lows, width = <span class="number">0.5</span>, colorup = <span class="string">&#x27;r&#x27;</span>, colordown = <span class="string">&#x27;g&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># pandas 生成实践序列</span></span><br><span class="line">date_index = pd.date_range(<span class="string">&#x27;2019-01-01&#x27;</span>, freq = <span class="string">&#x27;D&#x27;</span>, periods = <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置 x 轴的范围</span></span><br><span class="line">ax.set_xlim(<span class="number">0</span>, <span class="number">10</span>)</span><br><span class="line"><span class="comment"># x 轴刻度设定，每15天标一个日期</span></span><br><span class="line">ax.set_xticks(np.arange(<span class="number">0</span>, <span class="number">10</span>))</span><br><span class="line"><span class="comment"># 标签设置为日期</span></span><br><span class="line">ax.set_xticklabels([date_index.strftime(<span class="string">&#x27;%Y-%m-%d&#x27;</span>)[index] <span class="keyword">for</span> index <span class="keyword">in</span> ax.get_xticks()])</span><br><span class="line"><span class="comment"># 设置轴标签</span></span><br><span class="line">ax.set_xlabel(<span class="string">u&#x27;Date&#x27;</span>, fontsize = <span class="number">15</span>)</span><br><span class="line">ax.set_ylabel(<span class="string">u&#x27;Price&#x27;</span>, fontsize = <span class="number">15</span>)</span><br><span class="line">ax.set_title(<span class="string">u&#x27;日 K 线图&#x27;</span>, fontsize = <span class="number">25</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<p>result:<img src="https://s3.ax1x.com/2020/11/30/DgWNq0.png" /></p>
<center>
fig 3-9 K 线图
</center>
<h2 id="time-series">3.9 Time series</h2>
<p>当横轴时间过长，不利于展示图片信息时，可以通过 matplotlib.datas 模块和<code>ax.xaxis.set_major_formatter(mdates.DateFormatter('%Y'))</code>来调整仅显示年份</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> matplotlib.dates <span class="keyword">as</span> mdates</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = [<span class="string">&#x27;SimHei&#x27;</span>]</span><br><span class="line">plt.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ticks</span></span><br><span class="line">data_ticks = pd.date_range(start = <span class="string">&#x27;1985-12&#x27;</span>, freq = <span class="string">&#x27;Y&#x27;</span>, end = <span class="string">&#x27;2019-01&#x27;</span>)</span><br><span class="line">data_labels = np.arange(<span class="number">1985</span>, <span class="number">2019</span>)</span><br><span class="line"></span><br><span class="line">data = pd.read_csv(<span class="string">r&#x27;D:\Demo\University\XMU\Thesis\Master\WTI.csv&#x27;</span>)</span><br><span class="line"><span class="comment"># date_index = data.loc[:, &#x27;日期&#x27;]</span></span><br><span class="line">x_index = pd.date_range(start = <span class="string">&#x27;1986-01&#x27;</span>, freq = <span class="string">&#x27;M&#x27;</span>, end = <span class="string">&#x27;2019-01&#x27;</span>)</span><br><span class="line">data1 = data.loc[:, <span class="string">&#x27;收盘&#x27;</span>]</span><br><span class="line">data_pt = data1.to_list()</span><br><span class="line"></span><br><span class="line">petrol_price = pd.DataFrame(data_pt, index = x_index, columns = [<span class="string">&#x27;Pt_price&#x27;</span>])</span><br><span class="line"></span><br><span class="line">fig = plt.figure(figsize = (<span class="number">12</span>, <span class="number">8</span>))</span><br><span class="line">ax = fig.add_subplot(<span class="number">111</span>)</span><br><span class="line"></span><br><span class="line">ax.plot(petrol_price, color = <span class="string">&#x27;b&#x27;</span>, lw = <span class="number">0.8</span>, label = <span class="string">&#x27;WTI现货离岸价格&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置时间显示格式，%Y%m%d%H 年月日时显示</span></span><br><span class="line">ax.xaxis.set_major_formatter(mdates.DateFormatter(<span class="string">&#x27;%Y&#x27;</span>))</span><br><span class="line"><span class="comment"># plt.xlim((1988, 2019))</span></span><br><span class="line">plt.xticks(ticks = data_ticks, label = data_labels, rotation = <span class="number">45</span>)</span><br><span class="line"></span><br><span class="line">plt.title(<span class="string">&#x27;1986-2018年油价（WTI现货离岸价格）趋势图&#x27;</span>, fontsize = <span class="number">16</span>)</span><br><span class="line">plt.legend()</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<p>result:<img src="https://s3.ax1x.com/2020/11/30/DgWgqx.md.png" /></p>
<center>
fig 3-10 WTI油价趋势表
</center>
<h1 id="subplot">4 Subplot</h1>
<p>当需要在图表上显示多个子图时，可以在 Figure 对象中创建 Axes 对象，于是每个 Axes 对象即为一个独立的绘图区域，创建子图的方法主要有 subplot()、add_subplot()、add_axes() 三种方法</p>
<h2 id="create-subplot">4.1 Create subplot</h2>
<h3 id="add_subplot">4.1.1 add_subplot()</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = [<span class="string">&#x27;SimHei&#x27;</span>]</span><br><span class="line">plt.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">fig = plt.figure(figsize = (<span class="number">12</span>,  <span class="number">8</span>))</span><br><span class="line">ax1 = fig.add_subplot(<span class="number">211</span>) <span class="comment"># 子图以 2 行 1 列排布</span></span><br><span class="line">ax2 = fig.add_subplot(<span class="number">212</span>) <span class="comment"># 创建另一个 Axes 对象</span></span><br><span class="line"></span><br><span class="line">ax1.plot(np.arange(<span class="number">100</span>), np.random.randint(<span class="number">0</span>, <span class="number">10</span>, <span class="number">100</span>), label = <span class="string">u&#x27;0-10 随机数&#x27;</span>, ls = <span class="string">&#x27;-&#x27;</span>, c =<span class="string">&#x27;r&#x27;</span>, lw = <span class="number">1</span>)</span><br><span class="line">ax1.set_title(<span class="string">u&#x27;0-10 随机数&#x27;</span>, fontsize = <span class="number">12</span>)</span><br><span class="line">ax1.legend(loc = <span class="string">&#x27;upper right&#x27;</span>)</span><br><span class="line"></span><br><span class="line">ax2.plot(np.arange(<span class="number">100</span>), np.random.randint(<span class="number">10</span>, <span class="number">20</span>, <span class="number">100</span>), label = <span class="string">u&#x27;10-20 随机数&#x27;</span>, ls = <span class="string">&#x27;-&#x27;</span>, c =<span class="string">&#x27;y&#x27;</span>, lw = <span class="number">1</span>)</span><br><span class="line">ax2.set_title(<span class="string">u&#x27;10-20 随机数&#x27;</span>, fontsize = <span class="number">12</span>)</span><br><span class="line">ax2.legend(loc = <span class="string">&#x27;upper right&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<p>result:<img src="https://s3.ax1x.com/2020/11/30/DgWsz9.png" /></p>
<center>
fig 4-1 subplot
</center>
<p>add_subplot() 本质上是以坐标来定位子图位置的，左下角坐标位置时子图在整个 Figure 对象上的绝对坐标，如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(ax1, ax2)</span><br><span class="line"><span class="comment"># AxesSubplot(0.125,0.536818;0.775x0.343182)</span></span><br><span class="line"><span class="comment"># AxesSubplot(0.125,0.125;0.775x0.343182)</span></span><br></pre></td></tr></table></figure>
<h3 id="add_axes">4.1.2 add_axes()</h3>
<p>使用 add_axes() 创建子图与 add_subplot() 有所不同，add_axes() 函数中需要给定子图在整个 Figure 对象上的绝对坐标[x0, y0, width, height]，即左下角的坐标 (x0, y0) 及其宽度和高度</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = [<span class="string">&#x27;SimHei&#x27;</span>]</span><br><span class="line">plt.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">fig = plt.figure(figsize = (<span class="number">12</span>, <span class="number">8</span>))</span><br><span class="line">ax1 = fig.add_axes([<span class="number">0.125</span>, <span class="number">0.536818</span>, <span class="number">0.775</span>, <span class="number">0.343182</span>])</span><br><span class="line">ax2 = fig.add_axes([<span class="number">0.125</span>, <span class="number">0.125</span>, <span class="number">0.775</span>, <span class="number">0.343182</span>])</span><br><span class="line">ax1.plot(np.arange(<span class="number">100</span>), np.random.randint(<span class="number">0</span>, <span class="number">10</span>, <span class="number">100</span>), label = <span class="string">u&#x27;0-10 随机数&#x27;</span>, ls = <span class="string">&#x27;-&#x27;</span>, c =<span class="string">&#x27;r&#x27;</span>, lw = <span class="number">1</span>)</span><br><span class="line">ax1.set_title(<span class="string">u&#x27;0-10 随机数&#x27;</span>, fontsize = <span class="number">12</span>)</span><br><span class="line">ax1.legend(loc = <span class="string">&#x27;upper right&#x27;</span>)</span><br><span class="line"></span><br><span class="line">ax2.plot(np.arange(<span class="number">100</span>), np.random.randint(<span class="number">10</span>, <span class="number">20</span>, <span class="number">100</span>), label = <span class="string">u&#x27;10-20 随机数&#x27;</span>, ls = <span class="string">&#x27;-&#x27;</span>, c =<span class="string">&#x27;y&#x27;</span>, lw = <span class="number">1</span>)</span><br><span class="line">ax2.set_title(<span class="string">u&#x27;10-20 随机数&#x27;</span>, fontsize = <span class="number">12</span>)</span><br><span class="line">ax2.legend(loc = <span class="string">&#x27;upper right&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<p>result:<img src="https://s3.ax1x.com/2020/11/30/DgWrRJ.png" /></p>
<center>
fig 4-2 add_axes
</center>
<p>当需要精确定位子图时，可使用 add_axes()，但获取子图精确的位置信息较繁琐</p>
<h3 id="subplot-1">4.1.3 subplot()</h3>
<p>add_subplot() 和 add_axes() 是对象式创建子图的方法，而 subplot() 是函数式创建子图的方法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = [<span class="string">&#x27;SimHei&#x27;</span>]</span><br><span class="line">plt.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">plt.figure(figsize = (<span class="number">12</span>, <span class="number">8</span>))</span><br><span class="line">plt.subplot(<span class="number">211</span>)</span><br><span class="line">plt.plot(np.arange(<span class="number">100</span>), np.random.randint(<span class="number">0</span>, <span class="number">10</span>, <span class="number">100</span>), label = <span class="string">u&#x27;0-10 随机数&#x27;</span>, ls = <span class="string">&#x27;-&#x27;</span>, c =<span class="string">&#x27;r&#x27;</span>, lw = <span class="number">1</span>)</span><br><span class="line">plt.legend(loc = <span class="number">1</span>)</span><br><span class="line">plt.subplot(<span class="number">212</span>)</span><br><span class="line">plt.plot(np.arange(<span class="number">100</span>), np.random.randint(<span class="number">10</span>, <span class="number">20</span>, <span class="number">100</span>), label = <span class="string">u&#x27;10-20 随机数&#x27;</span>, ls = <span class="string">&#x27;-&#x27;</span>, c =<span class="string">&#x27;y&#x27;</span>, lw = <span class="number">1</span>)</span><br><span class="line">plt.legend(loc = <span class="number">1</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<p>result is same as above figure.</p>
<ul>
<li>Demo: 使用 subplot 创建 2 行 3 列 排布的多子图，以遍历方式在子图上绘制折线图</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = [<span class="string">&#x27;SimHei&#x27;</span>]</span><br><span class="line">plt.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">plt.figure(figsize = (<span class="number">12</span>, <span class="number">8</span>))</span><br><span class="line"></span><br><span class="line">fig_ps, axes_ps = plt.subplots(<span class="number">2</span>, <span class="number">3</span>) </span><br><span class="line"><span class="comment"># subplots 返回两个值，fig_ps 表示图像大小信息， axes_ps 表示子图位置信息</span></span><br><span class="line">print(fig_ps, axes_ps)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        axes_ps[i, j].plot(np.arange(<span class="number">100</span>), np.random.randint(<span class="number">0</span>, <span class="number">10</span>, <span class="number">100</span>), c =<span class="string">&#x27;y&#x27;</span>, alpha = <span class="number">0.5</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<p>result:<img src="https://s3.ax1x.com/2020/11/30/DgWBiF.png" /></p>
<center>
fig 4-3 mul-subplot
</center>
<h2 id="布局多子图对象">4.2 布局多子图对象</h2>
<ul>
<li>GridSpec module</li>
</ul>
<p>有时不仅要在多个子图上显示图形，而且也要协调多个子图的位置和比例。三种创建子图的方法中，使用较多的是 add_plot() 方法，而该方法所创建的子图是堆成的子图，因此该方法并不满足非对称子图的应用。 若要创建非对称的子图，可以使用 matplotlib 的 GridSpec 模块。GridSpec 可以自定义子图的位置和调整子图行和列的相对高度和宽度</p>
<p>Import module</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.gridspec <span class="keyword">as</span> gridspec <span class="comment"># 分割子图</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># gridspec.GridSpec 的构造函数</span></span><br><span class="line">gridspec.GridSpec(nrows, ncols, figure = <span class="literal">None</span>, left = <span class="literal">None</span>, bottom = <span class="literal">None</span>, right = <span class="literal">None</span>, top = <span class="literal">None</span>, wspace = <span class="literal">None</span>, hspace = <span class="literal">None</span>, width_ratios = <span class="literal">None</span>, height_ratios = <span class="literal">None</span>)</span><br></pre></td></tr></table></figure>
<p>参数 nrows 和 ncols 分别表示网格的行列数。用 plt.figure() 创建图表，通过 gridspec.GridSpec() 将整个图表划分为多个区域。由于 GridSpec 返回的实例支持切片方式选取网格区域，因此可以结合 add_subplot() 方法更灵活地添加跨度不同网格大小的子图</p>
<p>left, bottom, right, top 分别控制子图与 Figure 左边、底部、右边、顶部的距离比例。gs[0, : ] 表示该子图占第 0 行和所有列</p>
<h3 id="创建多子图布局">4.2.1 创建多子图布局</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> matplotlib.gridspec <span class="keyword">as</span> gridspec</span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = [<span class="string">&#x27;SimHei&#x27;</span>]</span><br><span class="line">plt.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">fig = plt.figure(figsize = (<span class="number">12</span>, <span class="number">8</span>), dpi = <span class="number">100</span>, facecolor = <span class="string">&#x27;white&#x27;</span>)</span><br><span class="line">gs = gridspec.GridSpec(<span class="number">3</span>, <span class="number">3</span>)</span><br><span class="line">graph_ax1 = fig.add_subplot(gs[<span class="number">0</span>, :])</span><br><span class="line">graph_ax2 = fig.add_subplot(gs[<span class="number">1</span>, <span class="number">0</span>:<span class="number">2</span>])</span><br><span class="line">graph_ax3 = fig.add_subplot(gs[<span class="number">1</span>:<span class="number">3</span>, <span class="number">2</span>])</span><br><span class="line">graph_ax4 = fig.add_subplot(gs[<span class="number">2</span>, <span class="number">0</span>:<span class="number">2</span>])</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<p>result:<img src="https://s3.ax1x.com/2020/11/30/DgW6MR.png" /></p>
<center>
fig 4-4 多子图布局图
</center>
<h3 id="微调">4.2.2 微调</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> matplotlib.gridspec <span class="keyword">as</span> gridspec</span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = [<span class="string">&#x27;SimHei&#x27;</span>]</span><br><span class="line">plt.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">fig = plt.figure(figsize = (<span class="number">12</span>, <span class="number">8</span>), dpi = <span class="number">100</span>, facecolor = <span class="string">&#x27;white&#x27;</span>)</span><br><span class="line">gs = gridspec.GridSpec(<span class="number">3</span>, <span class="number">3</span>, left = <span class="number">0.08</span>, bottom = <span class="number">0.15</span>, right = <span class="number">0.99</span>, </span><br><span class="line">                       top = <span class="number">0.96</span>, wspace = <span class="number">0.5</span>, hspace = <span class="number">0.5</span>, width_ratios = [<span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>],</span><br><span class="line">                      height_ratios = [<span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>])</span><br><span class="line">graph_ax1 = fig.add_subplot(gs[<span class="number">0</span>, :])</span><br><span class="line">graph_ax2 = fig.add_subplot(gs[<span class="number">1</span>, <span class="number">0</span>:<span class="number">2</span>])</span><br><span class="line">graph_ax3 = fig.add_subplot(gs[<span class="number">1</span>:<span class="number">3</span>, <span class="number">2</span>])</span><br><span class="line">graph_ax4 = fig.add_subplot(gs[<span class="number">2</span>, <span class="number">0</span>:<span class="number">2</span>])</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<p>result:<img src="https://s3.ax1x.com/2020/11/30/DgWcs1.md.png" /></p>
<center>
fig 4-5 微调之后的多子图布局
</center>
<h1 id="figure-properties">5 Figure properties</h1>
<h2 id="plot">5.1 plot()</h2>
<p>Function definition:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 单线条：</span></span><br><span class="line">plot([x], y [, fmt], data = <span class="literal">None</span>, **kwargs)</span><br><span class="line"><span class="comment"># 多线条</span></span><br><span class="line">plot([x], y [, fmt], [x2], y2 [fmt2], ..., **kwargs)</span><br><span class="line"><span class="comment"># fmt = &#x27;[color][marker][line]&#x27;</span></span><br></pre></td></tr></table></figure>
<p>其中，[fmt]为可选参数，用一个字符串来定义图形的基本属性，包括颜色（color），点型（marker），线性（linestyle），具体如下：</p>
<ul>
<li>Colors</li>
</ul>
<center>
tab 5-4 color properties
</center>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">Character</th>
<th style="text-align: center;">Color</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;"><code>'b'</code></td>
<td style="text-align: center;">blue</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>'g'</code></td>
<td style="text-align: center;">green</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>'r'</code></td>
<td style="text-align: center;">red</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>'c'</code></td>
<td style="text-align: center;">cyan（蓝绿色）</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>'m'</code></td>
<td style="text-align: center;">magenta（品红）</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>'y'</code></td>
<td style="text-align: center;">yellow</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>'k'</code></td>
<td style="text-align: center;">black</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>'w'</code></td>
<td style="text-align: center;">white</td>
</tr>
</tbody>
</table>
<ul>
<li>Markers</li>
</ul>
<center>
tab 5-5 marker properties
</center>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">Character</th>
<th style="text-align: center;">Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;"><code>'.'</code></td>
<td style="text-align: center;">point marker</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>','</code></td>
<td style="text-align: center;">pixel marker</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>'o'</code></td>
<td style="text-align: center;">circle marker</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>'v'</code></td>
<td style="text-align: center;">triangle_down marker</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>'^'</code></td>
<td style="text-align: center;">triangle_up marker</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>'&lt;'</code></td>
<td style="text-align: center;">triangle_left marker</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>'&gt;'</code></td>
<td style="text-align: center;">triangle_right marker</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>'1'</code></td>
<td style="text-align: center;">tri_down marker</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>'2'</code></td>
<td style="text-align: center;">tri_up marker</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>'3'</code></td>
<td style="text-align: center;">tri_left marker</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>'4'</code></td>
<td style="text-align: center;">tri_right marker</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>'s'</code></td>
<td style="text-align: center;">square marker</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>'p'</code></td>
<td style="text-align: center;">pentagon marker（五角形）</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>'*'</code></td>
<td style="text-align: center;">star marker</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>'h'</code></td>
<td style="text-align: center;">hexagon1 marker（六角形）</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>'H'</code></td>
<td style="text-align: center;">hexagon2 marker</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>'+'</code></td>
<td style="text-align: center;">plus marker</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>'x'</code></td>
<td style="text-align: center;">x marker</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>'D'</code></td>
<td style="text-align: center;">diamond marker</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>'d'</code></td>
<td style="text-align: center;">thin_diamond marker</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>'|'</code></td>
<td style="text-align: center;">vline marker</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>'_'</code></td>
<td style="text-align: center;">hline marker</td>
</tr>
</tbody>
</table>
<ul>
<li>Line Styles</li>
</ul>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">Character</th>
<th style="text-align: center;">Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;"><code>'-'</code></td>
<td style="text-align: center;">solid line style</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>'--'</code></td>
<td style="text-align: center;">dashed line style（虚线）</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>'-.'</code></td>
<td style="text-align: center;">dash-dot line style</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>':'</code></td>
<td style="text-align: center;">dotted line style</td>
</tr>
</tbody>
</table>
<ul>
<li>Examples format strings:</li>
</ul>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">Character</th>
<th style="text-align: center;">Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;"><code>'b'</code></td>
<td style="text-align: center;">blue markers with default shape</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>'ro'</code></td>
<td style="text-align: center;">red circles</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>'g-'</code></td>
<td style="text-align: center;">green solid line</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>'--'</code></td>
<td style="text-align: center;">dashed line with default color</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>'k^:'</code></td>
<td style="text-align: center;">black triangle_up markers connected by a dotted line</td>
</tr>
</tbody>
</table>
<p>Case:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plt.plot([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>], [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>], <span class="string">&#x27;go--&#x27;</span>)</span><br><span class="line">plt.plot([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>], [<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>], color = <span class="string">&#x27;green&#x27;</span>, marker = <span class="string">&#x27;o&#x27;</span>, linestyle = <span class="string">&#x27;dashed&#x27;</span>)</span><br><span class="line">plt.plot([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>], [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>], color = <span class="string">&#x27;g&#x27;</span>, marker = <span class="string">&#x27;o&#x27;</span>, linestyle = <span class="string">&#x27;dashed&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>result:<img src="https://s3.ax1x.com/2020/11/30/DgWaZV.png" /></p>
<center>
fig 5-1 plot parameter
</center>
<h2 id="abbreviation">5.2 Abbreviation</h2>
<p>Matplotlib 支持一些属性的关键词简写：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;linewidth&#x27;</span>: [<span class="string">&#x27;lw&#x27;</span>]</span><br><span class="line"><span class="string">&#x27;linestyle&#x27;</span>: [<span class="string">&#x27;ls&#x27;</span>]</span><br><span class="line"><span class="string">&#x27;facecolor&#x27;</span>: [<span class="string">&#x27;fc&#x27;</span>]</span><br><span class="line"><span class="string">&#x27;edgecolor&#x27;</span>: [<span class="string">&#x27;ec&#x27;</span>]</span><br><span class="line"><span class="string">&#x27;markerfacecolor&#x27;</span>: [<span class="string">&#x27;mfc&#x27;</span>]</span><br><span class="line"><span class="string">&#x27;markeredgecolor&#x27;</span>: [<span class="string">&#x27;mec&#x27;</span>]</span><br><span class="line"><span class="string">&#x27;markeredgewidth&#x27;</span>: [<span class="string">&#x27;mew&#x27;</span>]</span><br><span class="line"><span class="string">&#x27;markersize&#x27;</span>: [<span class="string">&#x27;ms&#x27;</span>]</span><br></pre></td></tr></table></figure>
<p>eg:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plt.plot([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>], [<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>], color = <span class="string">&#x27;green&#x27;</span>, marker = <span class="string">&#x27;o&#x27;</span>, linestyle = <span class="string">&#x27;dashed&#x27;</span>, linewidth = <span class="number">2</span>)</span><br><span class="line">plt.plot([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>], [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>], c = <span class="string">&#x27;g&#x27;</span>, marker = <span class="string">&#x27;o&#x27;</span>, linestyle = <span class="string">&#x27;dashed&#x27;</span>, lw = <span class="number">5</span>)</span><br></pre></td></tr></table></figure>
<p>result:<img src="https://s3.ax1x.com/2020/11/30/DgWdaT.png" /></p>
<center>
fig 5-2 Abbreviation
</center>
<h2 id="ticks">5.3 Ticks</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">x = np.linspace(-<span class="number">1</span>, <span class="number">1</span>, <span class="number">50</span>)</span><br><span class="line">y1 = <span class="number">2</span> * x + <span class="number">1</span></span><br><span class="line">y2 = x**<span class="number">2</span></span><br><span class="line"></span><br><span class="line">plt.figure(num = <span class="number">1</span>)</span><br><span class="line">plt.plot(x, y1, color = <span class="string">&#x27;red&#x27;</span>)</span><br><span class="line">plt.plot(x, y2, color = <span class="string">&#x27;green&#x27;</span>, linewidth = <span class="number">1.0</span>, linestyle = <span class="string">&#x27;--&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.xlim((-<span class="number">1</span>, <span class="number">2</span>))</span><br><span class="line">plt.ylim((-<span class="number">2</span>, <span class="number">3</span>))</span><br><span class="line">plt.xlabel(<span class="string">&#x27;I am x&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;I am y&#x27;</span>)</span><br><span class="line"></span><br><span class="line">new_ticks = np.linspace(-<span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>)</span><br><span class="line">print(new_ticks)</span><br><span class="line">plt.xticks(new_ticks) <span class="comment"># 刻度</span></span><br><span class="line">plt.yticks([-<span class="number">2</span>, -<span class="number">1.8</span>, -<span class="number">1</span>, <span class="number">1.22</span>, <span class="number">3</span>],</span><br><span class="line">           [<span class="string">r&#x27;$relly\ bad\ \alpha$&#x27;</span>, <span class="string">r&#x27;$bad$&#x27;</span>, <span class="string">r&#x27;$normal$&#x27;</span>, <span class="string">r&#x27;$good$&#x27;</span>, <span class="string">r&#x27;$really\ good$&#x27;</span>])</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<p>result:<img src="https://s3.ax1x.com/2020/11/30/DgWA8H.png" /></p>
<center>
fig 5-3 Ticks demo
</center>
<h2 id="axis-position">5.4 Axis position</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">x = np.linspace(-<span class="number">3</span>, <span class="number">3</span>, <span class="number">50</span>)</span><br><span class="line">y1 = <span class="number">2</span> * x + <span class="number">1</span></span><br><span class="line">y2 = x**<span class="number">2</span></span><br><span class="line"></span><br><span class="line">plt.figure(num = <span class="number">1</span>)</span><br><span class="line">plt.plot(x, y1, color = <span class="string">&#x27;red&#x27;</span>)</span><br><span class="line">plt.plot(x, y2, color = <span class="string">&#x27;green&#x27;</span>, linewidth = <span class="number">1.0</span>, linestyle = <span class="string">&#x27;--&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.xlim((-<span class="number">1</span>, <span class="number">2</span>))</span><br><span class="line">plt.ylim((-<span class="number">2</span>, <span class="number">4</span>))</span><br><span class="line">plt.xlabel(<span class="string">&#x27;I am x&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;I am y&#x27;</span>)</span><br><span class="line"></span><br><span class="line">new_ticks = np.linspace(-<span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>)</span><br><span class="line">print(new_ticks)</span><br><span class="line">plt.xticks(new_ticks)</span><br><span class="line">plt.yticks([-<span class="number">2</span>, -<span class="number">1.8</span>, -<span class="number">1</span>, <span class="number">1.22</span>, <span class="number">3</span>],</span><br><span class="line">           [<span class="string">r&#x27;$relly\ bad\ \alpha$&#x27;</span>, <span class="string">r&#x27;$bad$&#x27;</span>, <span class="string">r&#x27;$normal$&#x27;</span>, <span class="string">r&#x27;$good$&#x27;</span>, <span class="string">r&#x27;$really\ good$&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># gca = get current axis</span></span><br><span class="line">ax = plt.gca()</span><br><span class="line">ax.spines[<span class="string">&#x27;right&#x27;</span>].set_color(<span class="string">&#x27;none&#x27;</span>)</span><br><span class="line">ax.spines[<span class="string">&#x27;top&#x27;</span>].set_color(<span class="string">&#x27;none&#x27;</span>)</span><br><span class="line">ax.xaxis.set_ticks_position(<span class="string">&#x27;bottom&#x27;</span>)</span><br><span class="line">ax.yaxis.set_ticks_position(<span class="string">&#x27;left&#x27;</span>)</span><br><span class="line">ax.spines[<span class="string">&#x27;bottom&#x27;</span>].set_position((<span class="string">&#x27;data&#x27;</span>, <span class="number">0</span>))</span><br><span class="line">ax.spines[<span class="string">&#x27;left&#x27;</span>].set_position((<span class="string">&#x27;data&#x27;</span>, <span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<p>result:</p>
<p><img src="https://s3.ax1x.com/2020/11/30/DgWkPe.png" /></p>
<center>
fig 5-4 Modify axis position
</center>
<h2 id="legend">5.5 legend()</h2>
<ul>
<li>loc</li>
</ul>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">Location String</th>
<th style="text-align: center;">Location Code</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">'best'</td>
<td style="text-align: center;">0</td>
</tr>
<tr class="even">
<td style="text-align: center;">'upper right'</td>
<td style="text-align: center;">1</td>
</tr>
<tr class="odd">
<td style="text-align: center;">'upper left'</td>
<td style="text-align: center;">2</td>
</tr>
<tr class="even">
<td style="text-align: center;">'lower left'</td>
<td style="text-align: center;">3</td>
</tr>
<tr class="odd">
<td style="text-align: center;">'lower right'</td>
<td style="text-align: center;">4</td>
</tr>
<tr class="even">
<td style="text-align: center;">'right'</td>
<td style="text-align: center;">5</td>
</tr>
<tr class="odd">
<td style="text-align: center;">'center left'</td>
<td style="text-align: center;">6</td>
</tr>
<tr class="even">
<td style="text-align: center;">'center right'</td>
<td style="text-align: center;">7</td>
</tr>
<tr class="odd">
<td style="text-align: center;">'lower center'</td>
<td style="text-align: center;">8</td>
</tr>
<tr class="even">
<td style="text-align: center;">'upper center'</td>
<td style="text-align: center;">9</td>
</tr>
<tr class="odd">
<td style="text-align: center;">'center'</td>
<td style="text-align: center;">10</td>
</tr>
</tbody>
</table>
<h2 id="add-text">5.6 Add text</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ax.text(<span class="number">0</span>, <span class="number">2</span>, <span class="string">&#x27;This is a test text.&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p><img src="https://s3.ax1x.com/2020/11/30/DgWRZ6.png" /></p>
<center>
fig 5-5 Add text on figure
</center>
]]></content>
      <categories>
        <category>Notes</category>
        <category>Python module</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Data analysis</tag>
        <tag>Matplotlib</tag>
      </tags>
  </entry>
  <entry>
    <title>Python</title>
    <url>/2020/11/29/Python/</url>
    <content><![CDATA[<h1 id="python-数据类型">1. Python 数据类型</h1>
<h2 id="string">1.1 String</h2>
<ul>
<li>字符串的换行</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 长字符串的换行</span></span><br><span class="line">s2 = <span class="string">&#x27;It took me six months to write this Python tutorial. \</span></span><br><span class="line"><span class="string">    Please give me more support. \</span></span><br><span class="line"><span class="string">    I will keep it updated.&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 表达式的换行</span></span><br><span class="line">num = <span class="number">20</span> + <span class="number">3</span> / <span class="number">4</span> + \</span><br><span class="line">    <span class="number">2</span> * <span class="number">3</span></span><br><span class="line">print(num)</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<ul>
<li>长字符串</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 长字符串中的换行，缩进等会如实输出</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">Long string information</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>原始字符串</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">rstr = <span class="string">r&#x27;D:\Program Files\Python 3.8\python.exe&#x27;</span></span><br><span class="line">print(rstr)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 原始字符串中的引号童谣要进行转义处理</span></span><br><span class="line">str2 = <span class="string">r&#x27;I\&#x27;m a great coder!&#x27;</span></span><br><span class="line">print(str1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 字符串结尾的反斜杠，如表达：D:\Program Files\Python 3.8\</span></span><br><span class="line">str3 = <span class="string">r&#x27;D:\Program Files\Python 3.8&#x27;</span> + <span class="string">&#x27;\\&#x27;</span></span><br><span class="line">print(str1)</span><br></pre></td></tr></table></figure>
<h2 id="bytes">1.2 Bytes</h2>
<p>Bytes 类型表示一个字节串，时Python 3 新增的， python 2 中不存在</p>
<p>Bytes 和 string 的对比：</p>
<ul>
<li>string由若干个字符组成，以字符为单位进行操作；Bytes由字节组成</li>
<li>除了操作的处理单元不同，它们支持的所有方法基本相同</li>
<li>都是不可变序列，不能随意增加和删除数据</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 通过构造函数创建空 bytes</span></span><br><span class="line">b1 = <span class="built_in">bytes</span>()</span><br><span class="line"><span class="comment"># 通过空字符串创建空 bytes</span></span><br><span class="line">b2 = <span class="string">b&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># 通过b前缀将字符串转换成 bytes</span></span><br><span class="line">b3 = <span class="string">b&#x27;http://c.biancheng.net/python/&#x27;</span></span><br><span class="line">print(<span class="string">&quot;b3: &quot;</span>, b3)</span><br><span class="line">print(b3[<span class="number">3</span>])</span><br><span class="line">print(b3[<span class="number">7</span>:<span class="number">22</span>])</span><br><span class="line"><span class="comment"># 为 bytes() 方法指定字符集</span></span><br><span class="line">b4 = <span class="built_in">bytes</span>(<span class="string">&#x27;C语言中文网8岁了&#x27;</span>, encoding=<span class="string">&#x27;UTF-8&#x27;</span>)</span><br><span class="line">print(<span class="string">&quot;b4: &quot;</span>, b4)</span><br><span class="line"><span class="comment"># 通过 encode() 方法将字符串转换成 bytes</span></span><br><span class="line">b5 = <span class="string">&quot;C语言中文网8岁了&quot;</span>.encode(<span class="string">&#x27;UTF-8&#x27;</span>)</span><br><span class="line">print(<span class="string">&quot;b5: &quot;</span>, b5)</span><br><span class="line"><span class="comment"># 通过 decode() 方法将 bytes 转化为字符串</span></span><br><span class="line">str1 = b5.decode(<span class="string">&#x27;UTF-8&#x27;</span>)</span><br><span class="line">print(<span class="string">&quot;str1: &quot;</span>, str1)</span><br></pre></td></tr></table></figure>
<p>输出结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">b3:  <span class="string">b&#x27;http://c.biancheng.net/python/&#x27;</span></span><br><span class="line"><span class="number">112</span></span><br><span class="line"><span class="string">b&#x27;c.biancheng.net&#x27;</span></span><br><span class="line">b4:  <span class="string">b&#x27;C\xe8\xaf\xad\xe8\xa8\x80\xe4\xb8\xad\xe6\x96\x87\xe7\xbd\x918\xe5\xb2\x81\xe4\xba\x86&#x27;</span></span><br><span class="line">b5:  <span class="string">b&#x27;C\xe8\xaf\xad\xe8\xa8\x80\xe4\xb8\xad\xe6\x96\x87\xe7\xbd\x918\xe5\xb2\x81\xe4\xba\x86&#x27;</span></span><br><span class="line">str1:  C语言中文网<span class="number">8</span>岁了</span><br></pre></td></tr></table></figure>
<p>从运行结果可以发现，对于非 ASCII 字符，print 输出的是它的字符编码值（十六进制形式），而不是字符本身。非 ASCII 字符一般占用两个字节以上的内存，而 bytes 是按照单个字节来处理数据的，所以不能一次处理多个字节。</p>
<h2 id="list">1.3 list</h2>
<h3 id="创建列表">1.3.1 创建列表</h3>
<ul>
<li>使用 [] 创建列表</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 可支持不同数据类型</span></span><br><span class="line">program = [<span class="string">&quot;C语言&quot;</span>, <span class="string">&quot;Python&quot;</span>, <span class="string">&quot;Java&quot;</span>]</span><br><span class="line"><span class="comment"># 支持创建空列表</span></span><br><span class="line">emptylist = [ ]</span><br></pre></td></tr></table></figure>
<ul>
<li>使用 list() 函数创建列表</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将字符串转换成列表</span></span><br><span class="line">list1 = <span class="built_in">list</span>(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line">print(list1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将元组转换成列表</span></span><br><span class="line">tuple1 = (<span class="string">&#x27;Python&#x27;</span>, <span class="string">&#x27;Java&#x27;</span>, <span class="string">&#x27;C++&#x27;</span>, <span class="string">&#x27;JavaScript&#x27;</span>)</span><br><span class="line">list2 = <span class="built_in">list</span>(tuple1)</span><br><span class="line">print(list2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将字典转换成列表</span></span><br><span class="line">dict1 = &#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">100</span>, <span class="string">&#x27;b&#x27;</span>:<span class="number">42</span>, <span class="string">&#x27;c&#x27;</span>:<span class="number">9</span>&#125;</span><br><span class="line">list3 = <span class="built_in">list</span>(dict1)</span><br><span class="line">print(list3)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将区间转换成列表</span></span><br><span class="line">range1 = <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">6</span>)</span><br><span class="line">list4 = <span class="built_in">list</span>(range1)</span><br><span class="line">print(list4)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建空列表</span></span><br><span class="line">print(<span class="built_in">list</span>())</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[<span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;o&#x27;</span>]</span><br><span class="line">[<span class="string">&#x27;Python&#x27;</span>, <span class="string">&#x27;Java&#x27;</span>, <span class="string">&#x27;C++&#x27;</span>, <span class="string">&#x27;JavaScript&#x27;</span>]</span><br><span class="line">[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">[]</span><br></pre></td></tr></table></figure>
<h3 id="访问列表元素">1.3.2 访问列表元素</h3>
<ul>
<li><p>使用索引访问列表元素</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">listname[i]</span><br></pre></td></tr></table></figure></li>
<li><p>使用切片访问列表元素</p></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">listname[start : end : step]</span><br></pre></td></tr></table></figure>
<h3 id="删除列表操作">1.3.3 删除列表操作</h3>
<ul>
<li>del 关键词删除列表</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">del</span> listname</span><br><span class="line"><span class="comment"># listname 表示要删除列表的名称</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">del</span> listname[index]</span><br><span class="line"><span class="keyword">del</span> listname[start : end]</span><br><span class="line"><span class="comment"># 删除从索引 start 到 end 之间的元素，不包括 end 位置的元素</span></span><br></pre></td></tr></table></figure>
<ul>
<li>pop() 方法：根据索引值删除元素</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">listname.pop(index)</span><br><span class="line"><span class="comment"># index 表示索引值，如果不写 index 参数，默认会删除列表中的最后一个元素，类似于数据结构中“出栈”操作</span></span><br></pre></td></tr></table></figure>
<ul>
<li>remove() 方法：根据元素本身的值来进行删除操作</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># remove() 方法只会删除第一个与指定值相同的元素，而且必须保证该元素是存在的，否则会报ValueError 错误</span></span><br><span class="line"></span><br><span class="line">nums = [<span class="number">40</span>, <span class="number">36</span>, <span class="number">89</span>, <span class="number">2</span>, <span class="number">36</span>, <span class="number">100</span>, <span class="number">7</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第一次删除36</span></span><br><span class="line">nums.remove(<span class="number">36</span>)</span><br><span class="line">print(nums)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二次删除36</span></span><br><span class="line">nums.remove(<span class="number">36</span>)</span><br><span class="line">print(nums)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除78</span></span><br><span class="line">nums.remove(<span class="number">78</span>)</span><br><span class="line">print(nums)</span><br></pre></td></tr></table></figure>
<p>​ 运行结果</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[<span class="number">40</span>, <span class="number">89</span>, <span class="number">2</span>, <span class="number">36</span>, <span class="number">100</span>, <span class="number">7</span>]</span><br><span class="line">[<span class="number">40</span>, <span class="number">89</span>, <span class="number">2</span>, <span class="number">100</span>, <span class="number">7</span>]</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line"></span><br><span class="line">  File <span class="string">&quot;D:\Demo\Python\Test\Test1.py&quot;</span>, line <span class="number">493</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    nums.remove(<span class="number">78</span>)</span><br><span class="line"></span><br><span class="line">ValueError: <span class="built_in">list</span>.remove(x): x <span class="keyword">not</span> <span class="keyword">in</span> <span class="built_in">list</span></span><br></pre></td></tr></table></figure>
<ul>
<li>clear()方法：删除列表所有元素</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">url = <span class="built_in">list</span>(<span class="string">&quot;http://c.biancheng.net/python/&quot;</span>)</span><br><span class="line">url.clear()</span><br><span class="line">print(url)</span><br><span class="line"><span class="comment"># clear() 会清空列表</span></span><br></pre></td></tr></table></figure>
<p>​ 运行结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[]</span><br></pre></td></tr></table></figure>
<h3 id="列表添加元素">1.3.4 列表添加元素</h3>
<ul>
<li>用 '+' 进行拼接</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">language = [<span class="string">&quot;Python&quot;</span>, <span class="string">&quot;C++&quot;</span>, <span class="string">&quot;Java&quot;</span>]</span><br><span class="line">birthday = [<span class="number">1991</span>, <span class="number">1998</span>, <span class="number">1995</span>]</span><br><span class="line">info = language + birthday</span><br><span class="line"></span><br><span class="line">print(<span class="string">&quot;language =&quot;</span>, language)</span><br><span class="line">print(<span class="string">&quot;birthday =&quot;</span>, birthday)</span><br><span class="line">print(<span class="string">&quot;info =&quot;</span>, info)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">+ 运算符可以将多个修了连接起来，相当于在第一个列表的末尾添加了另一个列表</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>append() 方法添加元素</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">listname.append(obj)</span><br><span class="line"><span class="comment"># 用于在列表的末尾追加元素，obj 可以是单个元素，也可以是列表、元组等</span></span><br></pre></td></tr></table></figure>
<ul>
<li>inser() 方法插入元素</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">listname.insert(index, obj)</span><br><span class="line"><span class="comment"># index 表示指定位置的索引值</span></span><br></pre></td></tr></table></figure>
<h3 id="列表修改元素">1.3.5 列表修改元素</h3>
<ul>
<li>修改单个元素</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">nums = [<span class="number">40</span>, <span class="number">36</span>, <span class="number">89</span>, <span class="number">2</span>, <span class="number">36</span>, <span class="number">100</span>, <span class="number">7</span>]</span><br><span class="line">nums[<span class="number">2</span>] = -<span class="number">26</span>  <span class="comment">#使用正数索引</span></span><br><span class="line">nums[-<span class="number">3</span>] = -<span class="number">66.2</span>  <span class="comment">#使用负数索引</span></span><br><span class="line">print(nums)</span><br></pre></td></tr></table></figure>
<ul>
<li>修改一组元素</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">nums = [<span class="number">40</span>, <span class="number">36</span>, <span class="number">89</span>, <span class="number">2</span>, <span class="number">36</span>, <span class="number">100</span>, <span class="number">7</span>]</span><br><span class="line"><span class="comment"># 修改第 1~4 个元素的值（不包括第4个元素）</span></span><br><span class="line">nums[<span class="number">1</span>: <span class="number">4</span>] = [<span class="number">45.25</span>, -<span class="number">77</span>, -<span class="number">52.5</span>]</span><br><span class="line">print(nums)</span><br><span class="line">·</span><br><span class="line">nums = [<span class="number">40</span>, <span class="number">36</span>, <span class="number">89</span>, <span class="number">2</span>, <span class="number">36</span>, <span class="number">100</span>, <span class="number">7</span>]</span><br><span class="line"><span class="comment"># 在4个位置插入元素</span></span><br><span class="line">nums[<span class="number">4</span>: <span class="number">4</span>] = [-<span class="number">77</span>, -<span class="number">52.5</span>, <span class="number">999</span>]</span><br><span class="line">print(nums)</span><br><span class="line"></span><br><span class="line">nums = [<span class="number">40</span>, <span class="number">36</span>, <span class="number">89</span>, <span class="number">2</span>, <span class="number">36</span>, <span class="number">100</span>, <span class="number">7</span>]</span><br><span class="line"><span class="comment"># 使用切片语法赋值不支持单个值，会报TypeError</span></span><br><span class="line">nums[<span class="number">4</span>: <span class="number">4</span>] = -<span class="number">77</span></span><br><span class="line"></span><br><span class="line">nums = [<span class="number">40</span>, <span class="number">36</span>, <span class="number">89</span>, <span class="number">2</span>, <span class="number">36</span>, <span class="number">100</span>, <span class="number">7</span>]</span><br><span class="line"><span class="comment"># 步长为2，为第1、3、5个元素赋值</span></span><br><span class="line">nums[<span class="number">1</span>: <span class="number">6</span>: <span class="number">2</span>] = [<span class="number">0.025</span>, -<span class="number">99</span>, <span class="number">20.5</span>]</span><br><span class="line">print(nums)</span><br></pre></td></tr></table></figure>
<h3 id="列表查找元素">1.3.6 列表查找元素</h3>
<ul>
<li>index() 方法</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">listname.index(obj,start,end)</span><br><span class="line"><span class="comment"># 查找某个元素在列表中出现的位置，不存在则报ValueError错误，查找之前最好使用count()判断一下</span></span><br><span class="line">nums = [<span class="number">40</span>, <span class="number">36</span>, <span class="number">89</span>, <span class="number">2</span>, <span class="number">36</span>, <span class="number">100</span>, <span class="number">7</span>, -<span class="number">20.5</span>, -<span class="number">999</span>]</span><br><span class="line"><span class="comment"># 检索列表中的所有元素</span></span><br><span class="line">print( nums.index(<span class="number">2</span>) )</span><br><span class="line"><span class="comment"># 检索3~7之间的元素</span></span><br><span class="line">print( nums.index(<span class="number">100</span>, <span class="number">3</span>, <span class="number">7</span>) )</span><br><span class="line"><span class="comment"># 检索4之后的元素</span></span><br><span class="line">print( nums.index(<span class="number">7</span>, <span class="number">4</span>) )</span><br><span class="line"><span class="comment"># 检索一个不存在的元素</span></span><br><span class="line">print( nums.index(<span class="number">55</span>) )</span><br></pre></td></tr></table></figure>
<ul>
<li>count() 方法：统计某个元素在列表中出现的次数</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">listname.count(obj)</span><br><span class="line"><span class="comment"># count() 防回0，则表示列表中不存在该元素</span></span><br></pre></td></tr></table></figure>
<h2 id="tuple">1.4 tuple</h2>
<h3 id="创建元组">1.4.1 创建元组</h3>
<ul>
<li>使用 () 直接创建</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tuplename = (element1, element2, ... )</span><br></pre></td></tr></table></figure>
<ul>
<li>使用 tuple() 函数创建元组</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">tuple</span>(data)</span><br><span class="line"><span class="comment"># data 表示可以转化为元组的数据，包括字符串、元组、range 对象等</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将字符串转换成元组</span></span><br><span class="line">tup1 = <span class="built_in">tuple</span>(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line">print(tup1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将列表转换成元组</span></span><br><span class="line">list1 = [<span class="string">&#x27;Python&#x27;</span>, <span class="string">&#x27;Java&#x27;</span>, <span class="string">&#x27;C++&#x27;</span>, <span class="string">&#x27;JavaScript&#x27;</span>]</span><br><span class="line">tup2 = <span class="built_in">tuple</span>(list1)</span><br><span class="line">print(tup2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将字典转换成元组</span></span><br><span class="line">dict1 = &#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">100</span>, <span class="string">&#x27;b&#x27;</span>:<span class="number">42</span>, <span class="string">&#x27;c&#x27;</span>:<span class="number">9</span>&#125;</span><br><span class="line">tup3 = <span class="built_in">tuple</span>(dict1)</span><br><span class="line">print(tup3)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将区间转换成元组</span></span><br><span class="line">range1 = <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">6</span>)</span><br><span class="line">tup4 = <span class="built_in">tuple</span>(range1)</span><br><span class="line">print(tup4)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建空元组</span></span><br><span class="line">print(<span class="built_in">tuple</span>())</span><br></pre></td></tr></table></figure>
<p>​ 运行结果</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">(<span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;o&#x27;</span>)</span><br><span class="line">(<span class="string">&#x27;Python&#x27;</span>, <span class="string">&#x27;Java&#x27;</span>, <span class="string">&#x27;C++&#x27;</span>, <span class="string">&#x27;JavaScript&#x27;</span>)</span><br><span class="line">(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>)</span><br><span class="line">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line">()</span><br></pre></td></tr></table></figure>
<h3 id="访问元组元素">1.4.2 访问元组元素</h3>
<ul>
<li>使用索引访问元组元素</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tuplename[i]</span><br></pre></td></tr></table></figure>
<ul>
<li>使用切片访问元组元素</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tuplename[start: end: step]</span><br></pre></td></tr></table></figure>
<h3 id="修改元组">1.4.3 修改元组</h3>
<p>元组是不可变序列，元组中的元素不能被修改</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tup = (<span class="number">100</span>, <span class="number">0.5</span>, -<span class="number">36</span>, <span class="number">73</span>)</span><br><span class="line">print(tup)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用新的元组去替代旧的元组</span></span><br><span class="line">tup = (<span class="string">&#x27;Shell脚本&#x27;</span>,<span class="string">&quot;http://c.biancheng.net/shell/&quot;</span>)</span><br><span class="line">print(tup)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 + 运算符拼接形成新的元组</span></span><br></pre></td></tr></table></figure>
<h3 id="删除元组">1.4.4 删除元组</h3>
<ul>
<li>del 关键字</li>
</ul>
<h2 id="dict">1.5 dict</h2>
<p>dict 是一种无序的、可变的序列，他的元素以“键值对（key - value）”的形式存储</p>
<p><img src="https://s3.ax1x.com/2020/11/30/Dg2hm6.gif" alt="reflect1" style="zoom:80%;" /></p>
<center>
Fig. 1-1 字典数据结构
</center>
<h3 id="创建字典">1.5.1 创建字典</h3>
<ul>
<li>使用 {} 创建字典</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dictname = &#123;<span class="string">&#x27;key&#x27;</span>:<span class="string">&#x27;value1&#x27;</span>, <span class="string">&#x27;key2&#x27;</span>:<span class="string">&#x27;value2&#x27;</span>, ..., <span class="string">&#x27;keyn&#x27;</span>:valuen&#125;</span><br><span class="line"><span class="comment"># 同义字典中的各个键必须唯一，不能重复</span></span><br></pre></td></tr></table></figure>
<ul>
<li>通过 fromkeys() 方法创建字典</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dictname = <span class="built_in">dict</span>.fromkeys(<span class="built_in">list</span>, value = <span class="literal">None</span>)</span><br><span class="line"><span class="comment"># list 参数表示字典中的所有键的列表，value参数表示默认值，如果不写，则为空值None</span></span><br><span class="line"></span><br><span class="line">knowledge = &#123;<span class="string">&#x27;语文&#x27;</span>, <span class="string">&#x27;数学&#x27;</span>, <span class="string">&#x27;英语&#x27;</span>&#125;</span><br><span class="line">scores = <span class="built_in">dict</span>.fromkeys(knowledge, <span class="number">60</span>)</span><br><span class="line">print(scores)</span><br></pre></td></tr></table></figure>
<ul>
<li>通过 dict() 映射函数创建字典</li>
</ul>
<center>
表1-1 dict() 函数创建字典
</center>
<table>
<colgroup>
<col style="width: 50%" />
<col style="width: 50%" />
</colgroup>
<thead>
<tr class="header">
<th>创建格式</th>
<th>注意事项</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>a = dict(str1=value1, str2=value2, str3=value3)</td>
<td>str 表示字符串类型的键，value 表示键对应的值。使用此方式创建字典时，字符串不能带引号。</td>
</tr>
<tr class="even">
<td>#方式1<br />demo = [('two',2), ('one',1), ('three',3)] <br />#方式2<br /> demo = [['two',2], ['one',1], ['three',3]] <br />#方式3 <br />demo = (('two',2), ('one',1), ('three',3)) <br />#方式4 <br />demo = (['two',2], ['one',1], ['three',3]) a = dict(demo)</td>
<td>向 dict() 函数传入列表或元组，而它们中的元素又各自是包含 2 个元素的列表或元组，其中第一个元素作为键，第二个元素作为值。</td>
</tr>
<tr class="odd">
<td>keys = ['one', 'two', 'three'] <br />#还可以是字符串或元组 <br />values = [1, 2, 3] <br />#还可以是字符串或元组 <br />a = dict( zip(keys, values) )</td>
<td>通过应用 dict() 函数和 zip() 函数，可将前两个列表转换为对应的字典。</td>
</tr>
</tbody>
</table>
<p>如果不为 dict() 函数传入任何参数，则表示创建空字典</p>
<h3 id="访问字典">1.5.2 访问字典</h3>
<ul>
<li>利用索引</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dictname[key]</span><br><span class="line"><span class="comment"># 由于字典中的元素是无序的，每个元素的位置都不固定，所以字典也不能像列表和元组那样，采用切片的方式一次性访问多个元素</span></span><br><span class="line"></span><br><span class="line">tup = ([<span class="string">&#x27;two&#x27;</span>,<span class="number">26</span>], [<span class="string">&#x27;one&#x27;</span>,<span class="number">88</span>], [<span class="string">&#x27;three&#x27;</span>,<span class="number">100</span>], [<span class="string">&#x27;four&#x27;</span>,-<span class="number">59</span>])</span><br><span class="line">dic = <span class="built_in">dict</span>(tup)</span><br><span class="line">print(dic[<span class="string">&#x27;one&#x27;</span>])  <span class="comment">#键存在</span></span><br><span class="line">print(dic[<span class="string">&#x27;five&#x27;</span>])  <span class="comment">#键不存在</span></span><br></pre></td></tr></table></figure>
<p>​ 运行结果</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">88</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">    File <span class="string">&quot;C:\Users\mozhiyan\Desktop\demo.py&quot;</span>, line <span class="number">4</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">        print(dic[<span class="string">&#x27;five&#x27;</span>])  <span class="comment">#键不存在</span></span><br><span class="line">KeyError: <span class="string">&#x27;five&#x27;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>get() 方法</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dictname.get(key[,default])</span><br><span class="line"><span class="comment"># default 用于指定要查询的键不存在时，此方法返回的默认值，如果不指定，则返回 None</span></span><br><span class="line"></span><br><span class="line">a = <span class="built_in">dict</span>(two=<span class="number">0.65</span>, one=<span class="number">88</span>, three=<span class="number">100</span>, four=-<span class="number">59</span>)</span><br><span class="line">print( a.get(<span class="string">&#x27;one&#x27;</span>) )</span><br><span class="line">print( a.get(<span class="string">&#x27;five&#x27;</span>, <span class="string">&#x27;该键不存在&#x27;</span>) )</span><br></pre></td></tr></table></figure>
<p>​ 运行结果</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">88</span></span><br><span class="line">该键不存在</span><br></pre></td></tr></table></figure>
<h3 id="字典操作">1.6.3 字典操作</h3>
<ul>
<li>删除字典</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">del</span> dictname</span><br></pre></td></tr></table></figure>
<ul>
<li>添加键值对</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dictname[key] = value</span><br></pre></td></tr></table></figure>
<ul>
<li>修改键值对</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dictname[key] = new value</span><br><span class="line"><span class="comment"># key值不能被修改，只能修改value</span></span><br></pre></td></tr></table></figure>
<ul>
<li>删除键值对</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">del</span> dictname[key]</span><br></pre></td></tr></table></figure>
<ul>
<li>判断字典中是否存在指定键值对( in 或 not in 运算符)</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = &#123;<span class="string">&#x27;数学&#x27;</span>: <span class="number">95</span>, <span class="string">&#x27;语文&#x27;</span>: <span class="number">89</span>, <span class="string">&#x27;英语&#x27;</span>: <span class="number">90</span>&#125;</span><br><span class="line"><span class="comment"># 判断 a 中是否包含名为&#x27;数学&#x27;的key</span></span><br><span class="line">print(<span class="string">&#x27;数学&#x27;</span> <span class="keyword">in</span> a) <span class="comment"># True</span></span><br><span class="line"><span class="comment"># 判断 a 是否包含名为&#x27;物理&#x27;的key</span></span><br><span class="line">print(<span class="string">&#x27;物理&#x27;</span> <span class="keyword">in</span> a) <span class="comment"># False</span></span><br></pre></td></tr></table></figure>
<p>​ 运行结果</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure>
<h3 id="字典方法">1.6.4 字典方法</h3>
<ul>
<li><p>keys() : 返回字典的所有key</p></li>
<li><p>values() : 返回字典所有键值对应的value</p></li>
<li><p>items() : 防回字典中所有的键值对</p></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">scores = &#123;<span class="string">&#x27;数学&#x27;</span>: <span class="number">95</span>, <span class="string">&#x27;语文&#x27;</span>: <span class="number">89</span>, <span class="string">&#x27;英语&#x27;</span>: <span class="number">90</span>&#125;</span><br><span class="line">print(scores.keys())</span><br><span class="line">print(scores.values())</span><br><span class="line">print(scores.items())</span><br></pre></td></tr></table></figure>
<p>​ 运行结果</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dict_keys([<span class="string">&#x27;数学&#x27;</span>, <span class="string">&#x27;语文&#x27;</span>, <span class="string">&#x27;英语&#x27;</span>])</span><br><span class="line">dict_values([<span class="number">95</span>, <span class="number">89</span>, <span class="number">90</span>])</span><br><span class="line">dict_items([(<span class="string">&#x27;数学&#x27;</span>, <span class="number">95</span>), (<span class="string">&#x27;语文&#x27;</span>, <span class="number">89</span>), (<span class="string">&#x27;英语&#x27;</span>, <span class="number">90</span>)])</span><br><span class="line"><span class="comment"># keys()、values() 和 items() 返回值的类型分别为 dict_keys、dict_values 和 dict_items</span></span><br></pre></td></tr></table></figure>
<p>在 Python 2.x 中，上面三个方法的返回值都是列表（list）类型。但在 Python 3.x 中，它们的返回值并不是我们常见的列表或者元组类型，因为 Python 3.x 不希望用户直接操作这几个方法的返回值。</p>
<p>在 Python 3.x 中如果想使用这三个方法返回的数据，一般有下面两种方案：</p>
<ol type="1">
<li>使用 list() 函数，将他们转化为列表</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = &#123;<span class="string">&#x27;数学&#x27;</span>: <span class="number">95</span>, <span class="string">&#x27;语文&#x27;</span>: <span class="number">89</span>, <span class="string">&#x27;英语&#x27;</span>: <span class="number">90</span>&#125;</span><br><span class="line">b = <span class="built_in">list</span>(a.keys())</span><br><span class="line">print(b)</span><br></pre></td></tr></table></figure>
<p>​ 运行结果</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[<span class="string">&#x27;数学&#x27;</span>, <span class="string">&#x27;语文&#x27;</span>, <span class="string">&#x27;英语&#x27;</span>]</span><br></pre></td></tr></table></figure>
<ol start="2" type="1">
<li>使用 for in 循环遍历</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = &#123;<span class="string">&#x27;数学&#x27;</span>: <span class="number">95</span>, <span class="string">&#x27;语文&#x27;</span>: <span class="number">89</span>, <span class="string">&#x27;英语&#x27;</span>: <span class="number">90</span>&#125;</span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> a.keys():</span><br><span class="line">    print(k,end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">print(<span class="string">&quot;\n---------------&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> v <span class="keyword">in</span> a.values():</span><br><span class="line">    print(v,end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">print(<span class="string">&quot;\n---------------&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> k,v <span class="keyword">in</span> a.items():</span><br><span class="line">    print(<span class="string">&quot;key:&quot;</span>,k,<span class="string">&quot; value:&quot;</span>,v)</span><br></pre></td></tr></table></figure>
<p>​ 运行结果</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">数学 语文 英语</span><br><span class="line">---------------</span><br><span class="line"><span class="number">95</span> <span class="number">89</span> <span class="number">90</span></span><br><span class="line">---------------</span><br><span class="line">key: 数学  value: <span class="number">95</span></span><br><span class="line">key: 语文  value: <span class="number">89</span></span><br><span class="line">key: 英语  value: <span class="number">90</span></span><br></pre></td></tr></table></figure>
<ul>
<li>update() 方法</li>
</ul>
<p>update方法可以使用一个字典所包含的简直对来更新已有的字典。</p>
<p>在执行 update（）方法是，如果被更新的字典中已包含对应的键值对，那么原 value会被覆盖；如果不包含对应的键值对，则该键值对被添加进去</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = &#123;<span class="string">&#x27;one&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;two&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;three&#x27;</span>: <span class="number">3</span>&#125;</span><br><span class="line">a.update(&#123;<span class="string">&#x27;one&#x27;</span>:<span class="number">4.5</span>, <span class="string">&#x27;four&#x27;</span>: <span class="number">9.3</span>&#125;)</span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure>
<p>​ 运行结果</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&#x27;one&#x27;</span>: <span class="number">4.5</span>, <span class="string">&#x27;two&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;three&#x27;</span>: <span class="number">3</span>, <span class="string">&#x27;four&#x27;</span>: <span class="number">9.3</span>&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>pop() 和 popitem() 方法</li>
</ul>
<p>都是用来删除字典中键值对，不同的是，pop() 用来删除指定的键值对，而 popitem() 用来随机删除一个键值对</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dictname.pop(key)</span><br><span class="line">dictname.popitem()</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = &#123;<span class="string">&#x27;数学&#x27;</span>: <span class="number">95</span>, <span class="string">&#x27;语文&#x27;</span>: <span class="number">89</span>, <span class="string">&#x27;英语&#x27;</span>: <span class="number">90</span>, <span class="string">&#x27;化学&#x27;</span>: <span class="number">83</span>, <span class="string">&#x27;生物&#x27;</span>: <span class="number">98</span>, <span class="string">&#x27;物理&#x27;</span>: <span class="number">89</span>&#125;</span><br><span class="line">print(a)</span><br><span class="line">a.pop(<span class="string">&#x27;化学&#x27;</span>)</span><br><span class="line">print(a)</span><br><span class="line">a.popitem()</span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure>
<p>​ 运行结果</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&#x27;数学&#x27;</span>: <span class="number">95</span>, <span class="string">&#x27;语文&#x27;</span>: <span class="number">89</span>, <span class="string">&#x27;英语&#x27;</span>: <span class="number">90</span>, <span class="string">&#x27;化学&#x27;</span>: <span class="number">83</span>, <span class="string">&#x27;生物&#x27;</span>: <span class="number">98</span>, <span class="string">&#x27;物理&#x27;</span>: <span class="number">89</span>&#125;</span><br><span class="line">&#123;<span class="string">&#x27;数学&#x27;</span>: <span class="number">95</span>, <span class="string">&#x27;语文&#x27;</span>: <span class="number">89</span>, <span class="string">&#x27;英语&#x27;</span>: <span class="number">90</span>, <span class="string">&#x27;生物&#x27;</span>: <span class="number">98</span>, <span class="string">&#x27;物理&#x27;</span>: <span class="number">89</span>&#125;</span><br><span class="line">&#123;<span class="string">&#x27;数学&#x27;</span>: <span class="number">95</span>, <span class="string">&#x27;语文&#x27;</span>: <span class="number">89</span>, <span class="string">&#x27;英语&#x27;</span>: <span class="number">90</span>, <span class="string">&#x27;生物&#x27;</span>: <span class="number">98</span>&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>setdefault() 方法：返回某个 key 对应的 value</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dictname.setdefault(key, defaultvalue)</span><br><span class="line"><span class="comment"># defaultvalue 表示默认值（可以不写，不写的话是 None）</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">当指定的 key 不存在时，setdefault() 会先为这个不存在的 key 设置一个默认的 defaultvalue，然后再返回 defaultvalue</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">也就是说，setdefault() 方法总能返回指定 key 对应的 value：</span></span><br><span class="line"><span class="string">1) 如果该 key 存在，那么直接返回该 key 对应的 value；</span></span><br><span class="line"><span class="string">2) 如果该 key 不存在，那么先为该 key 设置默认的 defaultvalue，然后再返回该 key 对应的 defaultvalue。</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<h3 id="字典拷贝">1.6.5 字典拷贝</h3>
<p>copy() 返回一个字典的拷贝，即一个具有相同键值对的新字典</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = &#123;<span class="string">&#x27;one&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;two&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;three&#x27;</span>: [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]&#125;</span><br><span class="line">b = a.copy()</span><br><span class="line">print(b)</span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>​ 运行结果</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&#x27;one&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;two&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;three&#x27;</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]&#125;</span><br></pre></td></tr></table></figure>
<p>copy() 方法所遵循的拷贝原理，既有深拷贝，也有浅拷贝。</p>
<p>拿拷贝字典 a 为例，copy() 方法只会对最表层的键值对进行深拷贝，也就是说，它会再申请一块内存用来存放 {'one': 1, 'two': 2, 'three': []}；而对于某些列表类型的值来说，此方法对其做的是浅拷贝，也就是说，b 中的 [1,2,3] 的值不是自己独有，而是和 a 共有。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = &#123;<span class="string">&#x27;one&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;two&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;three&#x27;</span>: [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]&#125;</span><br><span class="line">b = a.copy()</span><br><span class="line"><span class="comment"># 向 a 中添加新键值对，由于b已经提前将 a 所有键值对都深拷贝过来，因此 a 添加新键值对，不会影响 b。</span></span><br><span class="line"></span><br><span class="line">a[<span class="string">&#x27;four&#x27;</span>]=<span class="number">100</span></span><br><span class="line">print(a)</span><br><span class="line">print(b)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 由于 b 和 a 共享[1,2,3]（浅拷贝），因此移除 a 中列表中的元素，也会影响 b。</span></span><br><span class="line">a[<span class="string">&#x27;three&#x27;</span>].remove(<span class="number">1</span>)</span><br><span class="line">print(a)</span><br><span class="line">print(b)</span><br></pre></td></tr></table></figure>
<p>​ 运行结果</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&#x27;one&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;two&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;three&#x27;</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="string">&#x27;four&#x27;</span>: <span class="number">100</span>&#125;</span><br><span class="line">&#123;<span class="string">&#x27;one&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;two&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;three&#x27;</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]&#125;</span><br><span class="line">&#123;<span class="string">&#x27;one&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;two&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;three&#x27;</span>: [<span class="number">2</span>, <span class="number">3</span>], <span class="string">&#x27;four&#x27;</span>: <span class="number">100</span>&#125;</span><br><span class="line">&#123;<span class="string">&#x27;one&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;two&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;three&#x27;</span>: [<span class="number">2</span>, <span class="number">3</span>]&#125;</span><br></pre></td></tr></table></figure>
<h2 id="set">1.6 set</h2>
<p>同一集合中，只能存储 <strong>不可变</strong> 的数据类型，包括整形、浮点型、字符串、元组，无法存储列表、字典、集合这些<strong>可变</strong> 的数据类型，否则会抛出 TypeError 错误。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;element1,element2,...,elementn&#125;</span><br><span class="line"><span class="comment"># Python 中有两种集合类型，一种是 set 类型的集合，另一种是 frozenset 类型的集合，它们唯一的区别是，set 类型集合可以做添加、删除元素的操作，而 forzenset 类型集合不行</span></span><br></pre></td></tr></table></figure>
<h3 id="创建-set-集合">1.6.1 创建 set 集合</h3>
<ul>
<li>使用 {} 创建</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">setname = &#123;element1,element2,...&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>set() 函数创建集合</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">setname = <span class="built_in">set</span>(iteration)</span><br><span class="line"></span><br><span class="line"><span class="comment"># for example</span></span><br><span class="line">set1 = <span class="built_in">set</span>(<span class="string">&quot;c.biancheng.net&quot;</span>)</span><br><span class="line">set2 = <span class="built_in">set</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>])</span><br><span class="line">set3 = <span class="built_in">set</span>((<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>))</span><br><span class="line">print(<span class="string">&quot;set1:&quot;</span>,set1)</span><br><span class="line">print(<span class="string">&quot;set2:&quot;</span>,set2)</span><br><span class="line">print(<span class="string">&quot;set3:&quot;</span>,set3)</span><br></pre></td></tr></table></figure>
<p>​ 运行结果</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">set1: &#123;<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;t&#x27;</span>, <span class="string">&#x27;i&#x27;</span>, <span class="string">&#x27;e&#x27;</span>&#125;</span><br><span class="line">set2: &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">set3: &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br></pre></td></tr></table></figure>
<h3 id="遍历-set-集合元素">1.6.2 遍历 set 集合元素</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = &#123;<span class="number">1</span>,<span class="string">&#x27;c&#x27;</span>,<span class="number">1</span>,(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>),<span class="string">&#x27;c&#x27;</span>&#125;</span><br><span class="line"><span class="keyword">for</span> ele <span class="keyword">in</span> a:</span><br><span class="line">    print(ele,end=<span class="string">&#x27; &#x27;</span>)</span><br></pre></td></tr></table></figure>
<h3 id="删除-set-集合">1.6.3 删除 set 集合</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = &#123;<span class="number">1</span>,<span class="string">&#x27;c&#x27;</span>,<span class="number">1</span>,(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>),<span class="string">&#x27;c&#x27;</span>&#125;</span><br><span class="line">print(a)</span><br><span class="line"><span class="keyword">del</span>(a)</span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure>
<h3 id="集合的基本操作">1.6.4 集合的基本操作</h3>
<ul>
<li>添加元素</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">setname.add(element)</span><br><span class="line"><span class="comment"># 使用 add() 方法添加的元素，只能是数字、字符串、元组或者布尔类型（True 和 False）值，不能添加列表、字典、集合这类可变的数据，否则 Python 解释器会报 TypeError 错误</span></span><br></pre></td></tr></table></figure>
<ul>
<li>删除指定元素</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">setname.remove(element)</span><br></pre></td></tr></table></figure>
<ul>
<li>布尔运算（交集、并集、差集以及对称差集运算）</li>
</ul>
<p><img src="https://s3.ax1x.com/2020/11/30/DgR9hQ.gif" alt="booleanpic" style="zoom:80%;" /></p>
<center>
Fig. 1-2 集合的布尔运算
</center>
<center>
表 1-2 集合的布尔运算
</center>
<table>
<thead>
<tr class="header">
<th>运算操作</th>
<th>Python运算符</th>
<th>含义</th>
<th>例子</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>交集</td>
<td>&amp;</td>
<td>取两集合公共的元素</td>
<td>&gt;&gt;&gt; set1 &amp; set2 {3}</td>
</tr>
<tr class="even">
<td>并集</td>
<td>|</td>
<td>取两集合全部的元素</td>
<td>&gt;&gt;&gt; set1 | set2 {1,2,3,4,5}</td>
</tr>
<tr class="odd">
<td>差集</td>
<td>-</td>
<td>取一个集合中另一集合没有的元素</td>
<td>&gt;&gt;&gt; set1 - set2 {1,2}</td>
</tr>
<tr class="even">
<td>对称差集</td>
<td>^</td>
<td>取集合 A 和 B 中不属于 A&amp;B 的元素</td>
<td>&gt;&gt;&gt; set1 ^ set2 {1,2,4,5}</td>
</tr>
</tbody>
</table>
<h3 id="set-集合方法详解">1.6.5 set 集合方法详解</h3>
<p><a href="http://c.biancheng.net/view/4402.html">set 集合方法详解</a></p>
<h1 id="python-函数操作">2. Python 函数操作</h1>
<h2 id="系统函数">2.1 系统函数</h2>
<h3 id="input">2.1.1 input()</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">str</span> = <span class="built_in">input</span>(tipmsg)</span><br></pre></td></tr></table></figure>
<ul>
<li>str 表示一个字符串类型的变量，input 会将读取到的字符串放入 str 中</li>
<li>tipmsg 表示提示信息，它会显示在控制台上，告诉用户应该输入什么样的内容；如果不写 tipmsg，就不会有任何提示信息</li>
</ul>
<h3 id="pirnt">2.1.2 pirnt()</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(value,..., sep =<span class="string">&#x27;&#x27;</span>, end = <span class="string">&#x27;\n&#x27;</span>, file = sys.stdout, flush = <span class="literal">False</span>)</span><br></pre></td></tr></table></figure>
<p>value 参数可以接受任意多个变量或值，如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">user_name = <span class="string">&#x27;Charlie&#x27;</span></span><br><span class="line">user_age = <span class="number">8</span></span><br><span class="line"><span class="comment">#同时输出多个变量和字符串</span></span><br><span class="line">print(<span class="string">&quot;读者名：&quot;</span>,user_name,<span class="string">&quot;年龄：&quot;</span>,user_age, sep = <span class="string">&#x27;|&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h2 id="字符串方法">2.2 字符串方法</h2>
<h3 id="字符串拼接">2.2.1 字符串拼接</h3>
<ul>
<li>字符串和数字的拼接</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">str</span>(obj)</span><br><span class="line"><span class="built_in">repr</span>(obj)</span><br><span class="line"><span class="comment">#  Python 不允许直接拼接数字和字符串，需要借助str() 和 repr() 函数将数字转换为字符串</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<p><strong>str() 和 repr() 的区别</strong></p>
<p>str() 和 repr() 函数虽然都可以将数字转换成字符串，但它们之间是有区别的： 1) str() 将数据转换成适合人类阅读的字符串形式 2) repr() 将数据转换成适合解释器阅读的字符串形式（Python 表达式的形式），适合在开发和调试阶段使用；如果没有等价的语法，则会发生 SyntaxError 异常。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = <span class="string">&quot;http://c.biancheng.net/shell/&quot;</span></span><br><span class="line">s_str = <span class="built_in">str</span>(s)</span><br><span class="line">s_repr = <span class="built_in">repr</span>(s)</span><br><span class="line">print( <span class="built_in">type</span>(s_str) )</span><br><span class="line"><span class="built_in">print</span> (s_str)</span><br><span class="line">print( <span class="built_in">type</span>(s_repr) )</span><br><span class="line"><span class="built_in">print</span> (s_repr)</span><br></pre></td></tr></table></figure>
<p>​ 运行结果</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">str</span>&#x27;&gt;</span></span><br><span class="line"><span class="class"><span class="title">http</span>:</span>//c.biancheng.net/shell/</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">str</span>&#x27;&gt;</span></span><br><span class="line"><span class="class">&#x27;<span class="title">http</span>:</span>//c.biancheng.net/shell/<span class="string">&#x27;</span></span><br></pre></td></tr></table></figure>
<h3 id="截取字符串">2.2.2 截取字符串</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">strname[index]</span><br><span class="line">strname[start : end : step]</span><br></pre></td></tr></table></figure>
<h3 id="len">2.2.3 len()</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">len</span>（<span class="built_in">str</span>）</span><br><span class="line"><span class="comment"># 在 Python 中，不同的字符所占的字节数不同，数字、英文字母、小数点、下划线以及空格，各占一个字节，而一个汉字可能占 2~4 个字节，具体占多少个，取决于采用的编码方式。例如，汉字在 GBK/GB2312 编码中占用 2 个字节，而在 UTF-8 编码中一般占用 3 个字节</span></span><br></pre></td></tr></table></figure>
<p><img src="https://s3.ax1x.com/2020/11/30/DgRPpj.gif" /></p>
<center>
图 2-1 UTF-8
</center>
<h3 id="split">2.2.4 split()</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">str</span>.split(sep,maxsplit)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">str: 表示要分割的字符串</span></span><br><span class="line"><span class="string">sep: 用于指定分隔符，可以包含多个字符，默认为 None，表示所有空字符</span></span><br><span class="line"><span class="string">maxsplit：可选参数，用于指定分割的次数，最后列表中子串的个数最多为 maxsplit+1。如果不指定或者指定为 -1，则表示分割次数没有限制。</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<h3 id="join">2.2.5 join()</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">newstr = <span class="built_in">str</span>.join(iterable)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">newstr：表示合并后生成的新字符串；</span></span><br><span class="line"><span class="string">str：用于指定合并时的分隔符；</span></span><br><span class="line"><span class="string">iterable：做合并操作的源字符串数据，允许以列表、元组等形式提供。</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">list</span> = [<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;biancheng&#x27;</span>,<span class="string">&#x27;net&#x27;</span>]</span><br><span class="line"><span class="string">&#x27;.&#x27;</span>.join(<span class="built_in">list</span>)</span><br><span class="line"><span class="comment"># 运行结果： &#x27;c.biancheng.net&#x27;</span></span><br></pre></td></tr></table></figure>
<h3 id="count">2.2.6 count()</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">str</span>.count(sub[,start[,end]])</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">str：表示原字符串；</span></span><br><span class="line"><span class="string">sub：表示要检索的字符串；</span></span><br><span class="line"><span class="string">start：指定检索的起始位置，也就是从什么位置开始检测。如果不指定，默认从头开始检索；</span></span><br><span class="line"><span class="string">end：指定检索的终止位置，如果不指定，则表示一直检索到结尾。</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">str</span> = <span class="string">&quot;c.biancheng.net&quot;</span></span><br><span class="line"><span class="built_in">str</span>.count(<span class="string">&#x27;.&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h3 id="find">2.2.7 find()</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">str</span>.find(sub[,start[,end]])</span><br></pre></td></tr></table></figure>
<h3 id="index">2.2.8 index()</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">str</span>.index(sub[,start[,end]])</span><br><span class="line"><span class="comment"># 同 find() 方法类似，index() 方法也可以用于检索是否包含指定的字符串，不同之处在于，当指定的字符串不存在时，index() 方法会抛出异常</span></span><br></pre></td></tr></table></figure>
<h3 id="对齐">2.2.9 对齐</h3>
<ul>
<li>ljust()</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">S.ljust(width[, fillchar])</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">S：表示要进行填充的字符串；</span></span><br><span class="line"><span class="string">width：表示包括本身长度在内，字符串要占的总长度；</span></span><br><span class="line"><span class="string">fillchar：作为可选参数，用来指定填充字符串时所用的字符，默认情况使用空格。</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>rjust()</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">S.rjust(width[, fillchar])</span><br></pre></td></tr></table></figure>
<ul>
<li>center()</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">S.center(width[, fillchar])</span><br></pre></td></tr></table></figure>
<h3 id="startswith-和-endswith">2.2.10 startswith() 和 endswith()</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">str</span>.startswith(sub[,start[,end]])</span><br><span class="line"><span class="comment"># 检索字符串是否以指定字符串开头，如果是返回 True；反之返回 False</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">str</span>.endswith(sub[,start[,end]])</span><br><span class="line"><span class="comment"># endswith() 方法用于检索字符串是否以指定字符串结尾，如果是则返回 True；反之则返回 False</span></span><br></pre></td></tr></table></figure>
<h3 id="大小写转换">2.2.11 大小写转换</h3>
<ul>
<li>title()</li>
<li>lower()</li>
<li>upper()</li>
</ul>
<h3 id="strip">2.2.12 strip()</h3>
<ul>
<li>strip()：删除串前后（左右两侧）的空格或特殊字符</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">str</span> = <span class="string">&quot;  c.biancheng.net \t\n\r&quot;</span></span><br><span class="line"><span class="built_in">str</span>.strip()</span><br><span class="line"><span class="comment"># &#x27;c.biancheng.net&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">str</span>.strip(<span class="string">&quot; ,\r&quot;</span>)</span><br><span class="line"><span class="comment"># &#x27;c.biancheng.net \t\n&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">str</span></span><br><span class="line"><span class="comment"># &#x27;  c.biancheng.net \t\n\r&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># strip() 并没有改变字符本身</span></span><br></pre></td></tr></table></figure>
<ul>
<li>lstrip()：删除字符串前面（左边）的空格或特殊字符</li>
<li>rstrip()：删除字符串后面（右边）的空格或特殊字符</li>
</ul>
<h3 id="format">2.2.13 format()</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">str</span>.<span class="built_in">format</span>(args)</span><br><span class="line"><span class="comment"># str 用于指定字符串的显示样式；args 用于指定要进行格式转换的项，如果有多项，之间有逗号进行分割</span></span><br></pre></td></tr></table></figure>
<p>学习 format() 方法的难点，在于搞清楚 str 显示样式的书写格式。在创建显示样式模板时，需要使用<code>&#123;&#125;</code>和<code>：</code>来指定占位符，其完整的语法格式为：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123; [index][ : [ [fill] align] [sign] [<span class="comment">#] [width] [.precision] [type] ] &#125;</span></span><br></pre></td></tr></table></figure>
<p>具体参照：<a href="http://c.biancheng.net/view/4301.html">format完整</a></p>
<h3 id="encode-和-decode">2.2.14 encode() 和 decode()</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">str</span>.encode([encoding=<span class="string">&quot;utf-8&quot;</span>][,errors=<span class="string">&quot;strict&quot;</span>])</span><br><span class="line"><span class="comment"># encoding=&quot;GBK&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">bytes</span>.decode([encoding=<span class="string">&quot;utf-8&quot;</span>][,errors=<span class="string">&quot;strict&quot;</span>])</span><br></pre></td></tr></table></figure>
<center>
表 2-2 encode() 参数
</center>
<table>
<colgroup>
<col style="width: 23%" />
<col style="width: 76%" />
</colgroup>
<thead>
<tr class="header">
<th>参数</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>str</td>
<td>表示要进行转换的字符串。</td>
</tr>
<tr class="even">
<td>encoding = "utf-8"</td>
<td>指定进行编码时采用的字符编码，该选项默认采用 utf-8 编码。例如，如果想使用简体中文，可以设置 gb2312。<br /> 当方法中只使用这一个参数时，可以省略前边的“encoding=”，直接写编码格式，例如 str.encode("UTF-8")。</td>
</tr>
<tr class="odd">
<td>errors = "strict"</td>
<td>指定错误处理方式，其可选择值可以是：<br />1) strict：遇到非法字符就抛出异常。<br />2) ignore：忽略非法字符。<br />3) replace：用“？”替换非法字符。<br />4) xmlcharrefreplace：使用 xml 的字符引用。该参数的默认值为 strict。</td>
</tr>
</tbody>
</table>
<h3 id="dir-和-help">2.2.15 dir() 和 help()</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">dir</span>(obj)</span><br><span class="line"><span class="built_in">help</span>(obj)</span><br></pre></td></tr></table></figure>
<h1 id="python-运算符">3. Python 运算符</h1>
<h2 id="escape-character">3.1 Escape character</h2>
<p>转义字符以 <code>\0、\x</code> 开头，以 <code>\x</code> 开头表示后跟十六进制形势的编码值，Python中的转义字符只能使用八进制或十六进制</p>
<p>ASCII编码共收录了128个字符，<code>\0</code> 、<code>\x</code> 后面最多只能跟两位数字，所以八进制形势并不能表示所有的ASCII字符，只有十六进制才能表示所有的ASCII字符</p>
<center>
表3-1 转义字符一览表
</center>
<table>
<thead>
<tr class="header">
<th>转义字符</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td></td>
<td>换行符，将光标位置移到下一行开头。</td>
</tr>
<tr class="even">
<td> 回车符，将光标位置移到本行开头。</td>
<td></td>
</tr>
<tr class="odd">
<td> 水平制表符，也即 Tab 键，一般相当于四个空格。</td>
<td></td>
</tr>
<tr class="even">
<td></td>
<td>蜂鸣器响铃。注意不是喇叭发声，现在的计算机很多都不带蜂鸣器了，所以响铃不一定有效。</td>
</tr>
<tr class="odd">
<td> 退格（Backspace），将光标位置移到前一列。</td>
<td></td>
</tr>
<tr class="even">
<td>\\</td>
<td>反斜线</td>
</tr>
<tr class="odd">
<td>\'</td>
<td>单引号</td>
</tr>
<tr class="even">
<td>\"</td>
<td>双引号</td>
</tr>
<tr class="odd">
<td>\</td>
<td>在字符串行尾的续行符，即一行未完，转到下一行继续写。</td>
</tr>
</tbody>
</table>
<h2 id="位运算符">3.2 位运算符</h2>
<p>位运算符是指按照数据在内存中的二进制位进行操作</p>
<center>
表3-2 位运算符一览表
</center>
<table>
<thead>
<tr class="header">
<th>位运算符</th>
<th>说明</th>
<th>适用形式</th>
<th>举例</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>&amp;</td>
<td>按位与</td>
<td>a &amp; b</td>
<td>4 &amp; 5</td>
</tr>
<tr class="even">
<td>|</td>
<td>按位或</td>
<td>a | b</td>
<td>4 | 5</td>
</tr>
<tr class="odd">
<td>^</td>
<td>按位异或</td>
<td>a ^ b</td>
<td>4 ^ 5</td>
</tr>
<tr class="even">
<td>~</td>
<td>按位取反</td>
<td>~a</td>
<td>~4</td>
</tr>
<tr class="odd">
<td>&lt;&lt;</td>
<td>按位左移</td>
<td>a &lt;&lt; b</td>
<td>4 &lt;&lt; 2，表示整数 4 按位左移 2 位</td>
</tr>
<tr class="even">
<td>&gt;&gt;</td>
<td>按位右移</td>
<td>a &gt;&gt; b</td>
<td>4 &gt;&gt; 2，表示整数 4 按位右移 2 位</td>
</tr>
</tbody>
</table>
<h2 id="比较运算符">3.3 比较运算符</h2>
<center>
表3-3 比较运算符一览表
</center>
<table>
<thead>
<tr class="header">
<th>比较运算符</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>&gt;</td>
<td>大于，如果<code>&gt;</code>前面的值大于后面的值，则返回 True，否则返回 False。</td>
</tr>
<tr class="even">
<td>&lt;</td>
<td>小于，如果<code>&lt;</code>前面的值小于后面的值，则返回 True，否则返回 False。</td>
</tr>
<tr class="odd">
<td>==</td>
<td>等于，如果<code>==</code>两边的值相等，则返回 True，否则返回 False。</td>
</tr>
<tr class="even">
<td>&gt;=</td>
<td>大于等于（等价于数学中的 ≥），如果<code>&gt;=</code>前面的值大于或者等于后面的值，则返回 True，否则返回 False。</td>
</tr>
<tr class="odd">
<td>&lt;=</td>
<td>小于等于（等价于数学中的 ≤），如果<code>&lt;=</code>前面的值小于或者等于后面的值，则返回 True，否则返回 False。</td>
</tr>
<tr class="even">
<td>!=</td>
<td>不等于（等价于数学中的 ≠），如果<code>!=</code>两边的值不相等，则返回 True，否则返回 False。</td>
</tr>
<tr class="odd">
<td>is</td>
<td>判断两个变量所引用的对象是否相同，如果相同则返回 True，否则返回 False。</td>
</tr>
<tr class="even">
<td>is not</td>
<td>判断两个变量所引用的对象是否不相同，如果不相同则返回 True，否则返回 False。</td>
</tr>
</tbody>
</table>
<ul>
<li>== 和 is 的区别</li>
</ul>
<p>== 用来比较两个变量的值是否相等，而 is 则用来比对两个变量引用的是否是同一个对象</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time  <span class="comment">#引入time模块</span></span><br><span class="line">t1 = time.gmtime() <span class="comment"># gmtime()用来获取当前时间</span></span><br><span class="line">t2 =  time.gmtime()</span><br><span class="line">print(t1 == t2) <span class="comment">#输出True</span></span><br><span class="line">print(t1 <span class="keyword">is</span> t2) <span class="comment">#输出False</span></span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">time 模块的 gmtime() 方法用来获取当前的系统时间，精确到秒级，因为程序运行非常快，所以 t1 和 t1 得到的时间是一样的。== 用来判断 t1 和 t2 的值是否相等，所以返回 True。</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<h2 id="逻辑运算符">3.4 逻辑运算符</h2>
<center>
表3-4 逻辑运算符一览表
</center>
<table>
<colgroup>
<col style="width: 9%" />
<col style="width: 27%" />
<col style="width: 7%" />
<col style="width: 55%" />
</colgroup>
<thead>
<tr class="header">
<th>逻辑运算符</th>
<th>含义</th>
<th>基本格式</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>and</td>
<td>逻辑与运算，等价于数学中的“且”</td>
<td>a and b</td>
<td>当 a 和 b 两个表达式都为真时，a and b 的结果才为真，否则为假。</td>
</tr>
<tr class="even">
<td>or</td>
<td>逻辑或运算，等价于数学中的“或”</td>
<td>a or b</td>
<td>当 a 和 b 两个表达式都为假时，a or b 的结果才是假，否则为真。</td>
</tr>
<tr class="odd">
<td>not</td>
<td>逻辑非运算，等价于数学中的“非”</td>
<td>not a</td>
<td>如果 a 为真，那么 not a 的结果为假；如果 a 为假，那么 not a 的结果为真。相当于对 a 取反。</td>
</tr>
</tbody>
</table>
<h2 id="三目运算符">3.5 三目运算符</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">max</span> = a <span class="keyword">if</span> a&gt;b <span class="keyword">else</span> b</span><br><span class="line"></span><br><span class="line"><span class="comment"># 上述代码实现如下功能</span></span><br><span class="line"><span class="keyword">if</span> a&gt;b:</span><br><span class="line">    <span class="built_in">max</span> = a;</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">max</span> = b;</span><br></pre></td></tr></table></figure>
<h2 id="数字操作符">3.6 数字操作符</h2>
<center>
表 3-5 数字操作符（优先级递减）
</center>
<table>
<thead>
<tr class="header">
<th>操作符</th>
<th>操作</th>
<th>示例</th>
<th>值</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>**</td>
<td>指数</td>
<td>2**3</td>
<td>8</td>
</tr>
<tr class="even">
<td>%</td>
<td>取模/取余数</td>
<td>22%8</td>
<td>6</td>
</tr>
<tr class="odd">
<td>//</td>
<td>整除/商数取整</td>
<td>22//8</td>
<td>2</td>
</tr>
<tr class="even">
<td>/</td>
<td>除法</td>
<td>22/8</td>
<td>2.75</td>
</tr>
<tr class="odd">
<td>*</td>
<td>乘法</td>
<td>3*5</td>
<td>15</td>
</tr>
<tr class="even">
<td>*</td>
<td>字符串复制</td>
<td>['s'] * 4</td>
<td>['s', ',s', 's', 's']</td>
</tr>
<tr class="odd">
<td>-</td>
<td>减法</td>
<td>5-2</td>
<td>3</td>
</tr>
<tr class="even">
<td>+</td>
<td>加法</td>
<td>2+2</td>
<td>4</td>
</tr>
</tbody>
</table>
<h1 id="python-流程控制">4. Python 流程控制</h1>
<h2 id="pass">4.1 pass</h2>
<p><strong>pass</strong> 是 Python 中的关键字，用来让解释器跳过此处，什么都不做</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">age = <span class="built_in">int</span>( <span class="built_in">input</span>(<span class="string">&quot;请输入你的年龄：&quot;</span>) )</span><br><span class="line"><span class="keyword">if</span> age &lt; <span class="number">12</span> :</span><br><span class="line">    print(<span class="string">&quot;婴幼儿&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> age &gt;= <span class="number">12</span> <span class="keyword">and</span> age &lt; <span class="number">18</span>:</span><br><span class="line">    print(<span class="string">&quot;青少年&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> age &gt;= <span class="number">18</span> <span class="keyword">and</span> age &lt; <span class="number">30</span>:</span><br><span class="line">    print(<span class="string">&quot;成年人&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> age &gt;= <span class="number">30</span> <span class="keyword">and</span> age &lt; <span class="number">50</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">&quot;老年人&quot;</span>)</span><br></pre></td></tr></table></figure>
<h2 id="assert-断言">4.2 assert 断言</h2>
<p>assert 语句，又称断言语句，可看做是功能缩小版的 if 语句，用于判断某个表达式的值，如果值为真，则程序可以继续往下执行；反之，会报 AssertionError 错误</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">assert</span> 表达式</span><br><span class="line"></span><br><span class="line"><span class="comment"># 功能与下式类似</span></span><br><span class="line"><span class="keyword">if</span> 表达式==<span class="literal">True</span>:</span><br><span class="line">    程序继续执行</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    程序报 AssertionError 错误</span><br></pre></td></tr></table></figure>
<h2 id="break-和-continue">4.3 break 和 continue</h2>
<ul>
<li><p>break 语句，可以完全终止当前循环</p></li>
<li><p>continue 语句，可以跳过执行本次循环体中剩余的代码，转而执行下一次的循环</p></li>
</ul>
<h2 id="zip">4.4 zip()</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">zip</span>(iterable, ...)</span><br><span class="line"><span class="comment">#  iterable,... 表示多个列表、元组、字典、集合、字符串，甚至还可以为 range() 区间</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">my_list = [<span class="number">11</span>,<span class="number">12</span>,<span class="number">13</span>]</span><br><span class="line">my_tuple = (<span class="number">21</span>,<span class="number">22</span>,<span class="number">23</span>)</span><br><span class="line"></span><br><span class="line">print([x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">zip</span>(my_list,my_tuple)])</span><br><span class="line"></span><br><span class="line">my_dic = &#123;<span class="number">31</span>:<span class="number">2</span>,<span class="number">32</span>:<span class="number">4</span>,<span class="number">33</span>:<span class="number">5</span>&#125;</span><br><span class="line">my_set = &#123;<span class="number">41</span>,<span class="number">42</span>,<span class="number">43</span>,<span class="number">44</span>&#125;</span><br><span class="line"></span><br><span class="line">print([x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">zip</span>(my_dic)])</span><br><span class="line"></span><br><span class="line">my_pychar = <span class="string">&quot;python&quot;</span></span><br><span class="line">my_shechar = <span class="string">&quot;shell&quot;</span></span><br><span class="line"></span><br><span class="line">print([x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">zip</span>(my_pychar,my_shechar)])</span><br></pre></td></tr></table></figure>
<p>运行结果</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[(<span class="number">11</span>, <span class="number">21</span>), (<span class="number">12</span>, <span class="number">22</span>), (<span class="number">13</span>, <span class="number">23</span>)]</span><br><span class="line">[(<span class="number">31</span>,), (<span class="number">32</span>,), (<span class="number">33</span>,)]</span><br><span class="line">[(<span class="string">&#x27;p&#x27;</span>, <span class="string">&#x27;s&#x27;</span>), (<span class="string">&#x27;y&#x27;</span>, <span class="string">&#x27;h&#x27;</span>), (<span class="string">&#x27;t&#x27;</span>, <span class="string">&#x27;e&#x27;</span>), (<span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;l&#x27;</span>), (<span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;l&#x27;</span>)]</span><br></pre></td></tr></table></figure>
<h2 id="reversed">4.5 reversed()</h2>
<p>reserved() 可以返回一个给定序列的逆序序列</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将列表进行逆序</span></span><br><span class="line">print([x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">reversed</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>])])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将元组进行逆序</span></span><br><span class="line">print([x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">reversed</span>((<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>))])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将字符串进行逆序</span></span><br><span class="line">print([x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">reversed</span>(<span class="string">&quot;abcdefg&quot;</span>)])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将 range() 生成的区间列表进行逆序</span></span><br><span class="line">print([x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">reversed</span>(<span class="built_in">range</span>(<span class="number">10</span>))])</span><br></pre></td></tr></table></figure>
<p>运行结果</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[<span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br><span class="line">[<span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br><span class="line">[<span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;f&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;a&#x27;</span>]</span><br><span class="line">[<span class="number">9</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>]</span><br></pre></td></tr></table></figure>
<h2 id="sorted">4.6 sorted()</h2>
<p>sorted() 用于给序列（列表、元组、字典、集合、字符串）进行排序</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">list</span> = <span class="built_in">sorted</span>(iterable, key=<span class="literal">None</span>, reverse=<span class="literal">False</span>)  </span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">key 参数可以自定义排序规则</span></span><br><span class="line"><span class="string">reverse 参数指定以升序（False，默认）还是降序（True）进行排序</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<h1 id="python-虚拟环境">5 Python 虚拟环境</h1>
<h2 id="创建虚拟环境">5.1 创建虚拟环境</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cd D:\Demo\Python\Demo <span class="comment"># 存放虚拟环境的目录</span></span><br><span class="line">python -m venv venv <span class="comment">#创建名为 venv 的虚拟环境</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 激活虚拟环境</span></span><br><span class="line">.\venv\Scripts\activate</span><br><span class="line"></span><br><span class="line"><span class="comment"># 退出当前虚拟环境</span></span><br><span class="line">.\venv\Scripts\deactivate.bat</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Notes</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
</search>
