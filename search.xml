<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Conda channel setting</title>
    <url>/2020/11/23/Conda%20channel%20setting/</url>
    <content><![CDATA[<h1 id="show-channel">1 Show channel</h1>
<p><code>conda config --show</code>显示所有的 conda 的config 信息，<code>conda config --show channels</code>显示所有 channel 信息</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>conda config --show channels</span><br><span class="line">channels:</span><br><span class="line">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/</span><br><span class="line">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/</span><br><span class="line">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/pytorch/win-<span class="number">64</span>/</span><br><span class="line">  - defaults</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h1 id="delete-channel">2 Delete channel</h1>
<p>Using <code>conda config --remove channels</code> to delete channels from config</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">conda config --remove channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/</span><br></pre></td></tr></table></figure>
<h1 id="add-channel">3 Add channel</h1>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/</span><br><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/   </span><br><span class="line"></span><br><span class="line"><span class="comment"># 从 channel 中安装包时显示channel 的url，这样就可以知道包的安装来源</span></span><br><span class="line">conda config --<span class="built_in">set</span> show_channel_urls yes</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装确认中，不默认yes，而是由我来决定</span></span><br><span class="line">conda config --<span class="built_in">set</span> always_yes false</span><br></pre></td></tr></table></figure>
<h1 id="install-package-offline">4 Install package offline</h1>
<h3 id="conda-install">4.1 Conda install</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">conda install --offline &lt; package &gt;</span><br><span class="line"></span><br><span class="line">conda install &lt;包名&gt; <span class="comment">#安装指定包</span></span><br><span class="line">conda remove &lt;包名&gt; <span class="comment">#移除指定包</span></span><br><span class="line">conda update &lt;包名&gt; <span class="comment">#更新指定包</span></span><br></pre></td></tr></table></figure>
<h3 id="pip-install-.whl-package">4.2 pip install '.whl' package</h3>
<p>再命令行窗口用 <code>cd</code> 命令跳转到 <code>whl</code> 文件所在目录，然后使用命令：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip install ***.whl</span><br></pre></td></tr></table></figure>
<h1 id="virtual-environment">5 Virtual environment</h1>
<h2 id="steps">5.1 Steps</h2>
<ul>
<li><p>Open <code>terminal</code> or <code>Command prompt</code></p></li>
<li><p>Input <code>D:</code> to enter drive D</p></li>
<li><p>Then input <code>cd project_dir</code></p></li>
<li><p>Create a virtual environment</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python -m venv &lt;venv name&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="activate-venv">5.2 Activate venv</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">.\&lt;venv name&gt;\Scripts\activate <span class="comment"># activate venv</span></span><br><span class="line"></span><br><span class="line">.\venv\Scripts\deactivate <span class="comment"># exit the current venv</span></span><br></pre></td></tr></table></figure>
<h2 id="import-module">5.3 Import module</h2>
<ul>
<li><p>主程序和模块程序在同一目录</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">`-- src</span><br><span class="line">    |-- mod1.py</span><br><span class="line">    `-- test.py</span><br></pre></td></tr></table></figure>
<p><code>test.py</code>导入模块 <code>mod1</code>:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> mod1</span><br><span class="line"><span class="keyword">from</span> mod1 <span class="keyword">import</span> *</span><br></pre></td></tr></table></figure></li>
<li><p>主程序所在目录是模块所在目录的父(或祖辈)目录</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">`-- src</span><br><span class="line">    |-- mod1.py</span><br><span class="line">    |-- mod2</span><br><span class="line">    |   `-- mod2.py</span><br><span class="line">    `-- test1.py</span><br></pre></td></tr></table></figure>
<p><code>test1.py</code>中导入模块<code>mod2</code>，需要在<code>mod2</code>文件夹中创建<code>__init__.py</code>文件:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> mod2.mod2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> mod2.mod2</span><br></pre></td></tr></table></figure></li>
<li><p>主程序导入上层目录中模块或其他目录(平级)下的模块</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">`-- src</span><br><span class="line">    |-- mod1.py</span><br><span class="line">    |-- mod2</span><br><span class="line">    |   `-- mod2.py</span><br><span class="line">    |-- sub</span><br><span class="line">    |   `-- test2.py</span><br><span class="line">    `-- test1.py</span><br></pre></td></tr></table></figure>
<p><code>test2.py</code> 中导入模块 <code>mod1</code> 和 <code>mod2</code>，首先需要在 <code>mod2</code> 下建立 <code>__init__.py</code> 文件，<code>src</code> 下不必建立该文件:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.path.append(<span class="string">&quot;..&quot;</span>)</span><br><span class="line"><span class="keyword">import</span> mod1</span><br><span class="line"><span class="keyword">import</span> mod2.mod2</span><br></pre></td></tr></table></figure></li>
</ul>
<p>从上面可以看出，导入模块关键是能够根据sys.path环境变量的值，找到具体模块的路径</p>
]]></content>
      <categories>
        <category>Notes</category>
        <category>Software</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Anaconda</tag>
      </tags>
  </entry>
  <entry>
    <title>Eviews notes</title>
    <url>/2020/11/22/Eviews/</url>
    <content><![CDATA[<h1 id="create-workfile">1 Create workfile</h1>
<p>Eviews 10 创建时间序列工作文件，界面如下</p>
<p><img src="https://s3.ax1x.com/2020/11/25/DUNDeA.png" /></p>
<center>
figure 1-1 时间序列类型
</center>
<p>参数释义为：</p>
<a id="more"></a>
<ul>
<li>Annual：年度数据</li>
<li>Semi-annual：半年(2010S1 - 2019S1)</li>
<li>Quarteryly：季度 （2010Q3 - 2019Q2）</li>
<li>Monthly：月度（2010M01 - 2019M11）</li>
<li>Bimonthly：半月（2010-3-01 - 2019-8-8）</li>
<li>Fortnightly：两周</li>
<li>Daily-custom week：用户自定义选择周几</li>
<li>Intraday：当日数据，精确到每天每隔多少时间</li>
<li>Integer data：可以是年度（eg：2001 - 2012），也可以是哪一期（eg：3 - 33）</li>
</ul>
<p>创建平衡面板数据：</p>
<p><img src="https://s3.ax1x.com/2020/11/25/DUN0Ld.png" /></p>
<center>
figure 1-2 平衡面板数据
</center>
<h1 id="least-squares最小二乘法">2 Least Squares（最小二乘法）</h1>
<p>Command中输入 <code>ls y c x</code>即可得到如下结果：</p>
<p><img src="https://s3.ax1x.com/2020/11/25/DUNrdI.md.png" /></p>
<center>
figure 1-3 Parameters
</center>
<p>Parameters:</p>
<ul>
<li>Coefficient：系数，参数估计值</li>
<li>Std. Error：参数估计量标准差估计值</li>
<li>t-Statistic：<span class="math inline">\(t\)</span> 统计量的值</li>
<li>Prob: <span class="math inline">\(P\)</span> 值</li>
<li>R-squared: $ R^2$</li>
<li>Adjusted R-squared: $^ - $</li>
<li>S.E. of regression: <span class="math inline">\(\sigma ^2\)</span></li>
<li>Sum squared resid: $ RSS$，残差平方和</li>
<li>Mean dependent var: <span class="math inline">\(\overset{-}{Y}\)</span>，被解释变量的均值</li>
<li>S.D. dependent var: 被解释变量的标准差</li>
</ul>
]]></content>
      <categories>
        <category>Notes</category>
        <category>Software</category>
      </categories>
      <tags>
        <tag>Eviews</tag>
        <tag>Software</tag>
      </tags>
  </entry>
  <entry>
    <title>Git notes</title>
    <url>/2020/11/22/Git-notes/</url>
    <content><![CDATA[<h1 id="版本控制">1. 版本控制</h1>
<h2 id="版本控制迭代">1.1 版本控制（迭代）</h2>
<p>版本控制（Revision control）是一种在开发的过程中用于管理我们对文件、目录或工程等内容的修改历史，方便查看更改历史记录，备份以便恢复以前的版本的软件工程技术。</p>
<ul>
<li>实现跨区域多人协同开发</li>
<li>追踪和记载一个或者多个文件的历史记录</li>
<li>组织和保护你的源代码和文档</li>
<li>统计工作量</li>
<li>并行开发、提高开发效率</li>
<li>跟踪记录整个软件的开发过程</li>
<li>减轻开发人员的负担，节省时间，同时降低人为错误</li>
</ul>
<a id="more"></a>
<h2 id="版本控制工具">1.2 版本控制工具</h2>
<h3 id="主流的版本控制器">1.2.1 主流的版本控制器：</h3>
<ul>
<li><strong>Git</strong></li>
<li><strong>SVN</strong>（Subversion）</li>
<li><strong>CVS</strong>（Concurrent Versions System）</li>
<li><strong>VSS</strong>（Micorosoft Visual SourceSafe）</li>
<li><strong>TFS</strong>（Team Foundation Server）</li>
<li>Visual Studio Online</li>
</ul>
<h3 id="版本控制分类">1.2.2 版本控制分类</h3>
<ul>
<li>本地版本控制：RCS</li>
</ul>
<blockquote>
<p><img src="https://s3.ax1x.com/2020/11/25/DauN11.png" /></p>
</blockquote>
<center>
图 1-1 本地版本控制
</center>
<ul>
<li>集中版本控制：SVN</li>
</ul>
<p><img src="https://s3.ax1x.com/2020/11/25/Dauu60.png" /></p>
<center>
图 1-2 集中版本控制
</center>
<ul>
<li>分布式版本控制：Git</li>
</ul>
<p><img src="https://s3.ax1x.com/2020/11/25/DauZfs.md.jpg" /></p>
<center>
图 1-3 分布式版本控制
</center>
<h3 id="git-与-svn-的区别">1.2.3 Git 与 SVN 的区别</h3>
<blockquote>
<ul>
<li><p>SVN是集中式版本控制系统，版本库集中放在中央服务器的，工作时，需要从中央服务器得到最新的版本，完成工作后，把做完的活推送到中央服务器。集中式版本控制系统是必须联网才能工作，对网络带宽要求较高。</p></li>
<li><p>Git是分布式版本控制系统，没有中央服务器，每个人的电脑就是一个完整的版本库</p></li>
</ul>
</blockquote>
<h1 id="git-环境配置">2. Git 环境配置</h1>
<h2 id="git配置">2.1 Git配置</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">git config -l</span><br><span class="line"><span class="comment"># 查看配置</span></span><br><span class="line"></span><br><span class="line">git config --system --<span class="built_in">list</span></span><br><span class="line"><span class="comment"># 系统配置</span></span><br><span class="line"></span><br><span class="line">git config --<span class="keyword">global</span> --<span class="built_in">list</span></span><br><span class="line"><span class="comment"># 查看当前用户 (global) 配置</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>Git 相关的配置文件</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">D:\Program files\Git\Git\etc：</span><br><span class="line"><span class="comment"># Git 安装目录下的 gitconfig --system 系统级</span></span><br><span class="line"></span><br><span class="line">C:\Users\YangSu\.gitconfig</span><br><span class="line"><span class="comment">#  只适用于当前登录用户的配置  --global 全局</span></span><br><span class="line"></span><br><span class="line">git config --<span class="keyword">global</span> user.name <span class="string">&quot;YS&quot;</span> <span class="comment">#名称</span></span><br><span class="line">git config --<span class="keyword">global</span> user.email num@qq.com   <span class="comment"># 邮箱</span></span><br></pre></td></tr></table></figure>
<h1 id="git-基本理论">3. Git 基本理论</h1>
<h2 id="工作区域">3.1 工作区域</h2>
<blockquote>
<p>四个工作区域：</p>
<ul>
<li>工作目录 (Working Directory)</li>
<li>暂存区 (Stage / Index)</li>
<li>资源库 (Repository 或 Git Directory)</li>
<li>远程 Git 仓库 (Remote Directory)</li>
</ul>
</blockquote>
<p><img src="https://s3.ax1x.com/2020/11/25/Daunlq.png" /></p>
<center>
图 1-4 工作区域（核心）
</center>
<ul>
<li>Workspace：工作区，就是你平时存放项目代码的地方</li>
<li>Index / Stage：暂存区，用于临时存放你的改动，事实上它只是一个文件，保存即将提交到文件列表信息</li>
<li>Repository：仓库区（或本地仓库），就是安全存放数据的位置，这里面有你提交到所有版本的数据。其中HEAD指向最新放入仓库的版本</li>
<li>Remote：远程仓库，托管代码的服务器，可以简单的认为是你项目组中的一台电脑用于远程数据交换</li>
</ul>
<p>本地的三个区域确切的说应该是git仓库中HEAD指向的版本：</p>
<p><img src="https://s3.ax1x.com/2020/11/25/Daumpn.png" /></p>
<center>
图 1-5 Git示意图
</center>
<ul>
<li>Directory：使用Git管理的一个目录，也就是一个仓库，包含我们的工作空间和Git的管理空间。</li>
<li>WorkSpace：需要通过Git进行版本控制的目录和文件，这些目录和文件组成了工作空间。</li>
<li>.git：存放Git管理信息的目录，初始化仓库的时候自动创建。</li>
<li>Index/Stage：暂存区，或者叫待提交更新区，在提交进入repo之前，我们可以把所有的更新放在暂存区。</li>
<li>Local Repo：本地仓库，一个存放在本地的版本库；HEAD会只是当前的开发分支（branch）。</li>
<li>Stash：隐藏，是一个工作状态保存栈，用于保存/恢复WorkSpace中的临时状态。</li>
</ul>
<h2 id="工作流程">3.2 工作流程</h2>
<ol type="1">
<li>在工作目录中添加、修改文件；</li>
<li>将需要进行版本管理的文件放入暂存区域；</li>
<li>将暂存区域的文件提交到git仓库。</li>
</ol>
<p>因此，git管理的文件有三种状态：已修改（modified）,已暂存（staged）,已提交(committed)</p>
<p><img src="https://s3.ax1x.com/2020/11/25/DauKXV.jpg" /></p>
<center>
1-6 工作流程
</center>
<h1 id="项目搭建">4. 项目搭建</h1>
<h2 id="创建工作目录">4.1 创建工作目录</h2>
<p>工作目录（WorkSpace)一般就是你希望Git帮助你管理的文件夹，可以是你项目的目录，也可以是一个空目录，建议不要有中文。</p>
<p><img src="https://s3.ax1x.com/2020/11/25/DauQmT.png" /></p>
<center>
1-7 常用命令
</center>
<h2 id="创建本地仓库">4.2 创建本地仓库</h2>
<ul>
<li>创建全新的仓库</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在当前目录新建一个Git代码库</span></span><br><span class="line">$ git init</span><br><span class="line"><span class="comment"># 执行后，项目目录多出了一个.git目录</span></span><br></pre></td></tr></table></figure>
<ul>
<li>克隆远程仓库</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 克隆一个项目和它的整个代码历史(版本信息)</span></span><br><span class="line">$ git clone [url]  </span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">从 gitee 或 github 中克隆</span></span><br><span class="line"><span class="string">https://gitee.com/kuangstudy/openclass.git</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<h1 id="git-文件操作">5. Git 文件操作</h1>
<h2 id="文件的四种状态">5.1 文件的四种状态</h2>
<ul>
<li>Untracked: 未跟踪, 此文件在文件夹中, 但并没有加入到git 库, 不参与版本控制. 通过 git add 状态变为 Staged.</li>
<li>Unmodify: 文件已经入库, 未修改, 即版本库中的文件快照内容与文件夹中完全一致. 这种类型的文件有两种去处, 如果它被修改, 而变为 Modified. 如果使用git rm移出版本库, 则成为 Untracked 文件</li>
<li>Modified: 文件已修改, 仅仅是修改, 并没有进行其他的操作. 这个文件也有两个去处, 通过git add可进入暂存staged状态, 使用git checkout 则丢弃修改过, 返回到unmodify状态, 这个git checkout即从库中取出文件, 覆盖当前修改 !</li>
<li>Staged: 暂存状态. 执行git commit则将修改同步到库中, 这时库中的文件和本地文件又变为一致, 文件为Unmodify状态. 执行git reset HEAD filename取消暂存, 文件状态为Modified</li>
</ul>
<h2 id="查看文件状态">5.2 查看文件状态</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">touch hello.py</span><br><span class="line"></span><br><span class="line">git status hello.py <span class="comment"># 产看指定文件状态</span></span><br><span class="line">git status <span class="comment"># 查看所有文件状态</span></span><br><span class="line"></span><br><span class="line">git add hello.py <span class="comment"># 添加指定文件到暂存区</span></span><br><span class="line">git add . <span class="comment"># 添加所有文件到暂存区 (repository)</span></span><br><span class="line"></span><br><span class="line">git rm --cached hello.py <span class="comment"># 将文件从暂存区移除</span></span><br><span class="line">git restore -staged add.py <span class="comment"># 将文件从暂存区移除</span></span><br><span class="line"></span><br><span class="line">git commit -m <span class="string">&quot;a new file named hello.py&quot;</span> </span><br><span class="line"><span class="comment"># 提交暂存区内容至本地仓库</span></span><br><span class="line"></span><br><span class="line">git push -u origin master -f</span><br><span class="line"><span class="comment"># 第一次使用push的时候加上-u,以后可不加，-f强制上传</span></span><br></pre></td></tr></table></figure>
<h2 id="忽略文件">5.3 忽略文件</h2>
<p>有些时候我们不想把某些文件纳入版本控制中，比如数据库文件，临时文件，设计文件等</p>
<p>在主目录下建立".gitignore"文件，此文件有如下规则：</p>
<ul>
<li>忽略文件中的空行或以井号（#）开始的行将会被忽略。</li>
<li>可以使用Linux通配符。例如：星号（*）代表任意多个字符，问号（？）代表一个字符，方括号（[abc]）代表可选字符范围，大括号（{string1,string2,...}）代表可选的字符串等。</li>
<li>如果名称的最前面有一个感叹号（!），表示例外规则，将不被忽略。</li>
<li>如果名称的最前面是一个路径分隔符（/），表示要忽略的文件在此目录下，而子目录中的文件不忽略。</li>
<li>如果名称的最后面是一个路径分隔符（/），表示要忽略的是此目录下该名称的子目录，而非文件（默认文件或目录都忽略）。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 为注释</span></span><br><span class="line">*.txt  <span class="comment"># 忽略.txt结尾的文件,上传时不会被选中！</span></span><br><span class="line">!lib.txt     <span class="comment"># 但lib.txt除外</span></span><br><span class="line">/temp        <span class="comment">#仅忽略项目根目录下的TODO文件,不包括其它目录temp</span></span><br><span class="line">build/       <span class="comment">#忽略build/目录下的所有文件</span></span><br><span class="line">doc/*.txt    <span class="comment">#忽略doc/notes.txt 但不包括 doc/server/arch.txt</span></span><br></pre></td></tr></table></figure>
<h1 id="使用码云">6. 使用码云</h1>
<blockquote>
<p>github 是有墙的，比较慢，国内一般用 gitee</p>
</blockquote>
<h2 id="设置免密码登录">6.1 设置免密码登录</h2>
<ol type="1">
<li><p>设置本机绑定SSH公钥，实现免密码登录！</p>
<p>免密码登录，这一步挺重要的，码云是远程仓库，我们是平时工作在本地仓库！</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 进入 C:\Users\YangSu\.ssh 目录</span></span><br><span class="line"><span class="comment"># 生成公钥</span></span><br><span class="line">ssh-keygen -t rsa <span class="comment"># 加密算法</span></span><br></pre></td></tr></table></figure></li>
<li><p>将公钥信息public key 添加到码云账户中</p>
<p>密钥信息存储在 id_rsa.pub 文件中</p></li>
<li><p>使用 gitee 创建一个自己的仓库</p>
<p><strong>许可证：</strong>开源是否可以随意转载，开源但是不能商业使用，不能转载，... 限制！</p></li>
</ol>
<h2 id="添加远程库">7.2 添加远程库</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">git remote add origin https://gitee.com/yangsuoly/GitStudy.git</span><br><span class="line"><span class="comment"># 添加远程库, HTTPS方式，ssh可以免密</span></span><br><span class="line"></span><br><span class="line">git remote -v <span class="comment"># 查看 clone 的地址</span></span><br><span class="line">git remote rm origin <span class="comment"># 移除远程库地址</span></span><br><span class="line">git remote add origin git@gitee.com:yangsuoly/GitStudy.git <span class="comment"># 添加远程库地址，SSH方式</span></span><br><span class="line"></span><br><span class="line">cat /c/Users/YangSu/.ssh/id_rsa.pub <span class="comment"># 查看公玥</span></span><br><span class="line">    </span><br><span class="line">git push -u origin master -f <span class="comment"># 首次使用</span></span><br><span class="line">git push <span class="comment"># 之后</span></span><br></pre></td></tr></table></figure>
<h1 id="git-分支">8. Git 分支</h1>
<h2 id="git-常用指令">8.1 Git 常用指令</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 列出所有本地分支</span></span><br><span class="line">git branch</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出所有远程分支</span></span><br><span class="line">git branch -r</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个分支，但依然停留在当前分支</span></span><br><span class="line">git branch [branch-name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个分支，并切换到该分支</span></span><br><span class="line">git checkout -b [branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 合并指定分支到当前分支</span></span><br><span class="line">$ git merge [branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除分支</span></span><br><span class="line">$ git branch -d [branch-name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除远程分支</span></span><br><span class="line">$ git push origin --delete [branch-name]</span><br><span class="line">$ git branch -dr [remote/branch]</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Notes</category>
        <category>OS</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Group-Pictures</title>
    <url>/2020/12/02/Group-Pictures/</url>
    <content><![CDATA[<div class="group-picture"><div class="group-picture-container"><div class="group-picture-row"><div class="group-picture-column" style="width: 50%;"><img src="https://s3.ax1x.com/2020/11/30/DgWRZ6.png" /></div><div class="group-picture-column" style="width: 50%;"><img src="https://s3.ax1x.com/2020/11/30/DgWA8H.png" /></div></div><div class="group-picture-row"><div class="group-picture-column" style="width: 100%;"><img src="https://s3.ax1x.com/2020/11/30/DgWA8H.png" /></div></div><div class="group-picture-row"><div class="group-picture-column" style="width: 50%;"><img src="https://s3.ax1x.com/2020/11/30/DgWA8H.png" /></div><div class="group-picture-column" style="width: 50%;"><img src="https://s3.ax1x.com/2020/11/30/DgWA8H.png" /></div></div></div></div>
]]></content>
      <categories>
        <category>Notes</category>
      </categories>
      <tags>
        <tag>Pics</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux notes</title>
    <url>/2020/11/23/Linux/</url>
    <content><![CDATA[<h1 id="command">1. Command</h1>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cd / pwd / ls</span><br><span class="line">mkdir / rmdir</span><br><span class="line">cp / rm / mv</span><br><span class="line">tar / <span class="built_in">zip</span> / unzip</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="cd">1.1 cd</h2>
<p>即 current directory，切换目录</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cd /home/YangSu/Desktop <span class="comment">#按TAB键可以自动补全</span></span><br><span class="line">cd ~/Desktop <span class="comment">#其中~特指用户的主目录</span></span><br><span class="line">cd.. <span class="comment"># 回到上一个目录</span></span><br><span class="line">cd <span class="comment">#回到用户目录位置</span></span><br></pre></td></tr></table></figure>
<h4 id="绝对路径">绝对路径</h4>
<p>/home/YangSu/Desktop</p>
<h4 id="相对路径">相对路径</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">. 当前目录</span><br><span class="line">.. 上级目录</span><br><span class="line">../Videos 上级目录下的Videos子目录</span><br></pre></td></tr></table></figure>
<h2 id="pwd">1.2 pwd</h2>
<p>即 print working directory 显示当前工作目录</p>
<h2 id="ls">1.3 ls</h2>
<p>即 list，列出文件和目录</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ls</span><br><span class="line">ls ~/Desktop</span><br><span class="line">ls -l ~/Desktop <span class="comment">#其中，-l参数表示详细模式</span></span><br></pre></td></tr></table></figure>
<h2 id="mkdir">1.4 mkdir</h2>
<p>即 make directory，创建目录</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">mkdir abc</span><br><span class="line">mkdir -p abc/<span class="number">123</span>/test </span><br><span class="line"><span class="comment">#使用-p参数，可以将路径的层次目录全部创建</span></span><br></pre></td></tr></table></figure>
<h2 id="touch">1.5 touch</h2>
<p>新建一个文件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">touch index.js</span><br><span class="line"><span class="comment"># 在当前目录下新建一个 index.js 文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># windows terminal中</span></span><br><span class="line">new-item index.js</span><br></pre></td></tr></table></figure>
<h2 id="rm">1.6 rm</h2>
<h3 id="rm-1">rm</h3>
<p>即 remove 删除文件或目录</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">rm -rf abc <span class="comment">#删除abc目录，和子项一并删除</span></span><br><span class="line"><span class="comment">#其中，r:recursive, f:force</span></span><br></pre></td></tr></table></figure>
<h3 id="rmdir">rmdir</h3>
<p>即 remove directory，删除空目录</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">rmdir abc <span class="comment">#删除空目录，如果目录非空，则会删除失败</span></span><br></pre></td></tr></table></figure>
<h2 id="cp">1.7 cp</h2>
<p>即 copy，复制文件或者目录</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cp -rf Test Test1</span><br></pre></td></tr></table></figure>
<h2 id="mv">1.8 mv</h2>
<p>即 move，移动文件或目录（重命名）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">mv Test1 HelloWorld</span><br></pre></td></tr></table></figure>
<h2 id="tar">1.9 tar</h2>
<p>即 tape archive档案打包</p>
<h3 id="创建档案包">创建档案包</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tar -cvf example.tar example</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">c: create</span></span><br><span class="line"><span class="string">v: verbose，显示详情</span></span><br><span class="line"><span class="string">f: file</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># 也可以多个目录打包</span></span><br><span class="line">tar -cvd xxx.tar file1 file2 file3</span><br></pre></td></tr></table></figure>
<h4 id="还原档案包">还原档案包</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tar -xvf example.tar</span><br><span class="line">tar -xvf example.tar -C outdir</span><br></pre></td></tr></table></figure>
<h4 id="归档并压缩">归档并压缩</h4>
<p>上述的tar格式并没有对文件进行压缩，体积较大</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 并档并压缩</span></span><br><span class="line">tar -czvf example.tar.gz example</span><br><span class="line"><span class="comment"># 解压缩</span></span><br><span class="line">tar -xzvf example.tar.gz -C outdir</span><br></pre></td></tr></table></figure>
<h2 id="man">1.10 man</h2>
<p>即 manual，手册</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">man tar</span><br></pre></td></tr></table></figure>
<h2 id="ln">1.11 ln</h2>
<p>软链接，即Windows中的 “ 快捷方式 ”</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ln -s source link</span><br><span class="line"><span class="comment"># s: soft</span></span><br><span class="line">ls -l <span class="comment"># 查看软链接，显示为：test -&gt; Test/</span></span><br><span class="line">ls -l / <span class="comment">#详细列出根目录</span></span><br></pre></td></tr></table></figure>
<h2 id="other">1.12 other</h2>
<ul>
<li>reset：重新初始化终端，即清屏</li>
<li>clear：清屏</li>
<li>history：查看命令历史</li>
<li>help：帮助</li>
<li>exit：推出</li>
<li>#：表示注释</li>
</ul>
<h1 id="management">2 Management</h1>
<h2 id="switch-user">2.1 Switch user</h2>
<ul>
<li>su</li>
</ul>
<p>即 switch user，切换用户。用户管理需要以管理员身份执行，所以，要先切换账户到 <strong>root</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">su root</span><br><span class="line">su <span class="comment"># 默认为 root</span></span><br></pre></td></tr></table></figure>
<h2 id="user-operation">2.2 User operation</h2>
<ul>
<li>useradd</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">useradd username</span><br></pre></td></tr></table></figure>
<ul>
<li>passwd</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">passwd username</span><br></pre></td></tr></table></figure>
<ul>
<li>userdel</li>
</ul>
<p>即 user delete</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">userdel username</span><br></pre></td></tr></table></figure>
<h2 id="group-operation">2.3 Group operation</h2>
<ul>
<li>groupadd</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">groupadd boys <span class="comment"># 创建用户组</span></span><br></pre></td></tr></table></figure>
<ul>
<li>groupdel</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">groupdel boys <span class="comment"># 删除用户组</span></span><br></pre></td></tr></table></figure>
<ul>
<li>useradd</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">useradd -g boys ming <span class="comment"># -g表示添加用户，同时添加到boys中</span></span><br></pre></td></tr></table></figure>
<ul>
<li>usermod</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">usermod -g boys YangSu <span class="comment"># 修改用户信息</span></span><br></pre></td></tr></table></figure>
<ul>
<li>cat</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cat /etc/group <span class="comment"># 查看用户组，每一行表示一个group的信息</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">输出为：名称 + ID</span></span><br><span class="line"><span class="string">YangSu:x:1000:</span></span><br><span class="line"><span class="string">boys:x:1001:</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">cat /etc/passwd <span class="comment"># 查看用户列表，每一行表示一个user信息</span></span><br></pre></td></tr></table></figure>
<h2 id="file-permission">2.4 File permission</h2>
<ul>
<li>View Permission</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ls -l test.txt</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">-rw-------</span></span><br><span class="line"><span class="string">第一个字母，如果是文件夹，则为d，文件则为-</span></span><br><span class="line"><span class="string">后面九个字符分为三部分：自己 | 同组 | 别人</span></span><br><span class="line"><span class="string">rwx------ # 自己可读可写可执行</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>chmod</li>
</ul>
<p>即 Change file mode，修改文件的访问权限</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">chmod o+w test.txt</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">o: other</span></span><br><span class="line"><span class="string">a: all</span></span><br><span class="line"><span class="string">u: user # 省略怎默认修改自己和本组的权限</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">+w: add write permission</span></span><br><span class="line"><span class="string">-w: delete write permission</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>chown</li>
</ul>
<p>即 Change owner，修改文件的属主，一般每个用户只操作自己用户目录</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">su</span><br><span class="line">mkdir /opt/source <span class="comment"># 在/opt目录下创建一个文件夹source</span></span><br><span class="line">chown -R YangSu /opt/source <span class="comment"># 将source目录分配给YangSu</span></span><br><span class="line">ls -ld /opt/source</span><br></pre></td></tr></table></figure>
<h2 id="script">2.5 Script</h2>
<ul>
<li>Shell 脚本： *.sh</li>
<li>Perl 脚本： *.pl</li>
<li>Python 脚本：*.py</li>
</ul>
<p>脚本程序本质上是一个文本文件，具有可执行权限</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Shell 脚本解释器：/<span class="built_in">bin</span>/sh</span><br><span class="line">Perl 脚本解释器：/<span class="built_in">bin</span>/perl</span><br><span class="line">Python 脚本解释器：/usr/<span class="built_in">bin</span>/python3</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行一个脚本时，以下两种方式等效</span></span><br><span class="line">./hello.py</span><br><span class="line">/usr/<span class="built_in">bin</span>/python3 hello.py</span><br></pre></td></tr></table></figure>
<ul>
<li>Shell 脚本</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 编辑一个文本文件</span></span><br><span class="line"><span class="comment">#!/bin/sh # 申明解释器</span></span><br><span class="line">echo <span class="string">&quot;Hello World!&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存为Hello.sh</span></span><br><span class="line"><span class="comment"># 添加可执行权限，必须要有x权限，才能够执行</span></span><br><span class="line">chmod +x Hello.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行程序</span></span><br><span class="line">./Hello.sh <span class="comment"># 执行程序时，必须加上路径</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">./表示当前路径</span></span><br><span class="line"><span class="string">/home/YangSu/Test/Hello.sh</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>Perl 脚本</li>
<li>Py 脚本</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br></pre></td></tr></table></figure>
<h2 id="shell">2.6 Shell</h2>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 定义变量，NAME=value</span></span><br><span class="line">JAVA_HOME=/opt/java #中间不能有空格</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 调用命令</span></span><br><span class="line">echo $&#123;JAVA_HOME&#125;/bin</span><br><span class="line">ls $&#123;JAVA_HOME&#125; #使用变量</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 逻辑控制</span></span><br><span class="line">if ... while ...</span><br></pre></td></tr></table></figure>
<h1 id="enviroment">3 Enviroment</h1>
<h2 id="enviromental-viriables">3.1 Enviromental Viriables</h2>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export JAVA_HOME=/opt/jdk1.8 # 定义临时的环境变量</span><br><span class="line">echo $JAVA_HOME # 显示环境变量</span><br><span class="line">printenv #查看所有环境变量</span><br></pre></td></tr></table></figure>
<p>使用环境变量：</p>
<ul>
<li>在当前命令行中使用</li>
<li>在 Shell 脚本中使用</li>
</ul>
<h2 id="user-viriables">3.2 User Viriables</h2>
<p>用户环境变量定义在：~/.bash_profile 中（注：在 Linux 下，以 . 开头的文件为 <strong>隐藏文件</strong> ）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ls -la # a 表示 all，显示所有文件</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 用户环境变量，g 表示 GNU</span></span><br><span class="line">gedit ~/.bash_profile</span><br><span class="line"><span class="meta">#</span><span class="bash"> 添加</span></span><br><span class="line">export JAVA_HOME=/opt/jdk1.8</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 注销当前用户，再次登陆时生效</span></span><br><span class="line">echo $&#123;JAVA_HOME&#125;</span><br></pre></td></tr></table></figure>
<h2 id="system-variables">3.3 System Variables</h2>
<p>系统环境变量定义在：/etc/profile 中，其中的环境变量对 <strong>所有用户</strong> 有效</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 以 root 登录或执行</span></span><br><span class="line">gedit /etc/profile</span><br><span class="line"></span><br><span class="line">:&#x27;</span><br><span class="line"><span class="meta">#</span><span class="bash">在 CentOS 中，一般不可以直接修改 /etc/profile，而是在 /etc/profile.d 创建一个自定义的脚本</span></span><br><span class="line">&#x27;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 用 gedit 创建一个脚本</span></span><br><span class="line">gedit /etc/profile.d/myprofile.sh</span><br><span class="line"><span class="meta">#</span><span class="bash"> 定义环境变量</span></span><br><span class="line">export TOMCAT=/opt/tomcat</span><br><span class="line"><span class="meta">#</span><span class="bash"> 注销并重新登录</span></span><br></pre></td></tr></table></figure>
<h2 id="path-variables">3.4 PATH Variables</h2>
<p>PATH，最常见的环境变量，用来描述可执行程序的搜索路径</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo $PATH </span><br><span class="line"><span class="meta">#</span><span class="bash"> OUTPUT:/home/YangSu/.<span class="built_in">local</span>/bin:/home/YangSu/bin:/home/YangSu/.<span class="built_in">local</span>/bin:/home/YangSu/bin:/home/YangSu/.<span class="built_in">local</span>/bin:/home/YangSu/bin:/usr/<span class="built_in">local</span>/bin:/usr/<span class="built_in">local</span>/sbin:/usr/bin:/usr/sbin</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 多个路径之间用冒号分隔</span></span><br></pre></td></tr></table></figure>
<h2 id="network">3.5 Network</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ifconfig <span class="comment"># 检查IP地址，Windows 为ipconfig</span></span><br><span class="line">ping www.baidu.com <span class="comment"># 测试外网</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">虚拟机和宿主机时互相连通的</span></span><br><span class="line"><span class="string">虚拟机：192.168.11.128</span></span><br><span class="line"><span class="string">宿主机：192.168.11.1</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<h1 id="centos8-图形界面和命令行切换">4 CentOS8 图形界面和命令行切换</h1>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看目前默认的启动默认</span></span><br><span class="line">systemctl get-default</span><br><span class="line"><span class="meta">#</span><span class="bash"> 命令行模式:multi-user.target</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 图形界面模式:graphical.target</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置为图形界面模式</span></span><br><span class="line">systemctl set-default graphical.target</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置为命令行模式</span></span><br><span class="line">systemctl set-default multi-user.target</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Notes</category>
        <category>OS</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>CentOS</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown</title>
    <url>/2021/01/19/Markdown/</url>
    <content><![CDATA[<h1 id="markdown">Markdown</h1>
<h2 id="title">1. Title</h2>
<h3 id="三级标题">三级标题</h3>
<h4 id="四级标题">四级标题</h4>
<p>格式及快捷键如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Markdown</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 1. Title</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### 三级标题</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#### 四级标题</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="font">2. Font</h2>
<p><strong>加粗 </strong></p>
<p><em>斜体</em></p>
<p><u>下划线</u></p>
<p><del>删除线</del></p>
<p>==高亮==</p>
<p><code>底纹</code></p>
<p>$ _i = w x_i + b $ <span class="math display">\[
\hat{y}_i = w x_i + b
\]</span></p>
<p>格式及快捷键如下（其中 <code>#</code> 开头的行为注释行）：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">**加粗 ** (快捷键 ctrl + B)</span><br><span class="line">*斜体* (快捷键 ctrl + I)</span><br><span class="line">&lt;u&gt;下划线&lt;/u&gt;  (快捷键 ctrl + U)</span><br><span class="line">~~删除线~~</span><br><span class="line">==高亮==</span><br><span class="line">`底纹`</span><br><span class="line"></span><br><span class="line"><span class="comment"># 行内公式 (In-line formula)</span></span><br><span class="line">$ \hat&#123;y&#125;_i = w x_i + b $ </span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示公式 (Display formula)</span></span><br><span class="line">$$</span><br><span class="line">\hat&#123;y&#125;_i = w x_i + b</span><br><span class="line">$$</span><br></pre></td></tr></table></figure>
<h2 id="citation">3. Citation</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 引用语法</span></span><br><span class="line">&gt; Author</span><br><span class="line">&gt;&gt; Author</span><br></pre></td></tr></table></figure>
<p>效果如下：</p>
<blockquote>
<p>Author</p>
<blockquote>
<p>Author</p>
</blockquote>
</blockquote>
<h2 id="分割线">4. 分割线</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 分割线1</span></span><br><span class="line">---</span><br><span class="line"><span class="comment"># 分割线2</span></span><br><span class="line">***</span><br></pre></td></tr></table></figure>
<hr />
<hr />
<h2 id="inset-image">5. Inset image</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在线图片/本地图片</span></span><br><span class="line">![My image1](/image/me.png) --image <span class="built_in">dir</span></span><br></pre></td></tr></table></figure>
<p><img src="https://s3.ax1x.com/2021/01/19/sczP2Q.png" /></p>
<center>
Fig. 1 Image demo
</center>
<p>注：Typora 支持直接复制粘贴图片，可以省去敲格式的环节，但注意在复制粘贴之前将图片储存的设置为自动保存，设置如下：</p>
<p><img src="https://s3.ax1x.com/2021/01/19/sczkKs.png" /></p>
<center>
Fig. 2 Typora image auto-save setting
</center>
<h2 id="link">6. Link</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 超链接语法，其中 [] 中为文字内容，()内为想要插入的连接</span></span><br><span class="line">[My link](https://www.bilibili.com/)</span><br></pre></td></tr></table></figure>
<p><a href="https://www.bilibili.com/">My bilibili</a></p>
<h2 id="list">7. List</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 无序列表</span></span><br><span class="line">- 目录<span class="number">1</span></span><br><span class="line">- 目录<span class="number">2</span></span><br><span class="line">- 目录<span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 有序列表，在目录 4 后键入回车，会自动生成有序列表</span></span><br><span class="line"><span class="number">1.</span> 目录<span class="number">4</span></span><br><span class="line"><span class="number">2.</span> 目录<span class="number">5</span></span><br></pre></td></tr></table></figure>
<ul>
<li>目录1</li>
<li>目录2</li>
<li>目录3</li>
</ul>
<ol type="1">
<li>目录4</li>
<li>目录5</li>
</ol>
<h2 id="grid">8. Grid</h2>
<p>在 Typora 中按 <code>Ctrl + T</code> 快捷键，会出现对话框，便可以快速插入表格，如下：</p>
<p><img src="https://s3.ax1x.com/2021/01/19/sczivj.png" />)</p>
<center>
Fig. 3 Insert table
</center>
<table>
<thead>
<tr class="header">
<th>成绩</th>
<th>语文</th>
<th>数学</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td></td>
<td>45</td>
<td>35</td>
</tr>
</tbody>
</table>
<h2 id="段落格式">9. 段落格式</h2>
<p>以下为一下 <code>html</code> 语法，<code>Markdown</code> 可以兼容 <span class="math inline">\(\TeX\)</span> 数学公式和 <code>html</code> 语法，可以扩充已有的功能。</p>
<ul>
<li>居中</li>
</ul>
<center>
center
</center>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">center</span>&gt;</span> 内容居中 <span class="tag">&lt;/<span class="name">center</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>字体</li>
</ul>
<p><font face = "黑体">我是黑体</font></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">font</span> <span class="attr">face</span> = <span class="string">&quot;黑体&quot;</span>&gt;</span>我是黑体<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><font face="黑体" size=10>我是黑体10号字体</font></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">font</span> <span class="attr">face</span>=<span class="string">&quot;黑体&quot;</span> <span class="attr">size</span>=<span class="string">10</span>&gt;</span>我是黑体10号字体<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line"></span><br><span class="line"># 字体颜色更改为红色</span><br><span class="line"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">red</span> <span class="attr">size</span>=<span class="string">10</span>&gt;</span>我是黑体10号字体<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li><p>Html 标签</p>
<p><img src="https://s3.ax1x.com/2021/01/19/sczC8g.png" /></p>
<center>
<p>Fig. 4 HTML Label</p>
</center></li>
</ul>
]]></content>
      <categories>
        <category>Notes</category>
        <category>Markdown</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>Numpy</title>
    <url>/2020/11/29/Numpy/</url>
    <content><![CDATA[<h1 id="numpy-version">1 NumPy version</h1>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">print(np.__version__) <span class="comment"># 查看 numpy 版本</span></span><br></pre></td></tr></table></figure>
<p>NumPy( Numerical Python) 是 Python 数值计算最重要的基础库，核心是 N 维数组对象 ndarray ( N-dimensional array )。</p>
<a id="more"></a>
<h1 id="create-ndarray">2 Create ndarray</h1>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">array_1x6 = np.array([<span class="number">1.0</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>], dtype = np.float64) <span class="comment"># 用 list 创建 array，可以通过 dtype 参数指定元素的类型  </span></span><br><span class="line"></span><br><span class="line">print(array_1x6.dtype)</span><br><span class="line"></span><br><span class="line"><span class="comment"># number of dimension</span></span><br><span class="line">print(<span class="string">&#x27;number of dim: &#x27;</span>,array_1x6.ndim)</span><br><span class="line">print(<span class="string">&#x27;shape: &#x27;</span>,array_1x6.shape)</span><br><span class="line">print(<span class="string">&#x27;size: &#x27;</span>,array_1x6.size)</span><br><span class="line"><span class="comment"># total number of elements</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(array_1x6) <span class="comment"># 空格分隔元素</span></span><br><span class="line">[<span class="number">1.</span> <span class="number">2.</span> <span class="number">3.</span> <span class="number">4.</span> <span class="number">5.</span> <span class="number">6.</span>]</span><br></pre></td></tr></table></figure>
<h1 id="special-ndarray">4 Special ndarray</h1>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import numpy as np</span><br></pre></td></tr></table></figure>
<ul>
<li><p>零矩阵</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a1 = np.zeros((<span class="number">3</span>,<span class="number">4</span>)) <span class="comment"># 零矩阵</span></span><br></pre></td></tr></table></figure></li>
<li><p>1 矩阵</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a2 = np.ones((<span class="number">3</span>,<span class="number">4</span>)) <span class="comment"># 1 矩阵</span></span><br></pre></td></tr></table></figure></li>
<li><p>1空矩阵</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a3 = np.empty((<span class="number">3</span>,<span class="number">4</span>)) <span class="comment"># 未初始化的空矩阵</span></span><br></pre></td></tr></table></figure></li>
<li><p>对角矩阵</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a7 = np.identity(<span class="number">5</span>) <span class="comment"># 5x5 的对角矩阵</span></span><br><span class="line">a8 = np.mat(np.identity(<span class="number">5</span>))</span><br></pre></td></tr></table></figure></li>
<li><p>线段</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a5 = np.arange(<span class="number">12</span>)</span><br><span class="line">a6 = np.linspace(<span class="number">1</span>, <span class="number">10</span>, <span class="number">5</span>) <span class="comment"># 5 个元素的线段</span></span><br><span class="line">print(a6 &lt; <span class="number">5</span>) <span class="comment"># 返回布尔类型的矩阵</span></span><br></pre></td></tr></table></figure></li>
<li><p>对角矩阵</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a7 = np.identity(<span class="number">5</span>) <span class="comment"># 5x5 的对角矩阵</span></span><br><span class="line">a8 = np.mat(np.identity(<span class="number">5</span>))</span><br></pre></td></tr></table></figure></li>
<li><p>随机矩阵</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = np.random.random((<span class="number">2</span>, <span class="number">4</span>)) <span class="comment"># 0-1的随机数</span></span><br><span class="line">print(np.<span class="built_in">sum</span>(a), np.<span class="built_in">min</span>(a), np.<span class="built_in">max</span>(a))</span><br><span class="line">np.<span class="built_in">sum</span>(a, axis = <span class="number">0</span>) <span class="comment"># 列操作，axis = 1行操作，the default, axis = None，will sum all of the elements of the input array</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="array-operations">4 Array operations</h1>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = np.array([[<span class="number">10</span>, <span class="number">20</span>], [<span class="number">30</span>, <span class="number">40</span>]])</span><br><span class="line">b = np.arange(<span class="number">4</span>).reshape(<span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line">print(a, b, sep = <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">print(<span class="string">&#x27;-------------&#x27;</span>)</span><br><span class="line">c1 = a + b</span><br><span class="line">c2 = a * b <span class="comment"># 对应元素相乘</span></span><br><span class="line"></span><br><span class="line">c3 = np.dot(a, b) <span class="comment"># 矩阵相乘，点乘</span></span><br><span class="line">c4 = a.dot(b) <span class="comment"># 和上式相同，a 值不改变</span></span><br><span class="line">print(c1, c2, c3, sep = <span class="string">&#x27;\n&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h1 id="array-basic-methods">5 Array basic methods</h1>
<ul>
<li><p>导入模块 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br></pre></td></tr></table></figure></p></li>
<li><p>统计特征 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># find elements</span></span><br><span class="line">A = np.arange(<span class="number">2</span>, <span class="number">14</span>).reshape(<span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">index = np.argmax(A)  <span class="comment"># 最大值索引or argmin</span></span><br><span class="line">mean = np.mean(A) <span class="comment"># 均值</span></span><br><span class="line">median = np.median(A) <span class="comment"># 中位数</span></span><br><span class="line">print(index, mean, median, sep = <span class="string">&#x27;\n&#x27;</span>)</span><br></pre></td></tr></table></figure> 上述函数皆默认 <code>axis = None, the index is into the flattened array</code>，若添加参数：<code>axis = 1</code> 则返回每一行的相关操作，<code>axis = 0</code> 则返回每一列的相关操作，具体参照: <code>help(np.mean)</code>。</p></li>
<li><p>累加和差分 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># A：3x4 的数组</span></span><br><span class="line">cumsum = np.cumsum(A)</span><br><span class="line"><span class="comment"># 累加，axis默认为None，输出1x12数组</span></span><br><span class="line">diff = np.diff(A)</span><br><span class="line"><span class="comment"># 差分，默认axis=-1，即行操作与axis=1效果相同，返回3X3的数组，axis=0，返回2x4数组</span></span><br></pre></td></tr></table></figure></p></li>
<li><p>查找数据 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">non = np.nonzero(A)</span><br></pre></td></tr></table></figure> 查找非零元素的索引，返回两个array，第一个为行索引，第二个为列索引，输出： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">(array([<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>], dtype=int64),</span><br><span class="line"> array([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], dtype=int64))</span><br></pre></td></tr></table></figure></p></li>
<li><p>矩阵转置 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 矩阵转置, transpose array</span></span><br><span class="line">transpose1 = np.transpose(A)</span><br><span class="line">transpose2 = A.T</span><br><span class="line">print(transpose1, transpose2, sep = <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">print(transpose1.dot(A)) <span class="comment"># $&#123;A * A^T&#125;$</span></span><br></pre></td></tr></table></figure></p></li>
<li><p>数据裁剪<code>clip</code> <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = np.arange(<span class="number">2</span>, <span class="number">14</span>).reshape(<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line">clip = np.clip(a, <span class="number">5</span>, <span class="number">9</span>)</span><br><span class="line">print(a, clip, sep = <span class="string">&#x27;\n&#x27;</span>)</span><br></pre></td></tr></table></figure> Given an interval [5, 9], values outside this interval are clipped to this interval edges, namely 5 and 9. Result: <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">array([[<span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>],</span><br><span class="line">       [<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>],</span><br><span class="line">       [<span class="number">9</span>, <span class="number">9</span>, <span class="number">9</span>, <span class="number">9</span>]])</span><br></pre></td></tr></table></figure></p></li>
<li><p>迭代输出 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = np.arange(<span class="number">2</span>, <span class="number">14</span>).reshape(<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line"><span class="comment"># 行迭代输出</span></span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> a:</span><br><span class="line">    print(row)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列迭代输出    </span></span><br><span class="line"><span class="keyword">for</span> column <span class="keyword">in</span> a.T:</span><br><span class="line">    print(column.T)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 元素迭代, flat返回迭代器，flatten()返回array</span></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> a.flat: <span class="comment"># or a.flatten()</span></span><br><span class="line">    print(item)</span><br></pre></td></tr></table></figure> Result: <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Row</span></span><br><span class="line">array([[<span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>],</span><br><span class="line">       [<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>],</span><br><span class="line">       [<span class="number">9</span>, <span class="number">9</span>, <span class="number">9</span>, <span class="number">9</span>]])</span><br></pre></td></tr></table></figure></p></li>
</ul>
<h1 id="array-joint">6 Array joint</h1>
<h2 id="vstack-and-hstack">6.1 vstack and hstack</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = np.array([<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>])</span><br><span class="line">b = np.array([<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>])</span><br><span class="line">c = np.vstack((a, b)) <span class="comment">#vertical stack 纵向</span></span><br><span class="line">d = np.hstack((a, b)) <span class="comment"># horizontal stack 横</span></span><br><span class="line">print(a.shape, c.shape) <span class="comment"># a 的shape为序列</span></span><br><span class="line">print(c, d, sep = <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">print(a.T.shape) <span class="comment"># 并未改变shape，0x3维</span></span><br><span class="line">a1 = a[:, np.newaxis] <span class="comment"># 在后面加维度，3x1维</span></span><br><span class="line">a2 = a[np.newaxis, :] <span class="comment"># add before, 1x3</span></span><br><span class="line">c= np.array([[<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>],[<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>]]) <span class="comment"># 2x3</span></span><br><span class="line">c1 = c[np.newaxis, :] <span class="comment"># add before 1x2x3</span></span><br><span class="line">c2 = c[:, np.newaxis] <span class="comment"># same as c3</span></span><br><span class="line">c3 = c[:, np.newaxis, :] <span class="comment"># 2x1x3</span></span><br><span class="line">c4 = c[:, :, np.newaxis] <span class="comment"># 2x3x1</span></span><br></pre></td></tr></table></figure>
<h2 id="concatenate">6.2 concatenate</h2>
<p>Join a sequence of arrays along a existing axis, default axis is o, if axis = None, arrays will be flattened before use.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = np.array([<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>])[:, np.newaxis]</span><br><span class="line">b = np.array([<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>])[:, np.newaxis]</span><br><span class="line"></span><br><span class="line">c1 = np.concatenate((a,b,b,a)) <span class="comment"># same as c2</span></span><br><span class="line">c2 = np.concatenate((a,b,b,a), axis = <span class="number">0</span>)</span><br><span class="line">c3 = np.concatenate((a,b,b,a), axis = <span class="number">1</span>)</span><br><span class="line">c4 = np.concatenate((a,b,b,a), axis = <span class="literal">None</span>)</span><br><span class="line">print(c1, c2, c3, c4, sep=<span class="string">&#x27;\n&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h1 id="array-split">7 Array split</h1>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">a = np.arange(<span class="number">2</span>, <span class="number">14</span>).reshape(<span class="number">3</span>, <span class="number">4</span>) <span class="comment"># 3x4</span></span><br><span class="line">print(a)</span><br><span class="line">print(np.split(a, <span class="number">3</span>, axis = <span class="number">0</span>)) <span class="comment"># vertical</span></span><br><span class="line">print(np.split(a, <span class="number">2</span>, axis = <span class="number">1</span>)) <span class="comment">#horizontal</span></span><br><span class="line"><span class="comment"># 只能进行相等的分割</span></span><br></pre></td></tr></table></figure>
<ul>
<li><strong>np.split(ary, indices_or sections, axis = 0)</strong></li>
</ul>
<p>Array to be divided into multiple sub-arrays along the given 'axis ', if such split is not possible, then an error will be rasied.</p>
<h1 id="array-copy">8 Array copy</h1>
<ul>
<li><strong>Copy and deep copy</strong></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">a = np.arange(<span class="number">2</span>, <span class="number">5</span>)</span><br><span class="line">b = a <span class="comment"># shallow copy</span></span><br><span class="line">a[<span class="number">0</span>] = <span class="number">10</span></span><br><span class="line">print(a, b)</span><br><span class="line">b1 = a.copy() <span class="comment"># deep copy</span></span><br><span class="line">a[<span class="number">0</span>] = <span class="number">20</span></span><br><span class="line">print(a, b1)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Notes</category>
        <category>Python module</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Data analysis</tag>
        <tag>Numpy</tag>
      </tags>
  </entry>
  <entry>
    <title>Pandas</title>
    <url>/2020/11/27/Pandas/</url>
    <content><![CDATA[<h1 id="series">1 Series</h1>
<h2 id="preparation">1.1 Preparation</h2>
<ul>
<li><p>Import modules <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br></pre></td></tr></table></figure> ## 1.2 Different data type</p></li>
<li><p>Time type <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>t = pd.Timestamp(<span class="string">&#x27;20180901&#x27;</span>) <span class="comment"># time type</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t</span><br><span class="line">Timestamp(<span class="string">&#x27;2018-09-01 00:00:00&#x27;</span>)</span><br></pre></td></tr></table></figure></p>
<p>Created by means of <code>data_range</code>. <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>dates = pd.date_range(<span class="string">&#x27;20200101&#x27;</span>, periods = <span class="number">6</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dates</span><br><span class="line">DatetimeIndex([<span class="string">&#x27;2020-01-01&#x27;</span>, <span class="string">&#x27;2020-01-02&#x27;</span>, <span class="string">&#x27;2020-01-03&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;2020-01-04&#x27;</span>,<span class="string">&#x27;2020-01-05&#x27;</span>, <span class="string">&#x27;2020-01-06&#x27;</span>],</span><br><span class="line">           dtype=<span class="string">&#x27;datetime64[ns]&#x27;</span>, freq=<span class="string">&#x27;D&#x27;</span>)</span><br></pre></td></tr></table></figure> <a id="more"></a> ## 1.3 Create DataFrame</p></li>
<li><p>By dict <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># create a dataframe based on dict</span></span><br><span class="line">df3 = pd.DataFrame(&#123;<span class="string">&#x27;A&#x27;</span>:<span class="number">1.</span>, <span class="string">&#x27;B&#x27;</span>:pd.Timestamp(<span class="string">&#x27;20160901&#x27;</span>),</span><br><span class="line">      <span class="string">&#x27;C&#x27;</span>:pd.Series(<span class="number">1</span>,index=<span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">4</span>)),dtype=<span class="string">&#x27;float32&#x27;</span>),</span><br><span class="line">      <span class="string">&#x27;D&#x27;</span>:np.array([<span class="number">3</span>]*<span class="number">4</span>, dtype =<span class="string">&#x27;int32&#x27;</span>),</span><br><span class="line">      <span class="string">&#x27;E&#x27;</span>:pd.Categorical([<span class="string">&#x27;test&#x27;</span>,<span class="string">&#x27;train&#x27;</span>,<span class="string">&#x27;test&#x27;</span>,<span class="string">&#x27;train&#x27;</span>]),</span><br><span class="line">      <span class="string">&#x27;F&#x27;</span>:<span class="string">&#x27;foo&#x27;</span>&#125;)</span><br><span class="line">print(df3)</span><br></pre></td></tr></table></figure> Result: <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">    A       B         C    D     E      F</span><br><span class="line"><span class="number">0</span>  <span class="number">1.0</span>  <span class="number">2016</span>-09-01   <span class="number">1.0</span>   <span class="number">3</span>    test   foo</span><br><span class="line"><span class="number">1</span>  <span class="number">1.0</span>  <span class="number">2016</span>-09-01   <span class="number">1.0</span>   <span class="number">3</span>   train   foo</span><br><span class="line"><span class="number">2</span>  <span class="number">1.0</span>  <span class="number">2016</span>-09-01   <span class="number">1.0</span>   <span class="number">3</span>    test   foo</span><br><span class="line"><span class="number">3</span>  <span class="number">1.0</span>  <span class="number">2016</span>-09-01   <span class="number">1.0</span>   <span class="number">3</span>   train   foo</span><br></pre></td></tr></table></figure></p></li>
<li><p>By Series <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># np.nan means NaN</span></span><br><span class="line">s = pd.Series([<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, np.nan, <span class="number">44</span>, <span class="number">1</span>])</span><br><span class="line">print(s)</span><br></pre></td></tr></table></figure> Result: <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">0</span>     <span class="number">1.0</span></span><br><span class="line"><span class="number">1</span>     <span class="number">3.0</span></span><br><span class="line"><span class="number">2</span>     <span class="number">5.0</span></span><br><span class="line"><span class="number">3</span>     NaN</span><br><span class="line"><span class="number">4</span>    <span class="number">44.0</span></span><br><span class="line"><span class="number">5</span>     <span class="number">1.0</span></span><br><span class="line">dtype: float64</span><br></pre></td></tr></table></figure></p></li>
<li><p>By np.array <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># create a dataframe based on imported array</span></span><br><span class="line">df0 = pd.DataFrame(np.random.randn(<span class="number">6</span>,<span class="number">4</span>), index = dates, columns = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>])</span><br><span class="line">df1 = pd.DataFrame(np.arange(<span class="number">12</span>).reshape(<span class="number">3</span>,<span class="number">4</span>))</span><br><span class="line">print(df1, df3, sep = <span class="string">&#x27;\n&#x27;</span>)</span><br></pre></td></tr></table></figure></p></li>
</ul>
<h2 id="basic-information">1.4 Basic information</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df3 = pd.DataFrame(&#123;<span class="string">&#x27;A&#x27;</span>:<span class="number">1.</span>, <span class="string">&#x27;B&#x27;</span>:pd.Timestamp(<span class="string">&#x27;20160901&#x27;</span>),</span><br><span class="line">      <span class="string">&#x27;C&#x27;</span>:pd.Series(<span class="number">1</span>,index=<span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">4</span>)),dtype=<span class="string">&#x27;float32&#x27;</span>),</span><br><span class="line">      <span class="string">&#x27;D&#x27;</span>:np.array([<span class="number">3</span>]*<span class="number">4</span>, dtype =<span class="string">&#x27;int32&#x27;</span>),</span><br><span class="line">      <span class="string">&#x27;E&#x27;</span>:pd.Categorical([<span class="string">&#x27;test&#x27;</span>,<span class="string">&#x27;train&#x27;</span>,<span class="string">&#x27;test&#x27;</span>,<span class="string">&#x27;train&#x27;</span>]),</span><br><span class="line">      <span class="string">&#x27;F&#x27;</span>:<span class="string">&#x27;foo&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure>
<ul>
<li><p>Dtype of each dimensional <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df3.dtypes <span class="comment"># dimensional type</span></span><br></pre></td></tr></table></figure></p></li>
<li><p>Row and column index <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df3.index <span class="comment"># row index name</span></span><br><span class="line">df3.columns <span class="comment"># column name</span></span><br></pre></td></tr></table></figure></p></li>
<li><p>Statistical description</p>
<p>Describe numerical characteristics, including count, mean, std, min etc. <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df3.describe() <span class="comment"># describe numerical characteristics, including count, mean, std, min etc.</span></span><br></pre></td></tr></table></figure> Result: <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">        A    C    D</span><br><span class="line">count  <span class="number">4.0</span>  <span class="number">4.0</span>  <span class="number">4.0</span></span><br><span class="line">mean   <span class="number">1.0</span>  <span class="number">1.0</span>  <span class="number">3.0</span></span><br><span class="line">std    <span class="number">0.0</span>  <span class="number">0.0</span>  <span class="number">0.0</span></span><br><span class="line"><span class="built_in">min</span>    <span class="number">1.0</span>  <span class="number">1.0</span>  <span class="number">3.0</span></span><br><span class="line"><span class="number">25</span>%    <span class="number">1.0</span>  <span class="number">1.0</span>  <span class="number">3.0</span></span><br><span class="line"><span class="number">50</span>%    <span class="number">1.0</span>  <span class="number">1.0</span>  <span class="number">3.0</span></span><br><span class="line"><span class="number">75</span>%    <span class="number">1.0</span>  <span class="number">1.0</span>  <span class="number">3.0</span></span><br><span class="line"><span class="built_in">max</span>    <span class="number">1.0</span>  <span class="number">1.0</span>  <span class="number">3.0</span></span><br></pre></td></tr></table></figure></p></li>
</ul>
<h2 id="data-type">1.5 Data type</h2>
<ul>
<li><p>Specifies the type when creation <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">dfx = pd.DataFrame([[<span class="string">&#x27;11&#x27;</span>, <span class="number">1.2</span>, <span class="number">3</span>], [<span class="string">&#x27;22&#x27;</span>, <span class="number">4.8</span>, <span class="number">5</span>],],</span><br><span class="line">    columns = <span class="built_in">list</span>(<span class="string">&#x27;abc&#x27;</span>), dtype = np.<span class="built_in">object</span>)</span><br><span class="line">dfx.dtypes</span><br></pre></td></tr></table></figure> Result: <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a       <span class="built_in">object</span></span><br><span class="line">b       <span class="built_in">object</span></span><br><span class="line">c       <span class="built_in">object</span></span><br><span class="line">dtype:  <span class="built_in">object</span></span><br></pre></td></tr></table></figure></p></li>
<li><p>Coercion <code>df.astype()</code> <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dfx[[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]] = dfx[[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]].astype(<span class="string">&#x27;float&#x27;</span>))</span><br><span class="line">dfx.dtypes</span><br></pre></td></tr></table></figure> Result: <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a       float64</span><br><span class="line">b       float64</span><br><span class="line">c       float64</span><br><span class="line">dtype:  <span class="built_in">object</span></span><br></pre></td></tr></table></figure></p></li>
<li><p>Turn into numeric <code>pd.to_numeric()</code> <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dfy = pd.DataFrame([[<span class="string">&#x27;11&#x27;</span>, <span class="number">1.2</span>, <span class="number">3</span>], [<span class="string">&#x27;22&#x27;</span>, <span class="number">4.8</span>, <span class="string">&#x27;?&#x27;</span>], ],</span><br><span class="line">        columns = <span class="built_in">list</span>(<span class="string">&#x27;abc&#x27;</span>), dtype = np.<span class="built_in">object</span>)</span><br><span class="line">dfy[<span class="string">&#x27;a&#x27;</span>] = pd.to_numeric(dfy[<span class="string">&#x27;a&#x27;</span>])</span><br><span class="line">print(dfy.dtypes)</span><br></pre></td></tr></table></figure></p>
<p>Use <code>pd.apply</code> to apply it to the entire dataframe. <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dfy1 = dfy.apply(pd.to_numeric, errors = <span class="string">&#x27;ignore&#x27;</span>)</span><br><span class="line"> <span class="comment"># Igonre and don&#x27;t change this column when meet errors,</span></span><br><span class="line">dfy2 = dfy.apply(pd.to_numeric, errors = <span class="string">&#x27;coerce&#x27;</span>)</span><br><span class="line"> <span class="comment"># Transfer the value into NaN when meet errors.</span></span><br><span class="line">print(dfy.dtypes)</span><br><span class="line">print(<span class="string">&#x27;-------------------------&#x27;</span>)</span><br><span class="line">print(dfy2)</span><br></pre></td></tr></table></figure> Result: <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a       int64</span><br><span class="line">b       float64</span><br><span class="line">c       float64</span><br><span class="line">dtype:  <span class="built_in">object</span></span><br><span class="line">-------------------------</span><br><span class="line">    a   b    c</span><br><span class="line"><span class="number">0</span>  <span class="number">11</span>  <span class="number">1.2</span>  <span class="number">3.0</span></span><br><span class="line"><span class="number">1</span>  <span class="number">22</span>  <span class="number">4.8</span>  NaN</span><br></pre></td></tr></table></figure></p></li>
</ul>
<h1 id="choose-data">2 Choose data</h1>
<h2 id="basic-operation">2.1 Basic operation</h2>
<ul>
<li><p>Import modules and generate datas <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">df = pd.DataFrame(&#123;<span class="string">&#x27;A&#x27;</span>:<span class="number">1.</span>, <span class="string">&#x27;B&#x27;</span>:pd.Timestamp(<span class="string">&#x27;20160901&#x27;</span>),</span><br><span class="line">       <span class="string">&#x27;C&#x27;</span>:pd.Series(<span class="number">1</span>,index=<span class="built_in">list</span>(arange(<span class="number">4</span>)),dtype=<span class="string">&#x27;float32&#x27;</span>),</span><br><span class="line">       <span class="string">&#x27;D&#x27;</span>:np.array([<span class="number">3</span>]*<span class="number">4</span>, dtype =<span class="string">&#x27;int32&#x27;</span>),</span><br><span class="line">       <span class="string">&#x27;E&#x27;</span>:pd.Categorical([<span class="string">&#x27;test&#x27;</span>,<span class="string">&#x27;train&#x27;</span>,<span class="string">&#x27;test&#x27;</span>,<span class="string">&#x27;train&#x27;</span>]),</span><br><span class="line">       <span class="string">&#x27;F&#x27;</span>:<span class="string">&#x27;foo&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure></p></li>
<li><p>Row operation <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df2 = df[<span class="number">0</span>:<span class="number">3</span>] <span class="comment"># row operation, 0-3 row</span></span><br><span class="line">df2_1 = df[<span class="number">0</span>:<span class="number">1</span>] <span class="comment"># single row</span></span><br></pre></td></tr></table></figure></p></li>
<li><p>Column operation <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df1 = df.A <span class="comment"># same sa df.[&#x27;A&#x27;]</span></span><br><span class="line">df2_2 = df[<span class="string">&#x27;A&#x27;</span>] <span class="comment"># single column</span></span><br></pre></td></tr></table></figure> ## 2.2 Index methods</p></li>
<li><p><code>loc</code></p>
<p>Select datas by label based index. <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># select by label based index: loc</span></span><br><span class="line">df3 = df.loc[<span class="number">1</span>] <span class="comment"># the second row</span></span><br></pre></td></tr></table></figure></p></li>
<li><p><code>iloc</code></p>
<p>Select datas by postitional index. <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># selct by postitional index: iloc</span></span><br><span class="line">df4 = df.iloc[:,<span class="number">1</span>:<span class="number">3</span>] <span class="comment"># 1-3 column</span></span><br></pre></td></tr></table></figure></p></li>
<li><p><code>ix</code></p>
<p>Select datas by mixed selection. <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># mixed selection: ix</span></span><br><span class="line">df5 = df.ix[:<span class="number">2</span>,[<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;D&#x27;</span>]] <span class="comment"># deprecated</span></span><br></pre></td></tr></table></figure> ## 2.3 Conditional operation</p></li>
<li><p>Logic expression <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df6 = df[df[<span class="string">&#x27;A&#x27;</span>] &gt; <span class="number">4</span>]</span><br></pre></td></tr></table></figure> <code>df['A'] &gt; 4</code> return the row index which number is bigger than 4, let me name this index as <code>iRow</code>, then <code>df[iRow]</code> return the row date that meets above filter condition.</p></li>
</ul>
<h2 id="functional-methods">2.4 Functional methods</h2>
<ul>
<li><code>tail</code> <code>df.tail(n)</code> returns last <code>n</code> rows from the DataFrame object based on position. It is useful for quickly verifying data. For negative values of <code>n</code>, it returns all rows except the first <code>n</code> rows, equivalent to <code>df[n:]</code>. <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df.tail() <span class="comment"># Default n is 5</span></span><br><span class="line">df.tail(<span class="number">3</span>) <span class="comment"># Return last 3 rows</span></span><br><span class="line">df.tail(-<span class="number">5</span>) <span class="comment"># Return all rows except the first 5 row.</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="dataframe-operation">3 DataFrame operation</h1>
<ul>
<li><p>Preparation <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">df = pd.DataFrame(&#123;<span class="string">&#x27;A&#x27;</span>:<span class="number">1.</span>, <span class="string">&#x27;B&#x27;</span>:pd.Timestamp(<span class="string">&#x27;20160901&#x27;</span>),</span><br><span class="line">    <span class="string">&#x27;C&#x27;</span>:pd.Series(<span class="number">1</span>,index=<span class="built_in">list</span>(arange(<span class="number">4</span>)),dtype=<span class="string">&#x27;float32&#x27;</span>),</span><br><span class="line">    <span class="string">&#x27;D&#x27;</span>:np.array([<span class="number">3</span>]*<span class="number">4</span>, dtype =<span class="string">&#x27;int32&#x27;</span>),</span><br><span class="line">    <span class="string">&#x27;E&#x27;</span>:pd.Categorical([<span class="string">&#x27;test&#x27;</span>,<span class="string">&#x27;train&#x27;</span>,<span class="string">&#x27;test&#x27;</span>,<span class="string">&#x27;train&#x27;</span>]),</span><br><span class="line">    <span class="string">&#x27;F&#x27;</span>:<span class="string">&#x27;foo&#x27;</span>&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure> ## 3.1 Value operation</p></li>
<li><p>Set value</p>
<p>Pay attention to the difference. <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df.iloc[<span class="number">2</span>, <span class="number">2</span>] = <span class="number">111</span></span><br><span class="line">df.loc[<span class="number">0</span>,<span class="string">&#x27;B&#x27;</span>] = pd.Timestamp(<span class="string">&#x27;20180901&#x27;</span>)</span><br><span class="line"><span class="comment"># Note: below command will create a new column named (0, &#x27;B&#x27;) which values are given</span></span><br><span class="line">df[<span class="number">0</span>,<span class="string">&#x27;B&#x27;</span>] = pd.Timestamp(<span class="string">&#x27;20180901&#x27;</span>)</span><br></pre></td></tr></table></figure></p></li>
<li><p>Change value</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df.iloc[<span class="number">2</span>, <span class="number">2</span>] = <span class="number">111</span></span><br><span class="line">df.loc[<span class="number">0</span>,<span class="string">&#x27;C&#x27;</span>] = np.nan</span><br></pre></td></tr></table></figure></li>
<li><p>Fillna <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Fill NaN, can&#x27;t do it with df.fillna(0)</span></span><br><span class="line">df[<span class="string">&#x27;C&#x27;</span>] = df[<span class="string">&#x27;C&#x27;</span>].fillna(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># maybe below command also can work?</span></span><br><span class="line">df_1 = df.fillna(<span class="number">0</span>)</span><br></pre></td></tr></table></figure></p></li>
<li><p>Dropna <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Drop NaN</span></span><br><span class="line">df.dropna(axis =<span class="number">0</span>, how = <span class="string">&#x27;any&#x27;</span>)</span><br><span class="line"><span class="comment"># how = [&#x27;any, &#x27;all&#x27;], default is any</span></span><br></pre></td></tr></table></figure> ## 3.2 Advance operation</p></li>
<li><p>isnull <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df.isnull() <span class="comment"># find which position is null, return a dataframe same size as df</span></span><br><span class="line">np.<span class="built_in">any</span>(df.isnull()) == <span class="literal">True</span></span><br></pre></td></tr></table></figure></p></li>
<li><p>Transpose <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df.T</span><br><span class="line">df.transpose() <span class="comment"># transpose array</span></span><br></pre></td></tr></table></figure></p></li>
<li><p>Sort <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df.sort_index(axis = <span class="number">1</span>, ascending = <span class="literal">False</span>)</span><br><span class="line"><span class="comment"># horizontal descending sort</span></span><br></pre></td></tr></table></figure></p></li>
</ul>
<h1 id="merge-dataframes">4 Merge dataframes</h1>
<ul>
<li>Preparation <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1 array multiply o is o</span></span><br><span class="line">df1 = pd.DataFrame(np.ones((<span class="number">3</span>, <span class="number">4</span>)) * <span class="number">0</span>, columns = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>])</span><br><span class="line">df2 = pd.DataFrame(np.ones((<span class="number">3</span>, <span class="number">4</span>)) * <span class="number">1</span>, columns = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>])</span><br><span class="line">df3 = pd.DataFrame(np.ones((<span class="number">3</span>, <span class="number">4</span>)) * <span class="number">2</span>, columns = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>])</span><br></pre></td></tr></table></figure> ## 4.1 Concatenation</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">res = pd.concat([df1, df2, df3], axis = <span class="number">0</span>, ignore_index = <span class="literal">True</span>) <span class="comment"># default don&#x27;t ignore index, the difference seen in below pic</span></span><br></pre></td></tr></table></figure>
<p><img src="https://s3.ax1x.com/2020/11/25/DamaCR.png" /></p>
<center>
fig. 1 difference of ignoring index
</center>
<ul>
<li><p><strong>join = ['inner', 'outer']</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">df1 = pd.DataFrame(np.ones((<span class="number">3</span>, <span class="number">4</span>)) * <span class="number">0</span>, columns = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>], index = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line">df2 = pd.DataFrame(np.ones((<span class="number">3</span>, <span class="number">4</span>)) * <span class="number">1</span>, columns = [<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>], index = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># default join is outer, fill the null space with NaN</span></span><br><span class="line">df3 = pd.concat([df1, df2], axis = <span class="number">0</span>, join = <span class="string">&#x27;outer&#x27;</span>, sort=<span class="literal">False</span>, ignore_index = <span class="literal">True</span>)</span><br><span class="line"><span class="comment"># inner will take the intersection index of two arrays</span></span><br><span class="line">df4 = pd.concat([df1, df2], axis = <span class="number">0</span>, join = <span class="string">&#x27;inner&#x27;</span>, sort=<span class="literal">False</span>, ignore_index = <span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将 df2 合并到 df1，并基于 index 去掉 df2 中有而 df1 没有的数据， 并填充 NaN</span></span><br><span class="line">df5 = pd.concat([df1, df2], axis = <span class="number">1</span>, join_axes = [df1.index])</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="append">4.2 append</h2>
<p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">df1 &#x3D; pd.DataFrame(np.ones((3, 4)) * 0, columns &#x3D; [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;])</span><br><span class="line">df2 &#x3D; pd.DataFrame(np.ones((3, 4)) * 1, columns &#x3D; [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;])</span><br><span class="line">df3 &#x3D; pd.DataFrame(np.ones((3, 4)) * 1, columns &#x3D; [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;])</span><br><span class="line"></span><br><span class="line">res &#x3D; df1.append([df2, df3], ignore_index &#x3D; True)</span><br><span class="line"></span><br><span class="line"># add a row series into a df</span><br><span class="line">s1 &#x3D; pd.Series([1, 2, 3, 4], index &#x3D; [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;])</span><br><span class="line">res1 &#x3D; df1.append(s1, ignore_index &#x3D; True)</span><br></pre></td></tr></table></figure></p>
<h2 id="merge">4.3 merge</h2>
<ul>
<li><p>merged by single key</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">left = pd.DataFrame(&#123;<span class="string">&#x27;key&#x27;</span>: [<span class="string">&#x27;K0&#x27;</span>, <span class="string">&#x27;K1&#x27;</span>, <span class="string">&#x27;K2&#x27;</span>, <span class="string">&#x27;K3&#x27;</span>],<span class="string">&#x27;A&#x27;</span>: [<span class="string">&#x27;A0&#x27;</span>, <span class="string">&#x27;A1&#x27;</span>, <span class="string">&#x27;A2&#x27;</span>, <span class="string">&#x27;A3&#x27;</span>],<span class="string">&#x27;B&#x27;</span>: [<span class="string">&#x27;B0&#x27;</span>, <span class="string">&#x27;B1&#x27;</span>, <span class="string">&#x27;B2&#x27;</span>, <span class="string">&#x27;B3&#x27;</span>]&#125;)</span><br><span class="line">right = pd.DataFrame(&#123;<span class="string">&#x27;key&#x27;</span>: [<span class="string">&#x27;K0&#x27;</span>, <span class="string">&#x27;K1&#x27;</span>, <span class="string">&#x27;K2&#x27;</span>, <span class="string">&#x27;K3&#x27;</span>],<span class="string">&#x27;C&#x27;</span>: [<span class="string">&#x27;C0&#x27;</span>, <span class="string">&#x27;C1&#x27;</span>, <span class="string">&#x27;C2&#x27;</span>, <span class="string">&#x27;C3&#x27;</span>],<span class="string">&#x27;D&#x27;</span>: [<span class="string">&#x27;D0&#x27;</span>, <span class="string">&#x27;D1&#x27;</span>, <span class="string">&#x27;D2&#x27;</span>, <span class="string">&#x27;D3&#x27;</span>]&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># merge two dfs based on the same key value</span></span><br><span class="line">res = pd.merge(left, right, on = <span class="string">&#x27;key&#x27;</span>)</span><br></pre></td></tr></table></figure></li>
<li><p>merged by multiple keys</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">left = pd.DataFrame(&#123;<span class="string">&#x27;key1&#x27;</span>: [<span class="string">&#x27;K0&#x27;</span>, <span class="string">&#x27;K0&#x27;</span>, <span class="string">&#x27;K1&#x27;</span>, <span class="string">&#x27;K2&#x27;</span>],<span class="string">&#x27;key2&#x27;</span>: [<span class="string">&#x27;K0&#x27;</span>, <span class="string">&#x27;K1&#x27;</span>, <span class="string">&#x27;K0&#x27;</span>, <span class="string">&#x27;K1&#x27;</span>],<span class="string">&#x27;A&#x27;</span>: [<span class="string">&#x27;A0&#x27;</span>, <span class="string">&#x27;A1&#x27;</span>, 		<span class="string">&#x27;A2&#x27;</span>, <span class="string">&#x27;A3&#x27;</span>],<span class="string">&#x27;B&#x27;</span>: [<span class="string">&#x27;B0&#x27;</span>, <span class="string">&#x27;B1&#x27;</span>, <span class="string">&#x27;B2&#x27;</span>, <span class="string">&#x27;B3&#x27;</span>]&#125;)</span><br><span class="line">right = pd.DataFrame(&#123;<span class="string">&#x27;key1&#x27;</span>: [<span class="string">&#x27;K0&#x27;</span>, <span class="string">&#x27;K1&#x27;</span>, <span class="string">&#x27;K1&#x27;</span>, <span class="string">&#x27;K2&#x27;</span>],<span class="string">&#x27;key2&#x27;</span>: [<span class="string">&#x27;K0&#x27;</span>, <span class="string">&#x27;K1&#x27;</span>, <span class="string">&#x27;K0&#x27;</span>, <span class="string">&#x27;K0&#x27;</span>],<span class="string">&#x27;C&#x27;</span>: [<span class="string">&#x27;C0&#x27;</span>, <span class="string">&#x27;C1&#x27;</span>, 		<span class="string">&#x27;C2&#x27;</span>, <span class="string">&#x27;C3&#x27;</span>],<span class="string">&#x27;D&#x27;</span>: [<span class="string">&#x27;D0&#x27;</span>, <span class="string">&#x27;D1&#x27;</span>, <span class="string">&#x27;D2&#x27;</span>, <span class="string">&#x27;D3&#x27;</span>]&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># merge two dfs based the same key value, default how = inner</span></span><br><span class="line">res1 = pd.merge(left, right, on = [<span class="string">&#x27;key1&#x27;</span>,<span class="string">&#x27;key2&#x27;</span>])</span><br><span class="line">res2 = pd.merge(left, right, on = [<span class="string">&#x27;key1&#x27;</span>,<span class="string">&#x27;key2&#x27;</span>], how = <span class="string">&#x27;inner&#x27;</span>)</span><br><span class="line">res2 = pd.merge(left, right, on = [<span class="string">&#x27;key1&#x27;</span>,<span class="string">&#x27;key2&#x27;</span>], indicator = <span class="literal">True</span>)</span><br></pre></td></tr></table></figure>
<p><code>how = ['inner, 'outer','left','right']</code>, if <code>how = 'right'</code>, this operation will fill left void space with NaN when left haven't same key value with right, then merge into right.</p>
<p>default <code>indicator</code> is <code>False</code>, this parameter will create a new column named _merge(indicator = 'indicator_column', then the new column's name is indicator_column), which show if both arrays have a meanful value.</p></li>
<li><p>merged by index</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">left = pd.DataFrame(&#123;<span class="string">&#x27;A&#x27;</span>: [<span class="string">&#x27;A0&#x27;</span>, <span class="string">&#x27;A1&#x27;</span>, <span class="string">&#x27;A2&#x27;</span>, <span class="string">&#x27;A3&#x27;</span>],<span class="string">&#x27;B&#x27;</span>: [<span class="string">&#x27;B0&#x27;</span>, <span class="string">&#x27;B1&#x27;</span>, <span class="string">&#x27;B2&#x27;</span>, <span class="string">&#x27;B3&#x27;</span>]&#125;, index = [<span class="string">&#x27;K0&#x27;</span>, <span class="string">&#x27;K1&#x27;</span>, <span class="string">&#x27;K2&#x27;</span>,<span class="string">&#x27;K4&#x27;</span>])</span><br><span class="line">right = pd.DataFrame(&#123;<span class="string">&#x27;C&#x27;</span>: [<span class="string">&#x27;C0&#x27;</span>, <span class="string">&#x27;C1&#x27;</span>, <span class="string">&#x27;C2&#x27;</span>, <span class="string">&#x27;C3&#x27;</span>],<span class="string">&#x27;D&#x27;</span>: [<span class="string">&#x27;D0&#x27;</span>, <span class="string">&#x27;D1&#x27;</span>, <span class="string">&#x27;D2&#x27;</span>, <span class="string">&#x27;D3&#x27;</span>]&#125;, index = [<span class="string">&#x27;K0&#x27;</span>, <span class="string">&#x27;K1&#x27;</span>, <span class="string">&#x27;K3&#x27;</span>,<span class="string">&#x27;K5&#x27;</span>])</span><br><span class="line">print(left, right, sep = <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># left_index and right_index</span></span><br><span class="line">res1 = pd.merge(left, right, left_index = <span class="literal">True</span>, right_index = <span class="literal">True</span>, how = <span class="string">&#x27;inner&#x27;</span>) <span class="comment"># based on left_index = right_index</span></span><br><span class="line">res2 = pd.merge(left, right, left_index = <span class="literal">True</span>, right_index = <span class="literal">True</span>, how = <span class="string">&#x27;outer&#x27;</span>) <span class="comment"># fill the blank with NaN</span></span><br></pre></td></tr></table></figure></li>
<li><p>suffixes para</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">boys = pd.DataFrame(&#123;<span class="string">&#x27;K&#x27;</span>: [<span class="string">&#x27;K0&#x27;</span>, <span class="string">&#x27;K1&#x27;</span>, <span class="string">&#x27;K2&#x27;</span>,<span class="string">&#x27;K4&#x27;</span>],<span class="string">&#x27;age&#x27;</span>: [<span class="number">11</span>, <span class="number">23</span>, <span class="number">32</span>, <span class="number">12</span>]&#125;)</span><br><span class="line">girls = pd.DataFrame(&#123;<span class="string">&#x27;K&#x27;</span>: [<span class="string">&#x27;K0&#x27;</span>, <span class="string">&#x27;K1&#x27;</span>, <span class="string">&#x27;K2&#x27;</span>,<span class="string">&#x27;K4&#x27;</span>],<span class="string">&#x27;age&#x27;</span>: [<span class="number">14</span>, <span class="number">43</span>, <span class="number">12</span>, <span class="number">22</span>]&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># suffixex means the named methods of same positional column</span></span><br><span class="line">res = pd.merge(boys, girls, on = <span class="string">&#x27;K&#x27;</span>, suffixes = [<span class="string">&#x27;_boys&#x27;</span>, <span class="string">&#x27;_girls&#x27;</span>], how = <span class="string">&#x27;inner&#x27;</span>)</span><br><span class="line">print(res) <span class="comment">#  age_boys  age_girls</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="read-and-save-file">5 Read and save file</h1>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">data = pd.read_csv(<span class="string">&#x27;xx.csv&#x27;</span>) <span class="comment"># read</span></span><br><span class="line">data.to_csv(<span class="string">&#x27;xxx.csv&#x27;</span>) <span class="comment"># save file</span></span><br></pre></td></tr></table></figure>
<h1 id="matplotlib">6 matplotlib</h1>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">data1 = pd.Series(np.random.randn(<span class="number">1000</span>), index = np.arange(<span class="number">1000</span>))</span><br><span class="line">data2 = pd.DataFrame(np.random.randn(<span class="number">1000</span>, <span class="number">4</span>), index = np.arange(<span class="number">1000</span>), columns = <span class="built_in">list</span>(<span class="string">&#x27;ABCD&#x27;</span>))</span><br><span class="line"><span class="comment"># print(data1, data2, sep = &#x27;\n&#x27;)</span></span><br><span class="line">data1 = data1.cumsum()</span><br><span class="line">data2 = data2.cumsum()</span><br><span class="line"><span class="comment"># print(data)</span></span><br><span class="line">data1.plot()</span><br><span class="line">data2.plot()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<ul>
<li><p>plot methods</p>
<p>bar, hist, box, kde, area, scatter, hexbin, pie</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">data = pd.DataFrame(np.random.randn(<span class="number">1000</span>, <span class="number">4</span>), index = np.arange(<span class="number">1000</span>), columns = <span class="built_in">list</span>(<span class="string">&#x27;ABCD&#x27;</span>))</span><br><span class="line"></span><br><span class="line">data = data.cumsum()</span><br><span class="line"></span><br><span class="line">ax = data.plot.scatter(x = <span class="string">&#x27;A&#x27;</span>, y = <span class="string">&#x27;B&#x27;</span>,color = <span class="string">&#x27;DarkBlue&#x27;</span>, label = <span class="string">&#x27;Class1&#x27;</span>)</span><br><span class="line">data.plot.scatter(x = <span class="string">&#x27;A&#x27;</span>, y = <span class="string">&#x27;C&#x27;</span>,color = <span class="string">&#x27;DarkGreen&#x27;</span>,label = <span class="string">&#x27;Class2&#x27;</span>,ax = ax)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<p>Result:</p>
<p><img src="https://s3.ax1x.com/2020/11/25/Damd81.png" /></p>
<center>
<p>fig. 2 scatter figure</p>
</center></li>
</ul>
]]></content>
      <categories>
        <category>Notes</category>
        <category>Python module</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Data analysis</tag>
        <tag>Pandas</tag>
      </tags>
  </entry>
  <entry>
    <title>PDF_test</title>
    <url>/2020/12/01/PDF-test/</url>
    <content><![CDATA[<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;% pdf https://yangsuoly.com/file/Latex-Notes.pdf %&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
]]></content>
      <categories>
        <category>Notes</category>
        <category>Latex</category>
      </categories>
      <tags>
        <tag>Latex</tag>
      </tags>
  </entry>
  <entry>
    <title>Scikit-learn</title>
    <url>/2020/11/22/Scikit-learn/</url>
    <content><![CDATA[<h1 id="installing-scikit-learn">1 Installing scikit-learn</h1>
<ul>
<li><p>Windows</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip install -U scikit-learn</span><br></pre></td></tr></table></figure></li>
<li><p>macOS</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip install -U scikit-learn</span><br></pre></td></tr></table></figure></li>
<li><p>Linux</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip3 install -U scikit-learn</span><br></pre></td></tr></table></figure></li>
</ul>
<p>Check installation:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip show scikit-learn</span><br></pre></td></tr></table></figure>
<p>See more about scikit-learn via clicking <a href="https://scikit-learn.org/stable/index.html#">here</a>.</p>
<a id="more"></a>
<h1 id="general-study-mode">2 General study mode</h1>
<p>Steps:</p>
<ol type="1">
<li>Load datas</li>
<li>Split datas into two part: train and test part</li>
<li>Training model</li>
<li>Testing and evaluating model</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># instance for iris</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np </span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> datasets</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"><span class="keyword">from</span> sklearn.neighbors <span class="keyword">import</span> KNeighborsClassifier</span><br><span class="line"></span><br><span class="line">iris = datasets.load_iris()</span><br><span class="line">iris_x = iris.data <span class="comment"># features</span></span><br><span class="line">iris_y = iris.target <span class="comment"># types</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># print(iris_X[:2, :])</span></span><br><span class="line">x_train, x_test, y_train, y_test = train_test_split(iris_x, iris_y, test_size = <span class="number">0.3</span>) <span class="comment"># split original data into train and test part</span></span><br><span class="line"><span class="comment"># the percentage of test sets is 30%</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># print(y_train) # 会打乱原始数据</span></span><br><span class="line">knn = KNeighborsClassifier() <span class="comment"># Classifier</span></span><br><span class="line">knn.fit(x_train, y_train) <span class="comment"># Train</span></span><br><span class="line">print(knn.predict(x_test)) <span class="comment"># Use trained model to predict</span></span><br><span class="line">print(y_test)</span><br></pre></td></tr></table></figure>
<p>Result:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[<span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">2</span> <span class="number">2</span> <span class="number">0</span> <span class="number">0</span> <span class="number">2</span> <span class="number">1</span> <span class="number">0</span> <span class="number">2</span> <span class="number">0</span> <span class="number">0</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">2</span> <span class="number">1</span> <span class="number">0</span> <span class="number">2</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">1</span> <span class="number">2</span> <span class="number">0</span> <span class="number">2</span> <span class="number">2</span>]</span><br><span class="line">[<span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">2</span> <span class="number">2</span> <span class="number">0</span> <span class="number">0</span> <span class="number">2</span> <span class="number">1</span> <span class="number">0</span> <span class="number">2</span> <span class="number">0</span> <span class="number">0</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">2</span> <span class="number">1</span> <span class="number">0</span> <span class="number">2</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">1</span> <span class="number">2</span> <span class="number">0</span> <span class="number">2</span> <span class="number">2</span>]</span><br></pre></td></tr></table></figure>
<h1 id="sklearn.datasets">3 Sklearn.datasets</h1>
<h2 id="generate-regressiong-datas">3.1 Generate regressiong datas</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># instance for making datasets</span></span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> datasets</span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LinearRegression</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">X, y = datasets.make_regression(n_samples = <span class="number">100</span>, </span><br><span class="line">                n_features = <span class="number">1</span>, n_targets = <span class="number">1</span>, noise = <span class="number">2</span>)</span><br><span class="line"><span class="comment"># X, y = datasets.make_regression(n_samples = 100, </span></span><br><span class="line"><span class="comment">#                 n_features = 1, n_targets = 1, noise = 10)</span></span><br><span class="line"></span><br><span class="line">plt.scatter(X, y)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<p>Result:<img src="https://s3.ax1x.com/2020/11/25/DUaqr4.png" /></p>
<center>
fig. 3-1 Synthetic data
</center>
<h2 id="load-datasets-of-linear-regression">3.2 Load datasets of Linear Regression</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># instance for loading boston datasets</span></span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> datasets</span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LinearRegression</span><br><span class="line"></span><br><span class="line"><span class="comment"># LinearRegression example</span></span><br><span class="line">loaded_data = datasets.load_boston()</span><br><span class="line"><span class="comment"># X, y = datasets_loadboston(retern_X_y = true)</span></span><br><span class="line">data_X, data_y = loaded_data.data, loaded_data.target</span><br><span class="line"></span><br><span class="line">model = LinearRegression()</span><br><span class="line">model.fit(data_X, data_y)</span><br><span class="line"></span><br><span class="line">print(data_y[:<span class="number">4</span>])</span><br><span class="line">print(model.predict(data_X[:<span class="number">4</span>, :]))</span><br></pre></td></tr></table></figure>
<p>Result:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[<span class="number">24.</span>  <span class="number">21.6</span> <span class="number">34.7</span> <span class="number">33.4</span>]</span><br><span class="line">[<span class="number">30.00384338</span> <span class="number">25.02556238</span> <span class="number">30.56759672</span> <span class="number">28.60703649</span>]</span><br></pre></td></tr></table></figure>
<h2 id="normalization">3.3 Normalization</h2>
<ul>
<li><p>Demo</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> preprocessing</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"><span class="comment"># cross_validation 更新为 model_selection</span></span><br><span class="line"><span class="keyword">from</span> sklearn.datasets.samples_generator <span class="keyword">import</span> make_classification</span><br><span class="line"><span class="keyword">from</span> sklearn.svm <span class="keyword">import</span> SVC</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"> a = np.array([[<span class="number">10</span>, <span class="number">2.7</span>, <span class="number">3.6</span>],</span><br><span class="line">               [-<span class="number">100</span>, <span class="number">5</span>, <span class="number">2</span>],</span><br><span class="line">               [<span class="number">120</span>, <span class="number">20</span>, <span class="number">40</span>]], dtype = np.float64)</span><br><span class="line"></span><br><span class="line">print(a)</span><br><span class="line">print(preprocessing.scale(a)) <span class="comment"># normalization</span></span><br></pre></td></tr></table></figure>
<p>Result:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[[  <span class="number">10.</span>     <span class="number">2.7</span>    <span class="number">3.6</span>]</span><br><span class="line"> [-<span class="number">100.</span>     <span class="number">5.</span>     <span class="number">2.</span> ]</span><br><span class="line"> [ <span class="number">120.</span>    <span class="number">20.</span>    <span class="number">40.</span> ]]</span><br><span class="line">[[ <span class="number">0.</span>         -<span class="number">0.85170713</span> -<span class="number">0.66102858</span>]</span><br><span class="line"> [-<span class="number">1.22474487</span> -<span class="number">0.55187146</span> -<span class="number">0.75220493</span>]</span><br><span class="line"> [ <span class="number">1.22474487</span>  <span class="number">1.40357859</span>  <span class="number">1.41323351</span>]]</span><br></pre></td></tr></table></figure></li>
<li><p>Comparison of accuracy before and after normalization</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> preprocessing</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"><span class="comment"># cross_validation 更新为 model_selection</span></span><br><span class="line"><span class="keyword">from</span> sklearn.datasets.samples_generator <span class="keyword">import</span> make_classification</span><br><span class="line"><span class="keyword">from</span> sklearn.svm <span class="keyword">import</span> SVC</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">X, y = make_classification(n_samples = <span class="number">300</span>, n_features = <span class="number">2</span>, n_redundant = <span class="number">0</span>,n_informative = <span class="number">2</span>, random_state = <span class="number">22</span>, n_clusters_per_class = <span class="number">1</span>, scale = <span class="number">100</span>)</span><br><span class="line"><span class="comment"># random_state: 固定随机数</span></span><br><span class="line"></span><br><span class="line">plt.scatter(X[:, <span class="number">0</span>], X[:, <span class="number">1</span>], c = y)</span><br><span class="line">plt.title(<span class="string">&#x27;Classification samples&#x27;</span>)</span><br><span class="line">plt.show() <span class="comment"># </span></span><br></pre></td></tr></table></figure>
<p>Plot the generated samples:<img src="https://s3.ax1x.com/2020/11/25/DUajaR.png" /></p>
<center>
<p>fig. 3-2 Samples</p>
</center>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">X_train, X_test, y_train, y_test = train_test_split(X, y ,test_size = <span class="number">.3</span>)</span><br><span class="line">clf = SVC()</span><br><span class="line">clf.fit(X_train, y_train)</span><br><span class="line">print(clf.score(X_test, y_test))</span><br><span class="line"></span><br><span class="line">X = preprocessing.scale(X) <span class="comment"># normalization</span></span><br><span class="line">X_train, X_test, y_train, y_test = train_test_split(X, y ,test_size = <span class="number">.3</span>)</span><br><span class="line">clf = SVC()</span><br><span class="line">clf.fit(X_train, y_train)</span><br><span class="line">print(clf.score(X_test, y_test))</span><br></pre></td></tr></table></figure>
<p>Result:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">0.9111111111111111</span></span><br><span class="line"><span class="number">0.9555555555555556</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="model-features-and-attributes">4 Model features and attributes</h1>
<h2 id="basic-parameters">4.1 Basic parameters</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> datasets</span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LinearRegression</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment"># LinearRegression example</span></span><br><span class="line">loaded_data = datasets.load_boston()</span><br><span class="line"><span class="comment"># X, y = datasets_loadboston(retern_X_y = true)</span></span><br><span class="line">data_X, data_y = loaded_data.data, loaded_data.target</span><br><span class="line"></span><br><span class="line">model = LinearRegression()</span><br><span class="line">model.fit(data_X, data_y)</span><br><span class="line"></span><br><span class="line">print(data_y[:<span class="number">4</span>])</span><br><span class="line">print(model.predict(data_X[:<span class="number">4</span>, :]))</span><br><span class="line"></span><br><span class="line">print(model.coef_) <span class="comment"># 系数</span></span><br><span class="line">print(model.intercept_) <span class="comment"># 截距</span></span><br><span class="line">print(model.get_params) <span class="comment"># 参数</span></span><br><span class="line">print(model.score(data_X, data_y)) <span class="comment"># default is R^2 coefficietn of determination</span></span><br></pre></td></tr></table></figure>
<p>Result:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[24.  21.6 34.7 33.4]</span><br><span class="line">[30.00384338 25.02556238 30.56759672 28.60703649]</span><br><span class="line">[-1.08011358e-01  4.64204584e-02  2.05586264e-02  2.68673382e+00</span><br><span class="line"> -1.77666112e+01  3.80986521e+00  6.92224640e-04 -1.47556685e+00</span><br><span class="line">  3.06049479e-01 -1.23345939e-02 -9.52747232e-01  9.31168327e-03</span><br><span class="line"> -5.24758378e-01]</span><br><span class="line">36.459488385089855</span><br><span class="line">&lt;bound method BaseEstimator.get_params of LinearRegression()&gt;</span><br><span class="line">0.7406426641094095</span><br></pre></td></tr></table></figure>
<h2 id="cross-validation">4.2 Cross validation</h2>
<ul>
<li><p>Evaluate the NN</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> load_iris</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"><span class="keyword">from</span> sklearn.neighbors <span class="keyword">import</span> KNeighborsClassifier</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> cross_val_score</span><br><span class="line"></span><br><span class="line">iris = load_iris()</span><br><span class="line">X = iris.data</span><br><span class="line">y = iris.target</span><br><span class="line"></span><br><span class="line">X_train, X_test, y_train, y_test = train_test_split(X, y, random_state = <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">knn = KNeighborsClassifier(n_neighbors = <span class="number">5</span>)</span><br><span class="line"><span class="comment"># knn.fit(X_train, y_train)</span></span><br><span class="line"><span class="comment"># print(knn.score(X_test, y_test))</span></span><br><span class="line">scores = cross_val_score(knn, X, y, cv = <span class="number">5</span>, scoring = <span class="string">&#x27;accuracy&#x27;</span>) <span class="comment"># 将test进行5次划分</span></span><br><span class="line">print(scores.mean()) <span class="comment"># 取平均值</span></span><br></pre></td></tr></table></figure>
<p>Result:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">0.9733333333333334</span></span><br></pre></td></tr></table></figure></li>
<li><p>Cross validation</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span>  learning_curve</span><br><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> load_digits</span><br><span class="line"><span class="keyword">from</span> sklearn.svm <span class="keyword">import</span> SVC</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">digits = load_digits()</span><br><span class="line">X = digits.data</span><br><span class="line">y = digits.target</span><br><span class="line">train_sizes, train_loss, test_loss= learning_curve( SVC(gamma=<span class="number">0.01</span>), X, y, cv=<span class="number">10</span>, scoring=<span class="string">&#x27;neg_mean_squared_error&#x27;</span>, train_sizes=[<span class="number">0.1</span>, <span class="number">0.25</span>, <span class="number">0.5</span>, <span class="number">0.75</span>, <span class="number">1</span>])</span><br><span class="line"><span class="comment"># &#x27;neg_mean_squared_error&#x27; 非 &#x27;mean_squared_error&#x27;</span></span><br><span class="line"></span><br><span class="line">train_loss_mean = -np.mean(train_loss, axis=<span class="number">1</span>)</span><br><span class="line">test_loss_mean = -np.mean(test_loss, axis=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">plt.plot(train_sizes, train_loss_mean, <span class="string">&#x27;o-&#x27;</span>, color=<span class="string">&quot;r&quot;</span>,</span><br><span class="line">             label=<span class="string">&quot;Training&quot;</span>)</span><br><span class="line">plt.plot(train_sizes, test_loss_mean, <span class="string">&#x27;o-&#x27;</span>, color=<span class="string">&quot;g&quot;</span>,</span><br><span class="line">             label=<span class="string">&quot;Cross-validation&quot;</span>)</span><br><span class="line"></span><br><span class="line">plt.xlabel(<span class="string">&quot;Training examples&quot;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&quot;Loss&quot;</span>)</span><br><span class="line">plt.legend(loc=<span class="string">&quot;best&quot;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<p>Result:</p>
<p><img src="https://s3.ax1x.com/2020/11/25/DUabMF.md.png" /></p>
<center>
<p>fig 4-1 Vross-validation</p>
</center></li>
<li><p>Adjustment parameter-1</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function</span><br><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> load_iris</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"><span class="keyword">from</span> sklearn.neighbors <span class="keyword">import</span> KNeighborsClassifier</span><br><span class="line"></span><br><span class="line">iris = load_iris()</span><br><span class="line">X = iris.data</span><br><span class="line">y = iris.target</span><br><span class="line"></span><br><span class="line"><span class="comment"># test train split #</span></span><br><span class="line">X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=<span class="number">4</span>)</span><br><span class="line">knn = KNeighborsClassifier(n_neighbors=<span class="number">5</span>)</span><br><span class="line">knn.fit(X_train, y_train)</span><br><span class="line">y_pred = knn.predict(X_test)</span><br><span class="line">print(knn.score(X_test, y_test))</span><br><span class="line"></span><br><span class="line"><span class="comment"># this is how to use cross_val_score to choose model and configs #</span></span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> cross_val_score</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">k_range = <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">31</span>)</span><br><span class="line">k_scores = []</span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> k_range:</span><br><span class="line">    knn = KNeighborsClassifier(n_neighbors=k)</span><br><span class="line"><span class="comment">##    loss = -cross_val_score(knn, X, y, cv=10, scoring=&#x27;mean_squared_error&#x27;) # for regression</span></span><br><span class="line">    scores = cross_val_score(knn, X, y, cv=<span class="number">10</span>, scoring=<span class="string">&#x27;accuracy&#x27;</span>) <span class="comment"># for classification</span></span><br><span class="line">    k_scores.append(scores.mean())</span><br><span class="line"></span><br><span class="line">plt.plot(k_range, k_scores)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;Value of K for KNN&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;Cross-Validated Accuracy&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<p>Result:</p>
<p><img src="https://s3.ax1x.com/2020/11/25/DUaXZ9.png" /></p>
<center>
<p>fig. 4-2 Adjustment parameters</p>
</center></li>
<li><p>Adjustment parameter-2</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> validation_curve</span><br><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> load_digits</span><br><span class="line"><span class="keyword">from</span> sklearn.svm <span class="keyword">import</span> SVC</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">digits = load_digits()</span><br><span class="line">X = digits.data</span><br><span class="line">y = digits.target</span><br><span class="line">param_range = np.logspace(-<span class="number">6</span>, -<span class="number">2.3</span>, <span class="number">5</span>)</span><br><span class="line">train_loss, test_loss = validation_curve(</span><br><span class="line">        SVC(), X, y, param_name=<span class="string">&#x27;gamma&#x27;</span>, param_range=param_range, cv=<span class="number">10</span>,</span><br><span class="line">        scoring= <span class="string">&#x27;neg_mean_squared_error&#x27;</span>)</span><br><span class="line">train_loss_mean = -np.mean(train_loss, axis=<span class="number">1</span>)</span><br><span class="line">test_loss_mean = -np.mean(test_loss, axis=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">plt.plot(param_range, train_loss_mean, <span class="string">&#x27;o-&#x27;</span>, color=<span class="string">&quot;r&quot;</span>,</span><br><span class="line">             label=<span class="string">&quot;Training&quot;</span>)</span><br><span class="line">plt.plot(param_range, test_loss_mean, <span class="string">&#x27;o-&#x27;</span>, color=<span class="string">&quot;g&quot;</span>,</span><br><span class="line">             label=<span class="string">&quot;Cross-validation&quot;</span>)</span><br><span class="line"></span><br><span class="line">plt.xlabel(<span class="string">&quot;gamma&quot;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&quot;Loss&quot;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;Overfitting problem&#x27;</span>)</span><br><span class="line">plt.legend(loc=<span class="string">&quot;best&quot;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<p>Result:</p>
<p><img src="https://s3.ax1x.com/2020/11/25/DUaLqJ.png" /></p>
<center>
<p>fig 4-3 Adjustment parameters</p>
</center></li>
</ul>
<h2 id="transform-target-in-regression-model">4.3 Transform target in regression model</h2>
<p>将原始数据转化为分类模式，可以有效地提高预测的精度，效果如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(__doc__)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> make_regression</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> RidgeCV</span><br><span class="line"><span class="keyword">from</span> sklearn.compose <span class="keyword">import</span> TransformedTargetRegressor</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> median_absolute_error, r2_score</span><br><span class="line"><span class="keyword">from</span> sklearn.utils.fixes <span class="keyword">import</span> parse_version</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> parse_version(matplotlib.__version__) &gt;= parse_version(<span class="string">&#x27;2.1&#x27;</span>):</span><br><span class="line">    desity_param = &#123;<span class="string">&#x27;density&#x27;</span>: <span class="literal">True</span>&#125;</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    density_param = &#123;<span class="string">&#x27;normed&#x27;</span>: <span class="literal">True</span>&#125;</span><br><span class="line">    </span><br><span class="line">X, y = make_regression(n_samples = <span class="number">10000</span>, noise = <span class="number">100</span>, random_state = <span class="number">0</span>)</span><br><span class="line">y = np.exp((y + <span class="built_in">abs</span>(y.<span class="built_in">min</span>()))/<span class="number">200</span>)</span><br><span class="line">y_trans = np.log1p(y)</span><br><span class="line"></span><br><span class="line">f, (ax0, ax1) = plt.subplots(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># density: normalization</span></span><br><span class="line">ax0.hist(y, bins = <span class="number">100</span>, density = <span class="literal">True</span>)</span><br><span class="line">ax0.set_xlim([<span class="number">0</span>, <span class="number">2000</span>])</span><br><span class="line">ax0.set_ylabel(<span class="string">&#x27;Probability&#x27;</span>)</span><br><span class="line">ax0.set_xlabel(<span class="string">&#x27;Target&#x27;</span>)</span><br><span class="line">ax0.set_title(<span class="string">&#x27;Target distribution&#x27;</span>)</span><br><span class="line"></span><br><span class="line">ax1.hist(y_trans, bins = <span class="number">100</span>, density = <span class="literal">True</span>)</span><br><span class="line">ax1.set_ylabel(<span class="string">&#x27;Probability&#x27;</span>)</span><br><span class="line">ax1.set_xlabel(<span class="string">&#x27;Target&#x27;</span>)</span><br><span class="line">ax1.set_title(<span class="string">&#x27;Transformed target distribution&#x27;</span>)</span><br><span class="line"></span><br><span class="line">f.suptitle(<span class="string">&#x27;Synthetic data&#x27;</span>, y = <span class="number">0.035</span>)</span><br><span class="line">f.tight_layout(rect = [<span class="number">0.05</span>, <span class="number">0.05</span>, <span class="number">0.95</span>, <span class="number">0.95</span>])</span><br><span class="line"></span><br><span class="line">X_train, X_test, y_train, y_test = train_test_split(X, y, random_state = <span class="number">0</span>)</span><br></pre></td></tr></table></figure>
<p>Result:</p>
<p><img src="https://s3.ax1x.com/2020/11/25/DUavI1.png" /></p>
<center>
fig.4-4 Comparison of Transformation
</center>
<p>然后，再来测试其对预测精度的影响：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">f, (ax0, ax1) = plt.subplots(<span class="number">1</span>, <span class="number">2</span>, sharey=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">regr = RidgeCV()</span><br><span class="line">regr.fit(X_train, y_train)</span><br><span class="line">y_pred = regr.predict(X_test)</span><br><span class="line"></span><br><span class="line">ax0.scatter(y_test, y_pred)</span><br><span class="line">ax0.plot([<span class="number">0</span>, <span class="number">2000</span>], [<span class="number">0</span>, <span class="number">2000</span>], <span class="string">&#x27;--k&#x27;</span>)</span><br><span class="line">ax0.set_ylabel(<span class="string">&#x27;Target predicted&#x27;</span>)</span><br><span class="line">ax0.set_xlabel(<span class="string">&#x27;True Target&#x27;</span>)</span><br><span class="line">ax0.set_title(<span class="string">&#x27;Ridge regression \n without target transformation&#x27;</span>)</span><br><span class="line">ax0.text(<span class="number">100</span>, <span class="number">1750</span>, <span class="string">r&#x27;$R^2$=%.2f, MAE=%.2f&#x27;</span> % (</span><br><span class="line">    r2_score(y_test, y_pred), median_absolute_error(y_test, y_pred)))</span><br><span class="line">ax0.set_xlim([<span class="number">0</span>, <span class="number">2000</span>])</span><br><span class="line">ax0.set_ylim([<span class="number">0</span>, <span class="number">2000</span>])</span><br><span class="line"></span><br><span class="line">regr_trans = TransformedTargetRegressor(regressor=RidgeCV(), func=np.log1p,inverse_func=np.expm1)</span><br><span class="line"></span><br><span class="line">regr_trans.fit(X_train, y_train)</span><br><span class="line">y_pred = regr_trans.predict(X_test)</span><br><span class="line"></span><br><span class="line">ax1.scatter(y_test, y_pred)</span><br><span class="line">ax1.plot([<span class="number">0</span>, <span class="number">2000</span>], [<span class="number">0</span>, <span class="number">2000</span>], <span class="string">&#x27;--k&#x27;</span>)</span><br><span class="line">ax1.set_ylabel(<span class="string">&#x27;Target predicted&#x27;</span>)</span><br><span class="line">ax1.set_xlabel(<span class="string">&#x27;True Target&#x27;</span>)</span><br><span class="line">ax1.set_title(<span class="string">&#x27;Ridge regression \n with target transformation&#x27;</span>)</span><br><span class="line">ax1.text(<span class="number">100</span>, <span class="number">1750</span>, <span class="string">r&#x27;$R^2$=%.2f, MAE=%.2f&#x27;</span> % (</span><br><span class="line">    r2_score(y_test, y_pred), median_absolute_error(y_test, y_pred)))</span><br><span class="line">ax1.set_xlim([<span class="number">0</span>, <span class="number">2000</span>])</span><br><span class="line">ax1.set_ylim([<span class="number">0</span>, <span class="number">2000</span>])</span><br><span class="line"></span><br><span class="line">f.suptitle(<span class="string">&quot;Synthetic data&quot;</span>, y=<span class="number">0.035</span>)</span><br><span class="line">f.tight_layout(rect=[<span class="number">0.05</span>, <span class="number">0.05</span>, <span class="number">0.95</span>, <span class="number">0.95</span>])</span><br></pre></td></tr></table></figure>
<p><img src="https://s3.ax1x.com/2020/11/25/DUazPx.png" /></p>
<center>
fig. 4-5 Comparison before and after transforming
</center>
<p>从结果可以看出，经过预处理转化后的数据集能有效地提高预测的精度，降低 <code>MAE</code> 的值。</p>
<h1 id="save-model">5 Save model</h1>
<p>Train model</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> svm</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> datasets</span><br><span class="line"></span><br><span class="line">clf = svm.SVC()</span><br><span class="line">iris = datasets.load_iris()</span><br><span class="line">X, y = iris.data, iris.target</span><br><span class="line">clf.fit(X, y)</span><br></pre></td></tr></table></figure>
<p>Then, we can use two methods to save our trained models:</p>
<ol type="1">
<li><p>pickle</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="comment"># Save</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;save/clf.pickle&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    pickle.dump(clf, f)</span><br><span class="line"><span class="comment"># Restore</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;save/clf.pickle&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">	clf2 = pickle.load(f)</span><br><span class="line">print(clf2.predict(X[<span class="number">0</span>:<span class="number">1</span>]))</span><br></pre></td></tr></table></figure></li>
<li><p>joblib</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> joblib</span><br><span class="line"><span class="comment"># Save</span></span><br><span class="line">joblib.dump(clf, <span class="string">&#x27;./save/clf.pkl&#x27;</span>)</span><br><span class="line"><span class="comment"># restore</span></span><br><span class="line">clf3 = joblib.load(<span class="string">&#x27;save/clf.pkl&#x27;</span>)</span><br><span class="line">print(clf3.predict(X[<span class="number">0</span>:<span class="number">1</span>]))</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>Notes</category>
        <category>Python module</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Deep learning</tag>
      </tags>
  </entry>
  <entry>
    <title>Stata Introduction</title>
    <url>/2020/12/15/Stata-introduction/</url>
    <content><![CDATA[<h1 id="stata-operation">1 Stata operation</h1>
<h2 id="import-data">1.1 Import data</h2>
<ul>
<li><p>use</p>
<p><code>grilic_small.dta</code> 文件的目录请根据自己的文件目录填写，数据文件可在陈强老师的网站下载，<a href="http://www.econometrics-stata.com/col.jsp?id=101">Click here</a>，选择《计量经济学及Stata应用》中的数据集下载。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">use <span class="string">&quot;D:\Demo\University\XMU\Class_files\Econometrics\Econometrics and Stata application\Data-Finished-bachelor\grilic_small.dta&quot;</span>, clear</span><br></pre></td></tr></table></figure></li>
</ul>
<a id="more"></a>
<ul>
<li><p>clear</p>
<p>关闭一个数据集，以便使用另外一个数据集</p></li>
<li><p><code>d</code>escribe</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看数据集中的变量名称、标签等</span></span><br><span class="line">describe <span class="keyword">or</span> d</span><br></pre></td></tr></table></figure></li>
<li><p>set more off/on</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 连续滚屏显示命令运行结果</span></span><br><span class="line"><span class="built_in">set</span> more off</span><br><span class="line"></span><br><span class="line"><span class="comment"># 分页显示命令运行结果</span></span><br><span class="line"><span class="built_in">set</span> more on</span><br></pre></td></tr></table></figure></li>
<li><p><code>l</code>ist</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看变量 s 和 lnw 的前 5 个数据</span></span><br><span class="line"><span class="built_in">list</span> s lnw <span class="keyword">in</span> <span class="number">1</span>/<span class="number">5</span> <span class="comment"># or</span></span><br><span class="line">l s lnw <span class="keyword">in</span> <span class="number">1</span>/<span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 罗列第 11-15 个观测值</span></span><br><span class="line"><span class="built_in">list</span> ss lnw <span class="keyword">in</span> <span class="number">11</span>/<span class="number">15</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出满足条件 ‘s&gt;=16&#x27; 的数据</span></span><br><span class="line"><span class="built_in">list</span> s lnw <span class="keyword">if</span> s &gt;= <span class="number">16</span></span><br><span class="line"><span class="comment"># &gt;=: 等于  &lt;=：小于等于  ==：等于  ~= or !=：不等于  =：赋值</span></span><br></pre></td></tr></table></figure></li>
<li><p>drop / keep</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 删除满足 ’s&gt;=16&#x27; 的观测值</span></span><br><span class="line">drop <span class="keyword">if</span> s &gt;= <span class="number">16</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 只保留满足 &#x27;s&gt;=16&#x27; 的观测值</span></span><br><span class="line">keep <span class="keyword">if</span> s &gt;= <span class="number">16</span></span><br></pre></td></tr></table></figure>
<p>注：Stata 并不提供 undo 功能，故需慎重删除数据，最好保留备份-</p></li>
<li><p>sort / gsort</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将数据按照变量 s 的升序排列</span></span><br><span class="line">sort s</span><br><span class="line">lsit</span><br><span class="line"></span><br><span class="line"><span class="comment"># 降序排列</span></span><br><span class="line">gsort -s</span><br><span class="line"><span class="built_in">list</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="plot">1.2 Plot</h2>
<h3 id="直方图">1.3.1 直方图</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">histogram s, width(<span class="number">1</span>) frequency</span><br><span class="line">hist s, w(<span class="number">1</span>) freq</span><br><span class="line"><span class="comment"># histogram: 直方图,</span></span><br><span class="line"><span class="comment"># 选择项 &#x27;width(1)&#x27; 表示将组宽设为 1（否则将使用 Stata 根据样本容量计算的默认分组数）</span></span><br><span class="line"><span class="comment"># 选择项 ‘frequency&#x27; 表示将纵坐标定为频数（默认使用密度）</span></span><br></pre></td></tr></table></figure>
<p>Result:</p>
<p><img src="https://s3.ax1x.com/2020/12/15/rKz0OK.png" alt="image-20201210163044446" style="zoom:80%;" /></p>
<center>
Fig. 1-1 Histogram figure
</center>
<ul>
<li>查看帮助文档</li>
</ul>
<p>对于任何 <code>Stata</code> 命令，只需要输入 <code>help command_name</code> 即可查看该命令的帮助文档，<strong>初学者应养成经常查看帮助文档的习惯</strong>。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">help</span> histogram</span><br><span class="line">h hist</span><br><span class="line"><span class="comment"># 查看 histogram 命令的帮助文档</span></span><br></pre></td></tr></table></figure>
<p>Result:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">histogram varname [<span class="keyword">if</span>] [<span class="keyword">in</span>] [weight] [, [continuous_opts | discrete_opts] options]</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[if], [in]: 条件操作</span></span><br><span class="line"><span class="string">[weight]: 权重</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[continuous_opts]: 连续型变量选择项</span></span><br><span class="line"><span class="string">[discrete_opts]: 离散型选择项</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">continuous_opts        Description</span></span><br><span class="line"><span class="string">----------------------------------------</span></span><br><span class="line"><span class="string">Main</span></span><br><span class="line"><span class="string">  bin(#)               set number of bins to #</span></span><br><span class="line"><span class="string">  width(#)             set width of bins to #</span></span><br><span class="line"><span class="string">  start(#)         	   set lower limit of first bin to #</span></span><br><span class="line"><span class="string">-------------------------------------------</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">discrete_opts          Description</span></span><br><span class="line"><span class="string">------------------------------------------</span></span><br><span class="line"><span class="string">Main</span></span><br><span class="line"><span class="string">  discrete             specify that data are discrete</span></span><br><span class="line"><span class="string">  width(#)             set width of bins to #</span></span><br><span class="line"><span class="string">  start(#)             set theoretical minimum value to #</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">options                Description</span></span><br><span class="line"><span class="string">-------------------------------------------</span></span><br><span class="line"><span class="string">Main</span></span><br><span class="line"><span class="string">  density               draw as density; the default</span></span><br><span class="line"><span class="string">  fraction              draw as fractions</span></span><br><span class="line"><span class="string">  frequency             draw as frequencies</span></span><br><span class="line"><span class="string">  percent               draw as percentages</span></span><br><span class="line"><span class="string">  bar_options           rendition of bars</span></span><br><span class="line"><span class="string">  binrescale  | recalculate bin sizes when by() is specified</span></span><br><span class="line"><span class="string">  addlabels             add height labels to bars</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Density plots</span></span><br><span class="line"><span class="string">  normal                  add a normal density to the graph</span></span><br><span class="line"><span class="string">  normopts(line_options)  affect rendition of normal density</span></span><br><span class="line"><span class="string">  kdensity     | add a kernel density estimate to the graph</span></span><br><span class="line"><span class="string">  kdenopts(kdensity_options) | affect rendition of kernel density</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Add plots</span></span><br><span class="line"><span class="string">  addplot(plot)           add other plots to the histogram</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<h3 id="散点图">1.3.2 散点图</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">scatter lnw s</span><br><span class="line">sc lnw s</span><br></pre></td></tr></table></figure>
<p>Result:</p>
<p><img src="https://s3.ax1x.com/2020/12/15/rKzrwD.png" alt="image-20201210163409860" style="zoom:80%;" /></p>
<center>
Fig. 1-2 Scatter between lnw and s
</center>
<ul>
<li>标签</li>
</ul>
<p>如果想在散点图上标注每个点对应于哪个观测值，可先定义变量 <span class="math inline">\(n\)</span>，表示第 <span class="math inline">\(n\)</span> 个观测值：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">gen n = _n</span><br><span class="line">scatter lnw s, mlabel(n) <span class="comment"># 选择变量 n 作为标签（mark label）</span></span><br></pre></td></tr></table></figure>
<p>其中，<code>_n</code> 表示第 <span class="math inline">\(n\)</span> 个观测值。然后以变量作为每个点的标签来画散点图。结果如下：</p>
<p><img src="https://s3.ax1x.com/2020/12/15/rKzsTe.png" alt="image-20201210164351554" style="zoom:80%;" /></p>
<center>
Fig. 1-3 Scatter with mark label
</center>
<h3 id="核密度估计图">1.3.3 核密度估计图</h3>
<p>直方图必然是不连续的，如果想得到密度函数的连续估计，可输入命令：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">kdensity lnw, normal normop (lpattern (dash))</span><br><span class="line">kdensity lnw, normal normop (lp (dash))</span><br></pre></td></tr></table></figure>
<p>其中</p>
<ul>
<li><code>kdensity</code>：核密度估计（kernel density estimation）；</li>
<li><code>normal</code>：画正态分布的密度函数作为对比；</li>
<li><code>normop (lp (Dash))</code>：将正态密度用虚线来画。
<ul>
<li><code>normop</code>：normal options</li>
<li><code>lpattern</code>： line pattern.</li>
</ul></li>
</ul>
<p>Result:</p>
<p><img src="https://s3.ax1x.com/2020/12/15/rKzRSI.md.png" alt="image-20201210224215508" style="zoom:80%;" /></p>
<center>
Fig. 1-4 Kernel density estimate
</center>
<h2 id="statistical-analysis">1.3 Statistical analysis</h2>
<ul>
<li><p>统计特征</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">summarize s</span><br><span class="line">su s</span><br><span class="line"></span><br><span class="line"><span class="built_in">sum</span> lnw, detail <span class="comment"># 显示更多统计指标，如偏度、峰度</span></span><br></pre></td></tr></table></figure>
<p>Result:</p>
<p><img src="https://s3.ax1x.com/2020/12/15/rKzDeO.png" alt="image-20201210164927010" style="zoom:80%;" /></p>
<p><img src="https://s3.ax1x.com/2020/12/15/rKzgfA.png" alt="image-20201210223033995" style="zoom:80%;" /></p>
<center>
<p>Fig. 1-4 Statistical description</p>
</center>
<p>显示了变量 <span class="math inline">\(s\)</span> 的样本容量、平均值、标准差、最小值于最大值。如 <strong>不指明变量</strong>，则显示 <strong>所有变量</strong> 的统计指标。</p></li>
<li><p>经验累计分布函数（Empirical cumulative distribution function）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tabulate s <span class="comment"># 显示 s 的经验累积分布番薯</span></span><br><span class="line">ta s</span><br></pre></td></tr></table></figure>
<p>Result:</p>
<p><img src="https://s3.ax1x.com/2020/12/15/rKzwy6.png" alt="image-20201210165710687" style="zoom:80%;" /></p>
<center>
<p>Fig. 1-5 Empirical cummlative distribution</p>
</center>
<p>其中，<code>Freq</code> 表示频数，<code>Percent</code> 表示百分比，而 <code>Cum.</code> 表示累积百分比。</p></li>
<li><p>相关系数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pwcorr lnw s expr, sig star(<span class="number">.05</span>)</span><br><span class="line"><span class="comment"># 对工资对数、教育年限于工龄之间的相关系数</span></span><br></pre></td></tr></table></figure>
<p>其中，</p>
<ul>
<li><code>pwcorr</code> ： <code>pairwise correlation</code>，即两两相关；</li>
<li>选择项 <code>sig</code> ：相关系数的显著性水平，即 <code>p-value</code>，列在相关系数的下方 ；</li>
<li>选择项 <code>star (.05)</code> ：所有显著性水平小于或等于 5% 的相关系数打赏星号。</li>
</ul>
<p>Result:</p>
<p><img src="https://s3.ax1x.com/2020/12/15/rKz6FH.png" alt="image-20201210170540089" style="zoom:80%;" /></p>
<center>
<p>Fig.1-6 Correlation coefficient</p>
</center>
<p>结果显示，<span class="math inline">\(\rm{ln} w\)</span> 与 <span class="math inline">\(s\)</span> 的相关系数为 0.5368，且在 1% 水平上显著（ <span class="math inline">\(p\)</span> 值为0.0022）；<span class="math inline">\(\rm{ln} w\)</span> 与 <span class="math inline">\(expr\)</span> 的相关系数为 -0.1132，但此相关关系也不显著（<span class="math inline">\(p-value\)</span> 为0.5514）</p></li>
</ul>
<h2 id="generate-new-variable">1.4 Generate new variable</h2>
<h3 id="basic-operation">1.4.1 Basic operation</h3>
<ul>
<li>对数</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">generate lns = log(s)</span><br><span class="line">g lns = log(s) <span class="comment"># 对数</span></span><br></pre></td></tr></table></figure>
<ul>
<li><p>平方</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">gen s2 = s ^<span class="number">2</span> <span class="comment"># 平方项</span></span><br></pre></td></tr></table></figure></li>
<li><p>互动项（乘法）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">gen exprs = s * expr <span class="comment"># s 与 expr 的互动项</span></span><br></pre></td></tr></table></figure></li>
<li><p>指数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">gen w = exp(lnw) <span class="comment"># 指数</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="虚拟变量">1.4.2 虚拟变量</h3>
<p>假设定义 <span class="math inline">\(s \geq 16\)</span> 为 ”受过高等教育“，并使用 变量 <span class="math inline">\(college\)</span> 来表示:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">gen colleg = (s &gt;= <span class="number">16</span>)</span><br></pre></td></tr></table></figure>
<p>其中，括弧 <code>()</code> 表示对括弧中的表达式进行逻辑评估：如果此表达式为真，则取值为1；如果为假，则取值为0。</p>
<ul>
<li><p>变量重命名</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">rename colleg college</span><br><span class="line">ren colleg college</span><br></pre></td></tr></table></figure></li>
<li><p>变量重定义</p>
<p>将 ”受过高等教育“的定义改为 <span class="math inline">\(s \geq 15\)</span>，但仍用 <span class="math inline">\(college\)</span> 作为变量名：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Method one</span></span><br><span class="line">drop college</span><br><span class="line">gen college = (s &gt;= <span class="number">15</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Method two</span></span><br><span class="line">replace college = (s &gt;= <span class="number">15</span>)</span><br></pre></td></tr></table></figure></li>
<li><p>变量输入</p>
<p>对于较长的变量，一一输入较为麻烦，，有如下简便方式：</p>
<ul>
<li><p>在变量 窗口双击需要的变量；</p></li>
<li><p><span class="math inline">\(s1 - s5\)</span> 来选择这 5 个变量；</p></li>
<li><p>用 <code>*</code> 来简化变量名的书写。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">drop s* <span class="comment"># 去掉所有以 s 开头的变量</span></span><br></pre></td></tr></table></figure></li>
</ul></li>
</ul>
<h2 id="other">1.5 Other</h2>
<h3 id="calculator">1.5.1 Calculator</h3>
<p><code>Stata</code> 也可作为计算器来使用，命令格式为 <code>display expression</code>。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">display log(<span class="number">2</span>) <span class="comment"># 计算 ln2</span></span><br><span class="line">di log(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">dis <span class="number">2</span>^<span class="number">0.5</span> <span class="comment"># 计算 $\sqrt&#123;2&#125;$</span></span><br></pre></td></tr></table></figure>
<h3 id="invoke-and-terminate-commands">1.5.2 Invoke and terminate commands</h3>
<ul>
<li>调用旧命令
<ul>
<li>使用键盘上的 <code>Pg Up</code> 和 <code>Pg Dn</code> 键；</li>
<li>在历史命令窗口 <strong>单击</strong> 旧命令，将命令调入命令窗口；</li>
<li>在历史命令窗口 <strong>双击</strong> 旧命令，再次执行此命令。</li>
</ul></li>
<li>停止执行当前执行命令
<ul>
<li>点击 <code>Break</code> 图标的快捷键；</li>
<li>同时按住 <code>Ctrl + Break</code>。</li>
</ul></li>
</ul>
<h3 id="log-file">1.5.3 Log file</h3>
<p><code>Stata</code> 日志文件的扩展名为 <code>smcl</code>。可通过快捷键 <code>Log</code> 图标使用，也可通过输入如下命令：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">log using today <span class="comment"># 在当前路径中生成一个名为 &#x27;today.smcl&#x27; 的日志文件</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string"># Result:</span></span><br><span class="line"><span class="string">log using &quot;D:\Demo\University\XMU\Class_files\Econometrics\Econometrics and Stata application\Test\Test-log.smcl&quot;</span></span><br><span class="line"><span class="string">--------------------------------------------</span></span><br><span class="line"><span class="string">name:  &lt;unnamed&gt;</span></span><br><span class="line"><span class="string">log:  D:\Demo\University\XMU\Class_files\Econometrics\Econometrics and Stata application\Test\Test-log.smcl</span></span><br><span class="line"><span class="string">log type:  smcl</span></span><br><span class="line"><span class="string">opened on:  10 Dec 2020, 19:10:30</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<ul>
<li><p>暂时关闭日志</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">log off</span><br></pre></td></tr></table></figure></li>
<li><p>恢复使用日志</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">log on</span><br></pre></td></tr></table></figure></li>
<li><p>彻底退出日志</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">log close</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="updata-stata-lib">1.5.4 Updata stata lib</h3>
<p>更新 <code>Stata</code> 命令库（ <code>Stata "ado"</code>文件及其他可执行文件）。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">updata <span class="built_in">all</span></span><br></pre></td></tr></table></figure>
<ul>
<li><p>非官方命令</p>
<p>最流行的非官方命令下载平台为 <a href="https://ideas.repec.org/s/boc/bocode.html">统计软件成分</a> (Statistical Software Components, SSC)，从 <code>SCC</code> 下载 <code>Stata</code> 程序的命令为：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">scc install newcommand</span><br></pre></td></tr></table></figure>
<p>如果非官方命令不是来自 <code>SSC</code>，则需要手工安装。只需要将所有相关文件下载到制定的 <code>Stata</code> 文件夹中即可（通常为 <code>ado\plus\</code>）。如果不清楚应把文件复制到哪个文件夹，可输入以下命令，显示 <code>Stata</code> 的系统路径（System directories）：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sysdir</span><br></pre></td></tr></table></figure>
<p>Result:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">. sysdir</span><br><span class="line">   STATA:  D:\Program files\Stata <span class="number">16</span>\</span><br><span class="line">    BASE:  D:\Program files\Stata <span class="number">16</span>\ado\base\</span><br><span class="line">    SITE:  D:\Program files\Stata <span class="number">16</span>\ado\site\</span><br><span class="line">    PLUS:  C:\Users\YangSu\ado\plus\ <span class="comment"># 复制到此文件夹</span></span><br><span class="line">PERSONAL:  C:\Users\YangSu\ado\personal\</span><br><span class="line">OLDPLACE:  c:\ado\</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="search-and-findit">1.5.5 Search and findit</h3>
<ul>
<li><p>Search command</p>
<p>如果想使用某种估计方法，但不知道它是否存在，可输入命令：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">search keyword</span><br></pre></td></tr></table></figure>
<p>此命令搜索 <code>Stata</code> 帮助文件、<code>Stata</code> 常见问题、<code>Stata</code> 案例、<code>Stata Journal</code>、<code>Stata Technical Bulletin</code>等。</p></li>
<li><p>Findit keyword</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">findit keyword</span><br></pre></td></tr></table></figure>
<p><code>findit</code>搜索范围更广，还包括 <code>Stata</code> 的网络资源。</p></li>
</ul>
]]></content>
      <categories>
        <category>Class Notes</category>
        <category>Econometrics</category>
      </categories>
      <tags>
        <tag>Econometrics</tag>
        <tag>stata</tag>
      </tags>
  </entry>
  <entry>
    <title>Energy Economic Codes</title>
    <url>/2020/12/08/Energy-Economic/</url>
    <content><![CDATA[<h1 id="markov-model">1 Markov model</h1>
<h2 id="preparation-and-definition">1.1 Preparation and definition</h2>
<ul>
<li><p>Import modules</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> numpy <span class="keyword">import</span> linalg <span class="keyword">as</span> la</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> mean_absolute_error, r2_score</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> mean_squared_error</span><br><span class="line"></span><br><span class="line"><span class="comment"># Plot module</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = [<span class="string">&#x27;SimHei&#x27;</span>]</span><br><span class="line"><span class="comment"># Microsoft YaHei, Times New Roman</span></span><br><span class="line">plt.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="literal">False</span></span><br></pre></td></tr></table></figure></li>
</ul>
<a id="more"></a>
<ul>
<li><p>Plot results</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plot_result</span>(<span class="params">test_Y, pred_Y, Title</span>):</span></span><br><span class="line">    ylim_min = np.<span class="built_in">round</span>(test_Y.<span class="built_in">min</span>()) - <span class="number">1</span></span><br><span class="line">    ylim_max = np.<span class="built_in">round</span>(test_Y.<span class="built_in">max</span>()) + <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># plot comparison results</span></span><br><span class="line">    fig = plt.figure(figsize = (<span class="number">8</span>, <span class="number">6</span>))</span><br><span class="line">    ax0 = fig.add_subplot(<span class="number">111</span>)</span><br><span class="line">    ax0.scatter(test_Y, pred_Y)</span><br><span class="line">    ax0.plot([ylim_min, ylim_max], [ylim_min, ylim_max], <span class="string">&#x27;--k&#x27;</span>)</span><br><span class="line">    ax0.set_xlabel(<span class="string">&#x27;True Target&#x27;</span>, fontsize = <span class="number">15</span>)</span><br><span class="line">    ax0.set_ylabel(<span class="string">&#x27;Target predicted&#x27;</span>, fontsize = <span class="number">15</span>)</span><br><span class="line">    ax0.set_title(Title , fontsize = <span class="number">16</span>)</span><br><span class="line">    ax0.text(ylim_min + <span class="number">2</span>, ylim_max - <span class="number">4</span>, <span class="string">r&#x27;$R^2$ = %.2f, $MAE$ = %.2f&#x27;</span> %(r2_score(test_Y, pred_Y), </span><br><span class="line">                mean_absolute_error(test_Y, pred_Y)), fontsize = <span class="number">14</span>)</span><br><span class="line">    ax0.text(ylim_min + <span class="number">2</span>, ylim_max - <span class="number">5</span>, <span class="string">r&#x27;$MSE$ = %.2f, $RMSE$ = %.2f&#x27;</span> %(mean_squared_error(test_Y, pred_Y), </span><br><span class="line">                mean_squared_error(test_Y, pred_Y, squared=<span class="literal">False</span>)), fontsize = <span class="number">14</span>)</span><br><span class="line">    </span><br><span class="line">    ax0.set_xlim([ylim_min, ylim_max])</span><br><span class="line">    ax0.set_ylim([ylim_min, ylim_max])</span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Plot prediction and real values</span></span><br><span class="line">    plt.figure(figsize = (<span class="number">8</span>, <span class="number">6</span>)) <span class="comment"># length x width</span></span><br><span class="line">    plt.plot(pred_Y, <span class="string">&#x27;r&#x27;</span>, label=<span class="string">&#x27;prediction&#x27;</span>, lw = <span class="number">0.8</span>)</span><br><span class="line">    plt.plot(test_Y, <span class="string">&#x27;b&#x27;</span>, label=<span class="string">&#x27;real&#x27;</span>, lw = <span class="number">0.8</span>)</span><br><span class="line">    plt.xticks(<span class="built_in">range</span>(<span class="number">19</span>), fontsize = <span class="number">15</span>)</span><br><span class="line">    plt.yticks(fontsize = <span class="number">15</span>)</span><br><span class="line">    plt.title(Title, fontsize = <span class="number">16</span>)</span><br><span class="line">    plt.legend(loc=<span class="string">&#x27;best&#x27;</span>, fontsize  = <span class="number">15</span>)</span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure>
<p>绘制结果图（可选，可通过调整 <code>plot_b</code> 的值来选择是否绘图），包含两个:</p>
<p><img src="https://s3.ax1x.com/2020/12/08/rpDV56.md.png" /></p>
<center>
<p>Fig. 1-1 Trend figure of Coal</p>
</center>
<p><img src="https://s3.ax1x.com/2020/12/08/rpDePK.png" /></p>
<center>
<p>Fig. 1-2 Comparison figure of Coal</p>
</center></li>
<li><p>Calculate loss</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calculate_error</span>(<span class="params">test_data, np_Pred_results, title</span>):</span></span><br><span class="line">    <span class="comment"># Storing error results </span></span><br><span class="line">    R2 = r2_score(test_data, np_Pred_results)</span><br><span class="line">    MAE = mean_absolute_error(test_data, np_Pred_results)</span><br><span class="line">    MSE = mean_squared_error(test_data, np_Pred_results)</span><br><span class="line">    RMSE = mean_squared_error(test_data, np_Pred_results, squared=<span class="literal">False</span>)</span><br><span class="line">    </span><br><span class="line">    error = [title, R2, MAE, MSE, RMSE]</span><br><span class="line">    <span class="keyword">return</span> error</span><br></pre></td></tr></table></figure>
<p>Calculate the loss: R2, MAE, MSE, RMSE</p></li>
<li><p>Definition of Markov model</p>
<p>The first step: calculate and return transfer matrix (type: np.array)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Markov_trans</span>(<span class="params">data_stru, year_start, year_end</span>):</span></span><br><span class="line">    P = np.identity(<span class="number">4</span>)</span><br><span class="line">    K = np.array([<span class="number">1.0</span>, <span class="number">1.</span>, <span class="number">1.</span>, <span class="number">1.</span>])</span><br><span class="line">    </span><br><span class="line">    year_start_data = data_stru.loc[year_start, :]</span><br><span class="line">    year_end_data = data_stru.loc[year_end,:]</span><br><span class="line">    </span><br><span class="line">    bool_value = np.array(year_end_data &lt; year_start_data)</span><br><span class="line">    i = <span class="number">0</span> <span class="comment"># index</span></span><br><span class="line">    <span class="keyword">for</span> b <span class="keyword">in</span> bool_value:</span><br><span class="line">        <span class="keyword">if</span> b == <span class="literal">False</span>: <span class="comment"># Decrease</span></span><br><span class="line">            K[i] =  year_end_data[i] - year_start_data[i]</span><br><span class="line">        <span class="keyword">elif</span> b == <span class="literal">True</span>: <span class="comment"># Increase</span></span><br><span class="line">            P[i, i] = year_end_data[i]/year_start_data[i]</span><br><span class="line">            K[i] = <span class="number">0</span></span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">          </span><br><span class="line">    KK = <span class="built_in">sum</span>(K)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">        <span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">            <span class="keyword">if</span> (j != n) &amp; (K[j] == <span class="number">0</span>):</span><br><span class="line">                P[j,n] = (<span class="number">1</span>-P[j,j])*K[n]/KK</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># v 为特征值    Q 为特征向量</span></span><br><span class="line">    P = np.<span class="built_in">round</span>(P, <span class="number">3</span>)</span><br><span class="line">    v, Q = la.eig(P)</span><br><span class="line">    <span class="comment"># diag_P = np.round(np.dot(np.dot(la.inv(Q), P), Q), 3)</span></span><br><span class="line">    V = np.diag(v)**((<span class="number">1</span>)/(year_end-year_start))</span><br><span class="line">    Predict_P =  np.<span class="built_in">round</span>(np.dot(np.dot(Q, V), la.inv(Q)), <span class="number">3</span>)</span><br><span class="line">    <span class="keyword">return</span> Predict_P</span><br></pre></td></tr></table></figure>
<p>The second step: calculate and return forecasting result (type: np.array)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Markov_predict</span>(<span class="params">data_stru, P, year_end, year_pred</span>):</span></span><br><span class="line">    year_end_data = data_stru.loc[year_end,:]</span><br><span class="line">    P = np.<span class="built_in">round</span>(P, <span class="number">3</span>)</span><br><span class="line">    v, Q = la.eig(P)</span><br><span class="line">    <span class="comment"># diag_P = np.round(np.dot(np.dot(la.inv(Q), P), Q), 3)</span></span><br><span class="line">    V = np.diag(v)**(year_pred - year_end)</span><br><span class="line">    Predict_P =  np.<span class="built_in">round</span>(np.dot(np.dot(Q, V), la.inv(Q)), <span class="number">3</span>)</span><br><span class="line">    np_year_end_data =np.array(year_end_data)</span><br><span class="line">    Predict_energy_stru = np.around(np.dot(np_year_end_data, Predict_P), <span class="number">3</span>)</span><br><span class="line">    <span class="keyword">return</span> Predict_energy_stru</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="preparation">1.2 Preparation</h2>
<ul>
<li><p>Read data file</p>
<p><code>Data.xlsx</code> 文件需要根程序文件在同一目录</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Read datafile</span></span><br><span class="line">data_stru = pd.read_excel(<span class="string">&#x27;./Data.xlsx&#x27;</span>, header = <span class="number">0</span>, </span><br><span class="line">                          sheet_name = <span class="number">0</span>, index_col= <span class="number">0</span>)</span><br><span class="line">num_year = <span class="built_in">len</span>(data_stru) <span class="comment"># the length of the dataset</span></span><br><span class="line">train_percent = <span class="number">0.7</span> <span class="comment"># Set the first 70% data as train set</span></span><br><span class="line">Error_results = [] <span class="comment"># Store all error results</span></span><br><span class="line">plot_b = <span class="literal">False</span> <span class="comment"># Choose whether plot result</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Dataset start with 1953, end with 2017</span></span><br><span class="line">year_train_start, year_end = <span class="number">1953</span>, <span class="number">2018</span></span><br><span class="line">year_train_end = year_train_start + <span class="built_in">round</span>(<span class="built_in">len</span>(data_stru) * <span class="number">0.7</span>) <span class="comment"># = 1999</span></span><br><span class="line"></span><br><span class="line">test_data = np.array(data_stru.loc[year_train_end:, :]) <span class="comment"># from 1999 to 2017</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="model-application">1.3 Model application</h2>
<ul>
<li><p>Avarage trans_P</p>
<p>Model test based on avarage trans_P</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">trans_P = [] <span class="comment"># store all transfer matric</span></span><br><span class="line"><span class="keyword">for</span> startY <span class="keyword">in</span> <span class="built_in">range</span>(year_train_start, year_train_end - <span class="number">1</span>):</span><br><span class="line">    <span class="keyword">for</span> endY <span class="keyword">in</span> <span class="built_in">range</span>(startY, year_train_end):</span><br><span class="line">        trans_temp = Markov_trans(year_start = year_train_start, </span><br><span class="line">                        year_end = year_train_end, data_stru = data_stru)</span><br><span class="line">        temp = trans_temp.tolist()</span><br><span class="line">        trans_P.append(temp)</span><br><span class="line"></span><br><span class="line">np_trans_P = np.array(trans_P) <span class="comment"># Transfer list into numpy</span></span><br><span class="line">av_trans_P = np.<span class="built_in">sum</span>(np_trans_P, <span class="number">0</span>)/np_trans_P.shape[<span class="number">0</span>] <span class="comment"># Calculate avarage</span></span><br><span class="line"></span><br><span class="line">Pred_results = [] <span class="comment"># Using average transfer matrix to predict energy structure</span></span><br><span class="line"><span class="keyword">for</span> predY <span class="keyword">in</span> <span class="built_in">range</span>(year_train_end, year_end):</span><br><span class="line">    <span class="comment"># Forecasting</span></span><br><span class="line">    Pred_temp = Markov_predict(data_stru = data_stru, P = av_trans_P, </span><br><span class="line">                            year_end = year_train_end - <span class="number">1</span>, year_pred = predY)</span><br><span class="line">    temp = Pred_temp.tolist() <span class="comment"># Turn numpy.array into list</span></span><br><span class="line">    Pred_results.append(temp) <span class="comment"># It&#x27;s convenient to append value using list</span></span><br><span class="line">    </span><br><span class="line">np_Pred_results = np.array(Pred_results) <span class="comment"># Turn list into np.array</span></span><br><span class="line">Columns = data_stru.columns</span><br><span class="line"><span class="comment"># Plot forecasting result if needed</span></span><br><span class="line"><span class="keyword">if</span> plot_b == <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">        test_Y, pred_Y = test_data[:, i], np_Pred_results[:, i]</span><br><span class="line">        Title = <span class="string">&#x27;&#123;&#125; based on average transfer matrix to predict:&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(regression, </span><br><span class="line">                                    Columns[i])</span><br><span class="line">        plot_result(test_Y, pred_Y, Title)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># Storing error results</span></span><br><span class="line">title = <span class="string">&#x27;average transfer matrix&#x27;</span>  </span><br><span class="line"><span class="comment"># Calculate 4 error</span></span><br><span class="line">error = calculate_error(test_data, np_Pred_results, title)</span><br><span class="line">Error_results.append(error)</span><br></pre></td></tr></table></figure></li>
<li><p>One step and 46 step</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> year_train_start <span class="keyword">in</span> [<span class="number">1953</span>, <span class="number">1998</span>]: <span class="comment"># from &#x27;1953 to 1999&#x27; or &#x27;1998 to 1999&#x27;</span></span><br><span class="line">    year_train_end, year_end = <span class="number">1999</span>, <span class="number">2018</span></span><br><span class="line">    trans_temp = Markov_trans(year_start = year_train_start, </span><br><span class="line">                            year_end = year_train_end, data_stru = data_stru)</span><br><span class="line">    Pred_results = []</span><br><span class="line">    <span class="keyword">for</span> predY <span class="keyword">in</span> <span class="built_in">range</span>(year_train_end, year_end):</span><br><span class="line">        Pred_temp = Markov_predict(data_stru = data_stru, P = trans_temp, </span><br><span class="line">                                year_end = year_train_end - <span class="number">1</span>, year_pred = predY)</span><br><span class="line">        temp = Pred_temp.tolist()</span><br><span class="line">        Pred_results.append(temp)</span><br><span class="line">        </span><br><span class="line">    np_Pred_results = np.array(Pred_results)</span><br><span class="line">    Columns = data_stru.columns</span><br><span class="line">    <span class="keyword">if</span> plot_b == <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">            test_Y, pred_Y = test_data[:, i], np_Pred_results[:, i]</span><br><span class="line">            Title = <span class="string">&#x27;&#123;&#125; based on &#123;&#125; and &#123;&#125; to predict:&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(regression, </span><br><span class="line">                                    year_train_start, year_train_end, Columns[i])             </span><br><span class="line">            plot_result(test_Y, pred_Y, Title)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Storing error results  </span></span><br><span class="line">    title = <span class="string">&#x27;&#123;&#125; step&#x27;</span>.<span class="built_in">format</span>(year_train_end - year_train_start)   </span><br><span class="line">    error = calculate_error(test_data, np_Pred_results, title)</span><br><span class="line">    Error_results.append(error)</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="export-result-to-excel">1.4 Export result to excel</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np_error = np.array(Error_results)</span><br><span class="line">columns = [<span class="string">&#x27;Transfer Matrix&#x27;</span>, <span class="string">&#x27;R2&#x27;</span>, <span class="string">&#x27;MAE&#x27;</span>, <span class="string">&#x27;MSE&#x27;</span>, <span class="string">&#x27;RMSE&#x27;</span>]</span><br><span class="line">pd_error = pd.DataFrame(np_error, columns = columns, dtype = <span class="string">&#x27;object&#x27;</span>)</span><br><span class="line">pd_error.to_excel(<span class="string">&#x27;Error result.xlsx&#x27;</span>, encoding = <span class="string">&#x27;utf_8_sig&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h2 id="all-codes">1.5 All codes</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Markov model for energy structure prediction#</span></span><br><span class="line"><span class="comment"># ========================= Import modules ====================================</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> numpy <span class="keyword">import</span> linalg <span class="keyword">as</span> la</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> mean_absolute_error, r2_score</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> mean_squared_error</span><br><span class="line"></span><br><span class="line"><span class="comment"># Plot module</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = [<span class="string">&#x27;SimHei&#x27;</span>]</span><br><span class="line"><span class="comment"># Microsoft YaHei, Times New Roman</span></span><br><span class="line">plt.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ======================== Preparation =======================================</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Read datafile</span></span><br><span class="line">data_stru = pd.read_excel(<span class="string">&#x27;./Data.xlsx&#x27;</span>, header = <span class="number">0</span>, </span><br><span class="line">                          sheet_name = <span class="number">0</span>, index_col= <span class="number">0</span>)</span><br><span class="line">num_year = <span class="built_in">len</span>(data_stru) <span class="comment"># the length of the dataset</span></span><br><span class="line">train_percent = <span class="number">0.7</span> <span class="comment"># Set the first 70% data as train set</span></span><br><span class="line">Error_results = [] <span class="comment"># Store all error results</span></span><br><span class="line">plot_b = <span class="literal">False</span> <span class="comment"># Choose whether plot result</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Dataset start with 1953, end with 2017</span></span><br><span class="line">year_train_start, year_end = <span class="number">1953</span>, <span class="number">2018</span></span><br><span class="line">year_train_end = year_train_start + <span class="built_in">round</span>(<span class="built_in">len</span>(data_stru) * <span class="number">0.7</span>) <span class="comment"># = 1999</span></span><br><span class="line"></span><br><span class="line">test_data = np.array(data_stru.loc[year_train_end:, :]) <span class="comment"># from 1999 to 2017</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ======================== Plot Results =====================================</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plot_result</span>(<span class="params">test_Y, pred_Y, Title</span>):</span></span><br><span class="line">    ylim_min = np.<span class="built_in">round</span>(test_Y.<span class="built_in">min</span>()) - <span class="number">1</span></span><br><span class="line">    ylim_max = np.<span class="built_in">round</span>(test_Y.<span class="built_in">max</span>()) + <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># plot comparison results</span></span><br><span class="line">    fig = plt.figure(figsize = (<span class="number">8</span>, <span class="number">6</span>))</span><br><span class="line">    ax0 = fig.add_subplot(<span class="number">111</span>)</span><br><span class="line">    ax0.scatter(test_Y, pred_Y)</span><br><span class="line">    ax0.plot([ylim_min, ylim_max], [ylim_min, ylim_max], <span class="string">&#x27;--k&#x27;</span>)</span><br><span class="line">    ax0.set_xlabel(<span class="string">&#x27;True Target&#x27;</span>, fontsize = <span class="number">15</span>)</span><br><span class="line">    ax0.set_ylabel(<span class="string">&#x27;Target predicted&#x27;</span>, fontsize = <span class="number">15</span>)</span><br><span class="line">    ax0.set_title(Title , fontsize = <span class="number">16</span>)</span><br><span class="line">    ax0.text(ylim_min + <span class="number">2</span>, ylim_max - <span class="number">4</span>, <span class="string">r&#x27;$R^2$ = %.2f, $MAE$ = %.2f&#x27;</span> %(r2_score(test_Y, pred_Y), </span><br><span class="line">                mean_absolute_error(test_Y, pred_Y)), fontsize = <span class="number">14</span>)</span><br><span class="line">    ax0.text(ylim_min + <span class="number">2</span>, ylim_max - <span class="number">5</span>, <span class="string">r&#x27;$MSE$ = %.2f, $RMSE$ = %.2f&#x27;</span> %(mean_squared_error(test_Y, pred_Y), </span><br><span class="line">                mean_squared_error(test_Y, pred_Y, squared=<span class="literal">False</span>)), fontsize = <span class="number">14</span>)</span><br><span class="line">    </span><br><span class="line">    ax0.set_xlim([ylim_min, ylim_max])</span><br><span class="line">    ax0.set_ylim([ylim_min, ylim_max])</span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Plot prediction and real values</span></span><br><span class="line">    plt.figure(figsize = (<span class="number">8</span>, <span class="number">6</span>)) <span class="comment"># length x width</span></span><br><span class="line">    plt.plot(pred_Y, <span class="string">&#x27;r&#x27;</span>, label=<span class="string">&#x27;prediction&#x27;</span>, lw = <span class="number">0.8</span>)</span><br><span class="line">    plt.plot(test_Y, <span class="string">&#x27;b&#x27;</span>, label=<span class="string">&#x27;real&#x27;</span>, lw = <span class="number">0.8</span>)</span><br><span class="line">    plt.xticks(<span class="built_in">range</span>(<span class="number">19</span>), fontsize = <span class="number">15</span>)</span><br><span class="line">    plt.yticks(fontsize = <span class="number">15</span>)</span><br><span class="line">    plt.title(Title, fontsize = <span class="number">16</span>)</span><br><span class="line">    plt.legend(loc=<span class="string">&#x27;best&#x27;</span>, fontsize  = <span class="number">15</span>)</span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Calculate the loss: R2, MAE, MSE, RMSE</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calculate_error</span>(<span class="params">test_data, np_Pred_results, title</span>):</span></span><br><span class="line">    <span class="comment"># Storing error results </span></span><br><span class="line">    R2 = r2_score(test_data, np_Pred_results)</span><br><span class="line">    MAE = mean_absolute_error(test_data, np_Pred_results)</span><br><span class="line">    MSE = mean_squared_error(test_data, np_Pred_results)</span><br><span class="line">    RMSE = mean_squared_error(test_data, np_Pred_results, squared=<span class="literal">False</span>)</span><br><span class="line">    </span><br><span class="line">    error = [title, R2, MAE, MSE, RMSE]</span><br><span class="line">    <span class="keyword">return</span> error</span><br><span class="line"></span><br><span class="line"><span class="comment"># =================== Markov model definition =============================</span></span><br><span class="line"><span class="comment"># The first step: calculate and return transfer matrix (type: np.array)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Markov_trans</span>(<span class="params">data_stru, year_start, year_end</span>):</span></span><br><span class="line">    P = np.identity(<span class="number">4</span>)</span><br><span class="line">    K = np.array([<span class="number">1.0</span>, <span class="number">1.</span>, <span class="number">1.</span>, <span class="number">1.</span>])</span><br><span class="line">    </span><br><span class="line">    year_start_data = data_stru.loc[year_start, :]</span><br><span class="line">    year_end_data = data_stru.loc[year_end,:]</span><br><span class="line">    </span><br><span class="line">    bool_value = np.array(year_end_data &lt; year_start_data)</span><br><span class="line">    i = <span class="number">0</span> <span class="comment"># index</span></span><br><span class="line">    <span class="keyword">for</span> b <span class="keyword">in</span> bool_value:</span><br><span class="line">        <span class="keyword">if</span> b == <span class="literal">False</span>: <span class="comment"># Decrease</span></span><br><span class="line">            K[i] =  year_end_data[i] - year_start_data[i]</span><br><span class="line">        <span class="keyword">elif</span> b == <span class="literal">True</span>: <span class="comment"># Increase</span></span><br><span class="line">            P[i, i] = year_end_data[i]/year_start_data[i]</span><br><span class="line">            K[i] = <span class="number">0</span></span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">          </span><br><span class="line">    KK = <span class="built_in">sum</span>(K)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">        <span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">            <span class="keyword">if</span> (j != n) &amp; (K[j] == <span class="number">0</span>):</span><br><span class="line">                P[j,n] = (<span class="number">1</span>-P[j,j])*K[n]/KK</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># v 为特征值    Q 为特征向量</span></span><br><span class="line">    P = np.<span class="built_in">round</span>(P, <span class="number">3</span>)</span><br><span class="line">    v, Q = la.eig(P)</span><br><span class="line">    <span class="comment"># diag_P = np.round(np.dot(np.dot(la.inv(Q), P), Q), 3)</span></span><br><span class="line">    V = np.diag(v)**((<span class="number">1</span>)/(year_end-year_start))</span><br><span class="line">    Predict_P =  np.<span class="built_in">round</span>(np.dot(np.dot(Q, V), la.inv(Q)), <span class="number">3</span>)</span><br><span class="line">    <span class="keyword">return</span> Predict_P</span><br><span class="line"></span><br><span class="line"><span class="comment"># The second step: calculate and return forecasting result (type: np.array)    </span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Markov_predict</span>(<span class="params">data_stru, P, year_end, year_pred</span>):</span></span><br><span class="line">    year_end_data = data_stru.loc[year_end,:]</span><br><span class="line">    P = np.<span class="built_in">round</span>(P, <span class="number">3</span>)</span><br><span class="line">    v, Q = la.eig(P)</span><br><span class="line">    <span class="comment"># diag_P = np.round(np.dot(np.dot(la.inv(Q), P), Q), 3)</span></span><br><span class="line">    V = np.diag(v)**(year_pred - year_end)</span><br><span class="line">    Predict_P =  np.<span class="built_in">round</span>(np.dot(np.dot(Q, V), la.inv(Q)), <span class="number">3</span>)</span><br><span class="line">    np_year_end_data =np.array(year_end_data)</span><br><span class="line">    Predict_energy_stru = np.around(np.dot(np_year_end_data, Predict_P), <span class="number">3</span>)</span><br><span class="line">    <span class="keyword">return</span> Predict_energy_stru</span><br><span class="line">  </span><br><span class="line"><span class="comment"># Lable</span></span><br><span class="line">regression = <span class="string">&#x27;Markov model&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># =========== Model test based on avarage trans_P ==========================</span></span><br><span class="line">trans_P = [] <span class="comment"># store all transfer matric</span></span><br><span class="line"><span class="keyword">for</span> startY <span class="keyword">in</span> <span class="built_in">range</span>(year_train_start, year_train_end - <span class="number">1</span>):</span><br><span class="line">    <span class="keyword">for</span> endY <span class="keyword">in</span> <span class="built_in">range</span>(startY, year_train_end):</span><br><span class="line">        trans_temp = Markov_trans(year_start = year_train_start, </span><br><span class="line">                        year_end = year_train_end, data_stru = data_stru)</span><br><span class="line">        temp = trans_temp.tolist()</span><br><span class="line">        trans_P.append(temp)</span><br><span class="line"></span><br><span class="line">np_trans_P = np.array(trans_P) <span class="comment"># Transfer list into numpy</span></span><br><span class="line">av_trans_P = np.<span class="built_in">sum</span>(np_trans_P, <span class="number">0</span>)/np_trans_P.shape[<span class="number">0</span>] <span class="comment"># Calculate avarage</span></span><br><span class="line"></span><br><span class="line">Pred_results = [] <span class="comment"># Using average transfer matrix to predict energy structure</span></span><br><span class="line"><span class="keyword">for</span> predY <span class="keyword">in</span> <span class="built_in">range</span>(year_train_end, year_end):</span><br><span class="line">    <span class="comment"># Forecasting</span></span><br><span class="line">    Pred_temp = Markov_predict(data_stru = data_stru, P = av_trans_P, </span><br><span class="line">                            year_end = year_train_end - <span class="number">1</span>, year_pred = predY)</span><br><span class="line">    temp = Pred_temp.tolist() <span class="comment"># Turn numpy.array into list</span></span><br><span class="line">    Pred_results.append(temp) <span class="comment"># It&#x27;s convenient to append value using list</span></span><br><span class="line">    </span><br><span class="line">np_Pred_results = np.array(Pred_results) <span class="comment"># Turn list into np.array</span></span><br><span class="line">Columns = data_stru.columns</span><br><span class="line"><span class="comment"># Plot forecasting result if needed</span></span><br><span class="line"><span class="keyword">if</span> plot_b == <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">        test_Y, pred_Y = test_data[:, i], np_Pred_results[:, i]</span><br><span class="line">        Title = <span class="string">&#x27;&#123;&#125; based on average transfer matrix to predict:&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(regression, </span><br><span class="line">                                    Columns[i])</span><br><span class="line">        plot_result(test_Y, pred_Y, Title)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># Storing error results</span></span><br><span class="line">title = <span class="string">&#x27;average transfer matrix&#x27;</span>  </span><br><span class="line"><span class="comment"># Calculate 4 error</span></span><br><span class="line">error = calculate_error(test_data, np_Pred_results, title)</span><br><span class="line">Error_results.append(error)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ======== Model test based on datas from 1953 to 1999 ==================</span></span><br><span class="line"><span class="keyword">for</span> year_train_start <span class="keyword">in</span> [<span class="number">1953</span>, <span class="number">1998</span>]: <span class="comment"># from &#x27;1953 to 1999&#x27; or &#x27;1998 to 1999&#x27;</span></span><br><span class="line">    year_train_end, year_end = <span class="number">1999</span>, <span class="number">2018</span></span><br><span class="line">    trans_temp = Markov_trans(year_start = year_train_start, </span><br><span class="line">                            year_end = year_train_end, data_stru = data_stru)</span><br><span class="line">    Pred_results = []</span><br><span class="line">    <span class="keyword">for</span> predY <span class="keyword">in</span> <span class="built_in">range</span>(year_train_end, year_end):</span><br><span class="line">        Pred_temp = Markov_predict(data_stru = data_stru, P = trans_temp, </span><br><span class="line">                                year_end = year_train_end - <span class="number">1</span>, year_pred = predY)</span><br><span class="line">        temp = Pred_temp.tolist()</span><br><span class="line">        Pred_results.append(temp)</span><br><span class="line">        </span><br><span class="line">    np_Pred_results = np.array(Pred_results)</span><br><span class="line">    Columns = data_stru.columns</span><br><span class="line">    <span class="keyword">if</span> plot_b == <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">            test_Y, pred_Y = test_data[:, i], np_Pred_results[:, i]</span><br><span class="line">            Title = <span class="string">&#x27;&#123;&#125; based on &#123;&#125; and &#123;&#125; to predict:&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(regression, </span><br><span class="line">                                    year_train_start, year_train_end, Columns[i])             </span><br><span class="line">            plot_result(test_Y, pred_Y, Title)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Storing error results  </span></span><br><span class="line">    title = <span class="string">&#x27;&#123;&#125; step&#x27;</span>.<span class="built_in">format</span>(year_train_end - year_train_start)   </span><br><span class="line">    error = calculate_error(test_data, np_Pred_results, title)</span><br><span class="line">    Error_results.append(error)</span><br><span class="line"></span><br><span class="line">np_error = np.array(Error_results)</span><br><span class="line">columns = [<span class="string">&#x27;Transfer Matrix&#x27;</span>, <span class="string">&#x27;R2&#x27;</span>, <span class="string">&#x27;MAE&#x27;</span>, <span class="string">&#x27;MSE&#x27;</span>, <span class="string">&#x27;RMSE&#x27;</span>]</span><br><span class="line">pd_error = pd.DataFrame(np_error, columns = columns, dtype = <span class="string">&#x27;object&#x27;</span>)</span><br><span class="line">pd_error.to_excel(<span class="string">&#x27;Error result.xlsx&#x27;</span>, encoding = <span class="string">&#x27;utf_8_sig&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h1 id="traditional-models">2 Traditional models</h1>
<ul>
<li>Ridge</li>
<li>Lasso</li>
<li>PLS</li>
<li>MLP</li>
<li>Linear SVM</li>
<li>DecisionTree</li>
</ul>
<p>不同之处在于104 行开始的模型定义不同</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ========================= Import modules ====================================</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> Ridge, Lasso</span><br><span class="line"><span class="keyword">from</span> sklearn.neural_network <span class="keyword">import</span> MLPRegressor</span><br><span class="line"><span class="keyword">from</span> sklearn.cross_decomposition <span class="keyword">import</span> PLSRegression</span><br><span class="line"><span class="keyword">from</span> sklearn.svm <span class="keyword">import</span> LinearSVR</span><br><span class="line"><span class="keyword">from</span> sklearn.tree <span class="keyword">import</span> DecisionTreeRegressor</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> mean_absolute_error, r2_score</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> mean_squared_error</span><br><span class="line"></span><br><span class="line"><span class="comment"># Plot module</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = [<span class="string">&#x27;SimHei&#x27;</span>]</span><br><span class="line"><span class="comment"># Microsoft YaHei, Times New Roman</span></span><br><span class="line">plt.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ======================== Preparation =======================================</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Read datafile</span></span><br><span class="line">data_stru = pd.read_excel(<span class="string">&#x27;./Data.xlsx&#x27;</span>, header = <span class="number">0</span>, </span><br><span class="line">                          sheet_name = <span class="number">0</span>, index_col= <span class="number">0</span>)</span><br><span class="line">data_stru = data_stru.dropna()</span><br><span class="line">dataset = data_stru.values</span><br><span class="line">dataset = dataset.astype(<span class="string">&#x27;float32&#x27;</span>)</span><br><span class="line"></span><br><span class="line">Columns = data_stru.columns <span class="comment"># columns name</span></span><br><span class="line">num_year = <span class="built_in">len</span>(data_stru) <span class="comment"># the length of the dataset</span></span><br><span class="line">train_percent = <span class="number">0.70</span> <span class="comment"># Set the first 70% data as train set</span></span><br><span class="line">test_percent = <span class="number">1</span> - train_percent</span><br><span class="line">Error_results = [] <span class="comment"># Store all error results</span></span><br><span class="line">input_size = <span class="number">10</span> <span class="comment"># Feed the previous 10 years as the input</span></span><br><span class="line">num_features = <span class="number">4</span> <span class="comment"># 4 energy categories</span></span><br><span class="line">plot_b = <span class="literal">False</span> <span class="comment"># Choose whether plot result</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># # Put NN calculating module into GPU if available</span></span><br><span class="line"><span class="comment"># device = torch.device(&quot;cuda&quot; if torch.cuda.is_available() else &quot;cpu&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Feed the previous 10 years as the input and the 11th year as prediction output</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_dataset</span>(<span class="params">dataset, look_back = input_size</span>):</span></span><br><span class="line">    dataX, dataY = [], []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(dataset) - look_back):</span><br><span class="line">        a = dataset[i:(i + look_back)]</span><br><span class="line">        dataX.append(a)</span><br><span class="line">        dataY.append(dataset[i + look_back])</span><br><span class="line">    <span class="keyword">return</span> np.array(dataX), np.array(dataY)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Input datasets and output datasets</span></span><br><span class="line">data_X, data_Y = create_dataset(dataset)</span><br><span class="line">ylim_min = np.<span class="built_in">round</span>(data_Y.<span class="built_in">min</span>()) - <span class="number">1</span></span><br><span class="line">ylim_max = np.<span class="built_in">round</span>(data_Y.<span class="built_in">max</span>()) + <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Divide training set and test set</span></span><br><span class="line">train_X, test_X, train_Y, test_Y = train_test_split(data_X, data_Y, </span><br><span class="line">        shuffle = <span class="literal">False</span>, test_size = test_percent) </span><br><span class="line"><span class="comment"># shuffle: don&#x27;t shuffle data</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ======================== Plot Results =====================================</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plot_result</span>(<span class="params">test_Y, pred_Y, Title</span>):</span></span><br><span class="line">    ylim_min = np.<span class="built_in">round</span>(test_Y.<span class="built_in">min</span>()) - <span class="number">1</span></span><br><span class="line">    ylim_max = np.<span class="built_in">round</span>(test_Y.<span class="built_in">max</span>()) + <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># plot comparison results</span></span><br><span class="line">    fig = plt.figure(figsize = (<span class="number">8</span>, <span class="number">6</span>))</span><br><span class="line">    ax0 = fig.add_subplot(<span class="number">111</span>)</span><br><span class="line">    ax0.scatter(test_Y, pred_Y)</span><br><span class="line">    ax0.plot([ylim_min, ylim_max], [ylim_min, ylim_max], <span class="string">&#x27;--k&#x27;</span>)</span><br><span class="line">    ax0.set_xlabel(<span class="string">&#x27;True Target&#x27;</span>, fontsize = <span class="number">15</span>)</span><br><span class="line">    ax0.set_ylabel(<span class="string">&#x27;Target predicted&#x27;</span>, fontsize = <span class="number">15</span>)</span><br><span class="line">    ax0.set_title(Title , fontsize = <span class="number">16</span>)</span><br><span class="line">    ax0.text(ylim_min + <span class="number">2</span>, ylim_max - <span class="number">4</span>, <span class="string">r&#x27;$R^2$ = %.2f, $MAE$ = %.2f&#x27;</span> %(r2_score(test_Y, pred_Y), </span><br><span class="line">                mean_absolute_error(test_Y, pred_Y)), fontsize = <span class="number">14</span>)</span><br><span class="line">    ax0.text(ylim_min + <span class="number">2</span>, ylim_max - <span class="number">5</span>, <span class="string">r&#x27;$MSE$ = %.2f, $RMSE$ = %.2f&#x27;</span> %(mean_squared_error(test_Y, pred_Y), </span><br><span class="line">                mean_squared_error(test_Y, pred_Y, squared=<span class="literal">False</span>)), fontsize = <span class="number">14</span>)</span><br><span class="line">    </span><br><span class="line">    ax0.set_xlim([ylim_min, ylim_max])</span><br><span class="line">    ax0.set_ylim([ylim_min, ylim_max])</span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Plot prediction and real values</span></span><br><span class="line">    plt.figure(figsize = (<span class="number">8</span>, <span class="number">6</span>)) <span class="comment"># length x width</span></span><br><span class="line">    plt.plot(pred_Y, <span class="string">&#x27;r&#x27;</span>, label=<span class="string">&#x27;prediction&#x27;</span>, lw = <span class="number">0.8</span>)</span><br><span class="line">    plt.plot(test_Y, <span class="string">&#x27;b&#x27;</span>, label=<span class="string">&#x27;real&#x27;</span>, lw = <span class="number">0.8</span>)</span><br><span class="line">    plt.xticks(<span class="built_in">range</span>(<span class="number">19</span>), fontsize = <span class="number">15</span>)</span><br><span class="line">    plt.yticks(fontsize = <span class="number">15</span>)</span><br><span class="line">    plt.title(Title, fontsize = <span class="number">16</span>)</span><br><span class="line">    plt.legend(loc=<span class="string">&#x27;best&#x27;</span>, fontsize  = <span class="number">15</span>)</span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Calculate the loss: R2, MAE, MSE, RMSE</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calculate_error</span>(<span class="params">test_data, np_Pred_results, title</span>):</span></span><br><span class="line">    <span class="comment"># Storing error results</span></span><br><span class="line">    R2 = <span class="built_in">float</span>(<span class="string">&#x27;&#123;:.5f&#125;&#x27;</span>.<span class="built_in">format</span>(r2_score(test_data, np_Pred_results)))</span><br><span class="line">    MAE = <span class="built_in">float</span>(<span class="string">&#x27;&#123;:.5f&#125;&#x27;</span>.<span class="built_in">format</span>(mean_absolute_error(test_data, np_Pred_results)))</span><br><span class="line">    MSE = <span class="built_in">float</span>(<span class="string">&#x27;&#123;:.5f&#125;&#x27;</span>.<span class="built_in">format</span>(mean_squared_error(test_data, np_Pred_results)))</span><br><span class="line">    RMSE =<span class="built_in">float</span>(<span class="string">&#x27;&#123;:.5f&#125;&#x27;</span>.<span class="built_in">format</span>( mean_squared_error(test_data, np_Pred_results, squared=<span class="literal">False</span>)))</span><br><span class="line">    error = [title, R2, MAE, MSE, RMSE]</span><br><span class="line">    <span class="keyword">return</span> error</span><br><span class="line"></span><br><span class="line"><span class="comment"># ================= Ridge Regression =============================</span></span><br><span class="line"><span class="comment"># Ridge model</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">predict_model</span>(<span class="params">model_train_X, model_train_Y</span>):</span></span><br><span class="line">    regr = Ridge()</span><br><span class="line">    regr.fit(model_train_X, model_train_Y)</span><br><span class="line">    model_pred_Y = regr.predict(model_test_X)</span><br><span class="line">    regression_name = <span class="string">&#x27;Ridge Regression&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> model_pred_Y, regression_name</span><br><span class="line"></span><br><span class="line"><span class="comment"># # Lasso model</span></span><br><span class="line"><span class="comment"># def predict_model(model_train_X, model_train_Y):</span></span><br><span class="line"><span class="comment">#     regr = Lasso()</span></span><br><span class="line"><span class="comment">#     regr.fit(model_train_X, model_train_Y)</span></span><br><span class="line"><span class="comment">#     model_pred_Y = regr.predict(model_test_X)</span></span><br><span class="line"><span class="comment">#     regression_name = &#x27;Lasso Model&#x27;</span></span><br><span class="line"><span class="comment">#     return model_pred_Y, regression_name</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># # PLS model</span></span><br><span class="line"><span class="comment"># def predict_model(model_train_X, model_train_Y):</span></span><br><span class="line"><span class="comment">#     regr = PLSRegression(n_components=1)</span></span><br><span class="line"><span class="comment">#     regr.fit(model_train_X, model_train_Y)</span></span><br><span class="line"><span class="comment">#     model_pred_Y = regr.predict(model_test_X)</span></span><br><span class="line"><span class="comment">#     regression_name = &#x27;PLS Regression&#x27;</span></span><br><span class="line"><span class="comment">#     return model_pred_Y, regression_name</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ================= MLP Regression =============================</span></span><br><span class="line"><span class="comment"># # MLP model</span></span><br><span class="line"><span class="comment"># def predict_model(model_train_X, model_train_Y):</span></span><br><span class="line"><span class="comment">#     regr = MLPRegressor(random_state = 1, max_iter = 500)</span></span><br><span class="line"><span class="comment">#     regr.fit(model_train_X, model_train_Y)</span></span><br><span class="line"><span class="comment">#     model_pred_Y = regr.predict(model_test_X)</span></span><br><span class="line"><span class="comment">#     regression_name = &#x27;MLP Regression&#x27;</span></span><br><span class="line"><span class="comment">#     return model_pred_Y, regression_name</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ================= Linear SVM regression =============================</span></span><br><span class="line"><span class="comment"># # SVC model</span></span><br><span class="line"><span class="comment"># def predict_model(model_train_X, model_train_Y):</span></span><br><span class="line"><span class="comment">#     regr = LinearSVR(random_state= 0, tol= 1e-5)</span></span><br><span class="line"><span class="comment">#     regr.fit(model_train_X, model_train_Y)</span></span><br><span class="line"><span class="comment">#     model_pred_Y = regr.predict(model_test_X)</span></span><br><span class="line"><span class="comment">#     regression_name = &#x27;Linear SVR Regression&#x27;</span></span><br><span class="line"><span class="comment">#     return model_pred_Y, regression_name</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ================= DecisionTree Regressor =============================</span></span><br><span class="line"><span class="comment"># # DecisionTree model</span></span><br><span class="line"><span class="comment"># def predict_model(model_train_X, model_train_Y):</span></span><br><span class="line"><span class="comment">#     regr = DecisionTreeRegressor(random_state=0)</span></span><br><span class="line"><span class="comment">#     regr.fit(model_train_X, model_train_Y)</span></span><br><span class="line"><span class="comment">#     model_pred_Y = regr.predict(model_test_X)</span></span><br><span class="line"><span class="comment">#     regression_name = &#x27;Decision-Tree Regression&#x27;</span></span><br><span class="line"><span class="comment">#     return model_pred_Y, regression_name</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Forecasting</span></span><br><span class="line">pred_result = [] <span class="comment"># to store prediction results</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">    <span class="keyword">if</span> i &lt; <span class="number">3</span>:</span><br><span class="line">        model_train_X = train_X[:, :, i].reshape(-<span class="number">1</span>, input_size)</span><br><span class="line">        model_test_X = test_X[:, :, i].reshape(-<span class="number">1</span>, input_size)</span><br><span class="line">        model_train_Y = train_Y[:, i].reshape(-<span class="number">1</span>)</span><br><span class="line">        model_test_Y = test_Y[:, i].reshape(-<span class="number">1</span>)</span><br><span class="line">        model_pred_Y, regression = predict_model(model_train_X = model_train_X,</span><br><span class="line">                    model_train_Y = model_train_Y)</span><br><span class="line">        pred_result.append(model_pred_Y.tolist())</span><br><span class="line">    <span class="keyword">elif</span> i == <span class="number">3</span>:</span><br><span class="line">        <span class="comment"># Calculate the last energy consumption percent</span></span><br><span class="line">        np_pred_result = np.array(pred_result).T</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(np_pred_result.shape) == <span class="number">3</span>: <span class="comment"># Model output is 3-dimension</span></span><br><span class="line">            model_pred_Y = <span class="number">100</span> - np_pred_result.<span class="built_in">sum</span>(<span class="number">2</span>).reshape(-<span class="number">1</span>, <span class="number">1</span>) <span class="comment"># PLS model</span></span><br><span class="line">            np_pred_result = np.concatenate((np_pred_result[<span class="number">0</span>], model_pred_Y), axis = <span class="number">1</span>) <span class="comment"># for PLS model</span></span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">len</span>(np_pred_result.shape) == <span class="number">2</span>: <span class="comment"># Model output is 2-dimension</span></span><br><span class="line">            model_pred_Y = <span class="number">100</span> - np_pred_result.<span class="built_in">sum</span>(<span class="number">1</span>).reshape(-<span class="number">1</span>, <span class="number">1</span>) <span class="comment"># Lasso model </span></span><br><span class="line">            np_pred_result = np.concatenate((np_pred_result, model_pred_Y), axis = <span class="number">1</span>) <span class="comment"># for Lasso model</span></span><br><span class="line">    Title = <span class="string">&#x27;Using &#123;&#125; to predict:&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(regression, Columns[i])</span><br><span class="line">    <span class="keyword">if</span> plot_b == <span class="literal">True</span>:</span><br><span class="line">        plot_result(model_test_Y, model_pred_Y, Title) </span><br><span class="line">        </span><br><span class="line"><span class="comment"># Updata Error table</span></span><br><span class="line">error = calculate_error(test_Y, np_pred_result, regression)</span><br><span class="line">np_error = np.array(error).reshape(<span class="number">1</span>, -<span class="number">1</span>)</span><br><span class="line">columns = [<span class="string">&#x27;Transfer Matrix&#x27;</span>, <span class="string">&#x27;R2&#x27;</span>, <span class="string">&#x27;MAE&#x27;</span>, <span class="string">&#x27;MSE&#x27;</span>, <span class="string">&#x27;RMSE&#x27;</span>]</span><br><span class="line">pd_error = pd.DataFrame(np_error, columns = columns)</span><br><span class="line"></span><br><span class="line">error_excel =  pd.read_excel(<span class="string">&#x27;./Error result.xlsx&#x27;</span>, header = <span class="number">0</span>, sheet_name = <span class="number">0</span>, index_col= <span class="literal">None</span>)</span><br><span class="line">res = pd.concat([error_excel, pd_error], axis = <span class="number">0</span>, ignore_index = <span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Updata predict table</span></span><br><span class="line">model_col = []</span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> Columns:</span><br><span class="line">    temp = <span class="string">&#x27;&#123;&#125;_&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(c, regression.split(<span class="string">&#x27; &#x27;</span>)[<span class="number">0</span>])</span><br><span class="line">    model_col.append(temp)</span><br><span class="line">pd_pred_result = pd.DataFrame(np_pred_result, columns = model_col, index = <span class="built_in">range</span>(<span class="number">2001</span>, <span class="number">2018</span>))</span><br><span class="line">pred_excel =  pd.read_excel(<span class="string">&#x27;./Predict results.xlsx&#x27;</span>, header = <span class="number">0</span>, sheet_name = <span class="number">0</span>, index_col= <span class="number">0</span>)</span><br><span class="line">pred_res = pd.concat([pred_excel, pd_pred_result], axis = <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Store updated data</span></span><br><span class="line">res.to_excel(<span class="string">&#x27;./Error result.xlsx&#x27;</span>, encoding = <span class="string">&#x27;utf_8_sig&#x27;</span>, header = <span class="literal">True</span>, index = <span class="literal">False</span>)</span><br><span class="line">pred_res.to_excel(<span class="string">&#x27;./Predict results.xlsx&#x27;</span>, encoding = <span class="string">&#x27;utf_8_sig&#x27;</span>,  header = <span class="literal">True</span>, index = <span class="literal">True</span>)</span><br></pre></td></tr></table></figure>
<h1 id="linear-nn-model">3 Linear NN model</h1>
]]></content>
      <categories>
        <category>Class Notes</category>
        <category>Energy economics</category>
      </categories>
      <tags>
        <tag>Deep learning</tag>
        <tag>Prediction</tag>
      </tags>
  </entry>
  <entry>
    <title>Matplotlib</title>
    <url>/2020/11/30/Matplotlib/</url>
    <content><![CDATA[<h1 id="introduction">1 Introduction</h1>
<ul>
<li>中文显示乱码问题</li>
</ul>
<p>Matplotlib 库缺少中文字体，因此在图标上显示中文会出现乱码，解决办法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pyplt <span class="keyword">import</span> mpl</span><br><span class="line">mpl.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = [<span class="string">&#x27;SimHei&#x27;</span>]</span><br><span class="line">mpl.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 或</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = [<span class="string">&#x27;SimHei&#x27;</span>]</span><br><span class="line">plt.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="literal">False</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h1 id="steps">2 Steps</h1>
<ul>
<li>import module and set font style to avoid messy code</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>]=[<span class="string">&#x27;SimHei&#x27;</span>]</span><br><span class="line">plt.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>]=<span class="literal">False</span></span><br></pre></td></tr></table></figure>
<ul>
<li>step one: create figure and fix size (inch)</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plt.figure(figsize = (<span class="number">12</span>, <span class="number">8</span>)) <span class="comment"># length x width</span></span><br></pre></td></tr></table></figure>
<ul>
<li>setp two: generate data</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">start_val = <span class="number">0</span> <span class="comment"># start value</span></span><br><span class="line">stop_val = <span class="number">10</span> <span class="comment"># end value</span></span><br><span class="line">num_val = <span class="number">1000</span> <span class="comment"># samples number</span></span><br><span class="line">x = np.linspace(start_val, stop_val, num_val)</span><br><span class="line">y = np.sin(x)</span><br><span class="line">plt.plot(x, y, <span class="string">&#x27;--g,&#x27;</span>, lw = <span class="number">2</span>, label = <span class="string">&#x27;$sin(x)$&#x27;</span>)</span><br></pre></td></tr></table></figure>
<ul>
<li>step three: adjust axis and set label</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 调整坐标范围</span></span><br><span class="line">x_min, y_max = <span class="number">0</span>, <span class="number">10</span></span><br><span class="line">y_min, y_max = <span class="number">0</span>, <span class="number">1.5</span></span><br><span class="line">plt.xlim(x_min, x_max)</span><br><span class="line">plt.ylim(y_min, y_max)</span><br><span class="line"></span><br><span class="line"><span class="comment"># set axis label</span></span><br><span class="line">plt.xlabel(<span class="string">&#x27;x轴&#x27;</span>, fontsize = <span class="number">15</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;y轴&#x27;</span>, fontsize = <span class="number">15</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ticks: 刻度线</span></span><br><span class="line">x_location = np.arange(<span class="number">0</span>, <span class="number">10</span>, <span class="number">2</span>)</span><br><span class="line">x_labels = [<span class="string">&#x27;2019-01-01&#x27;</span>, <span class="string">&#x27;2019-02-01&#x27;</span>, <span class="string">&#x27;2019-03-01&#x27;</span>, <span class="string">&#x27;2019-04-01&#x27;</span>, <span class="string">&#x27;2019-05-01&#x27;</span>]</span><br><span class="line">y_location = np.arange(-<span class="number">1</span>, <span class="number">1.5</span>, <span class="number">1</span>)</span><br><span class="line">y_labels = [<span class="string">u&#x27;minimum&#x27;</span>, <span class="string">u&#x27;zero&#x27;</span>, <span class="string">u&#x27;maximum&#x27;</span>]</span><br><span class="line">plt.xticks(x_location, x_labels, rotation = <span class="number">45</span>, fontsize = <span class="number">15</span>)</span><br><span class="line">plt.yticks(y_location, y_labels, fontsize = <span class="number">15</span>)</span><br></pre></td></tr></table></figure>
<ul>
<li>step four: set grid and legend</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># grid</span></span><br><span class="line">plt.grid(<span class="literal">True</span>, ls = <span class="string">&#x27;:&#x27;</span>, color = <span class="string">&#x27;r&#x27;</span>, alpha = <span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># title</span></span><br><span class="line">plt.title(<span class="string">&#x27;函数式绘图 vs 对象式绘图&#x27;</span>, fontsize = <span class="number">25</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># legend</span></span><br><span class="line">plt.legend(loc = <span class="string">&#x27;upper right&#x27;</span>, fontsize  = <span class="number">15</span>)</span><br><span class="line">plt.show(</span><br></pre></td></tr></table></figure>
<h2 id="函数式绘图">2.1 函数式绘图</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = [<span class="string">&#x27;SimHei&#x27;</span>]</span><br><span class="line">plt.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># step one: create figure and fix size</span></span><br><span class="line">plt.figure(figsize = (<span class="number">12</span>, <span class="number">6</span>)) <span class="comment"># length x width</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># step two: generate data</span></span><br><span class="line">start_val = <span class="number">0</span> <span class="comment"># start value</span></span><br><span class="line">stop_val = <span class="number">10</span> <span class="comment"># end value</span></span><br><span class="line">num_val = <span class="number">1000</span> <span class="comment"># samples number</span></span><br><span class="line">x = np.linspace(start_val, stop_val, num_val)</span><br><span class="line">y = np.sin(x)</span><br><span class="line">plt.plot(x, y, <span class="string">&#x27;--g,&#x27;</span>, lw = <span class="number">2</span>, label = <span class="string">&#x27;$sin(x)$&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># step three: adjust axis</span></span><br><span class="line">x_min = <span class="number">0</span></span><br><span class="line">x_max = <span class="number">10</span></span><br><span class="line">y_min = <span class="number">0</span></span><br><span class="line">y_max = <span class="number">1.5</span></span><br><span class="line">plt.xlim(x_min, x_max)</span><br><span class="line">plt.ylim(y_min, y_max)</span><br><span class="line"></span><br><span class="line"><span class="comment"># step four: set axis label</span></span><br><span class="line">plt.xlabel(<span class="string">&#x27;x轴&#x27;</span>, fontsize = <span class="number">15</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;y轴&#x27;</span>, fontsize = <span class="number">15</span>)</span><br><span class="line"></span><br><span class="line">x_location = np.arange(<span class="number">0</span>, <span class="number">10</span>, <span class="number">2</span>)</span><br><span class="line">x_labels = [<span class="string">&#x27;2019-01-01&#x27;</span>, <span class="string">&#x27;2019-02-01&#x27;</span>, <span class="string">&#x27;2019-03-01&#x27;</span>, <span class="string">&#x27;2019-04-01&#x27;</span>, <span class="string">&#x27;2019-05-01&#x27;</span>]</span><br><span class="line">y_location = np.arange(-<span class="number">1</span>, <span class="number">1.5</span>, <span class="number">1</span>)</span><br><span class="line">y_labels = [<span class="string">u&#x27;minimum&#x27;</span>, <span class="string">u&#x27;zero&#x27;</span>, <span class="string">u&#x27;maximum&#x27;</span>]</span><br><span class="line">plt.xticks(x_location, x_labels, rotation = <span class="number">45</span>, fontsize = <span class="number">15</span>)</span><br><span class="line">plt.yticks(y_location, y_labels, fontsize = <span class="number">15</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># step five: set grid</span></span><br><span class="line"><span class="comment"># ls: linestyle</span></span><br><span class="line">plt.grid(<span class="literal">True</span>, ls = <span class="string">&#x27;:&#x27;</span>, color = <span class="string">&#x27;r&#x27;</span>, alpha = <span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line">plt.title(<span class="string">&#x27;函数式绘图&#x27;</span>, fontsize = <span class="number">25</span>)</span><br><span class="line">plt.legend(loc = <span class="string">&#x27;upper right&#x27;</span>, fontsize  = <span class="number">15</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<p>result:<img src="https://s3.ax1x.com/2020/11/30/DgWKVf.md.png" /></p>
<center>
fig 2-1 函数式绘图
</center>
<h2 id="对象式绘图">2.2 对象式绘图</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt </span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = [<span class="string">&#x27;SimHei&#x27;</span>]</span><br><span class="line">plt.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 对象式绘图</span></span><br><span class="line"><span class="comment"># pyplot 模块中的 figure() 函数创建名为 fig 的 Figure 对象</span></span><br><span class="line">fig = plt.figure(figsize = (<span class="number">12</span>, <span class="number">8</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在 Figure 对象中创建一个 Axes 对象，每个 Axes 对象即为一个绘图区域</span></span><br><span class="line">ax = fig.add_subplot(<span class="number">111</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># generate data</span></span><br><span class="line">start_val, stop_val, num_val = <span class="number">0</span>, <span class="number">10</span>, <span class="number">1000</span></span><br><span class="line">x = np.linspace(start_val, stop_val, num_val)</span><br><span class="line">y = np.sin(x)</span><br><span class="line"></span><br><span class="line"><span class="comment"># y = sin(x)</span></span><br><span class="line"><span class="comment"># &#x27;--g,&#x27;: format_string, equals with a combination of linestyle, color, market, 即折线、绿色、像素点</span></span><br><span class="line">ax.plot(x, y, <span class="string">&#x27;--g&#x27;</span>, lw = <span class="number">2</span>, label = <span class="string">&#x27;sin(x)&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调整坐标范围</span></span><br><span class="line">x_min, x_max = <span class="number">0</span>, <span class="number">10</span></span><br><span class="line">y_min, y_max = <span class="number">0</span>, <span class="number">1.5</span></span><br><span class="line">ax.set_xlim(x_min, x_max)</span><br><span class="line">ax.set_ylim(y_min, y_max)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置坐标轴标签</span></span><br><span class="line">plt.xlabel(<span class="string">&#x27;x轴&#x27;</span>, fontsize = <span class="number">15</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;y轴&#x27;</span>, fontsize = <span class="number">15</span>)</span><br><span class="line"></span><br><span class="line">x_location = np.arange(<span class="number">0</span>, <span class="number">10</span>, <span class="number">2</span>)</span><br><span class="line">x_labels = [<span class="string">&#x27;2019-01-01&#x27;</span>, <span class="string">&#x27;2019-02-01&#x27;</span>, <span class="string">&#x27;2019-03-01&#x27;</span>, <span class="string">&#x27;2019-04-01&#x27;</span>, <span class="string">&#x27;2019-05-01&#x27;</span>]</span><br><span class="line">y_location = np.arange(-<span class="number">1</span>, <span class="number">1.5</span>, <span class="number">1</span>)</span><br><span class="line">y_labels = [<span class="string">u&#x27;minimum&#x27;</span>, <span class="string">u&#x27;zero&#x27;</span>, <span class="string">u&#x27;maximum&#x27;</span>]</span><br><span class="line">plt.xticks(x_location, x_labels, rotation = <span class="number">45</span>, fontsize = <span class="number">15</span>)</span><br><span class="line">plt.yticks(y_location, y_labels, fontsize = <span class="number">15</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ls: linestyle</span></span><br><span class="line">plt.grid(<span class="literal">True</span>, ls = <span class="string">&#x27;:&#x27;</span>, color = <span class="string">&#x27;r&#x27;</span>, alpha = <span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line">plt.title(<span class="string">&#x27;函数式绘图 vs 对象式绘图&#x27;</span>, fontsize = <span class="number">25</span>)</span><br><span class="line">plt.legend(loc = <span class="string">&#x27;upper right&#x27;</span>, fontsize  = <span class="number">15</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<p>result:<img src="https://s3.ax1x.com/2020/11/30/DgW1Pg.md.png" /></p>
<center>
fig 2-2 对象式绘图
</center>
<h1 id="figure-types">3 Figure types</h1>
<h2 id="line-attributes">3.1 Line attributes</h2>
<p>plot() 函数中，可设置参数以调整线条的属性：</p>
<ul>
<li>linestyle: 设定线条类型</li>
<li>color: 指定线条的颜色</li>
<li>marker: 指定线条的标记风格</li>
<li>linewidth: 设定线条的宽度</li>
<li>label: 设置线条的标签</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">start_val, stop_val, num_val = <span class="number">0</span>, <span class="number">10</span>, <span class="number">1000</span></span><br><span class="line">x = np.linspace(start_val, stop_val, num_val)</span><br><span class="line">y = np.sin(x)</span><br><span class="line"></span><br><span class="line"><span class="comment"># y = sin(x)</span></span><br><span class="line"><span class="comment"># &#x27;--g,&#x27;: format_string, equals with a combination of linestyle, color, market, 即折线、绿色、像素点</span></span><br><span class="line">ax.plot(x, y, <span class="string">&#x27;--g&#x27;</span>, lw = <span class="number">2</span>, label = <span class="string">&#x27;$sin(x)$&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h2 id="标注点的绘制">3.2 标注点的绘制</h2>
<p>当要在图形上给数据添加指向性注释文本时，可以使用 Matplotlib 的 annotate() 函数，支持箭头指示，方便在合适的位置添加描述信息。关键参数如下：</p>
<ul>
<li>s：注释文本内容</li>
<li>xy：备注是的坐标点，二维元组格式 (x, y)</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"> xy : (<span class="built_in">float</span>, <span class="built_in">float</span>)</span><br><span class="line"><span class="comment"># The point *(x,y)* to annotate.</span></span><br></pre></td></tr></table></figure>
<ul>
<li>xytext：注释文本的坐标点，二维元组格式 (x, y)</li>
<li>xycoords：被注释点的坐标系属性，默认为 'data'</li>
<li>textcoords：设置注释文本的坐标系属性，默认与 xycoords 属性值相同，通常设置为 'offset points' or 'offset pixels'， 即相对于被注释点 xy 的偏移量</li>
<li>arrowprops：设置箭头的样式，dict 格式</li>
</ul>
<p>If 'arrowprops' does not contain the key ' arrowstyle', the allowed keys are:</p>
<center>
tab 5-1 arrowstyle key-1
</center>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">Key</th>
<th style="text-align: left;">Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">width</td>
<td style="text-align: left;">The width of the arrow in points</td>
</tr>
<tr class="even">
<td style="text-align: center;">headwidth</td>
<td style="text-align: left;">The width of the base of the arrow head in points</td>
</tr>
<tr class="odd">
<td style="text-align: center;">headlength</td>
<td style="text-align: left;">The length of the arrow head in points</td>
</tr>
<tr class="even">
<td style="text-align: center;">shrink</td>
<td style="text-align: left;">Fraction of total length to shrink from both ends</td>
</tr>
<tr class="odd">
<td style="text-align: center;">?</td>
<td style="text-align: left;">Any key to <code>matplotlib.patches.FancyArrowPatch</code></td>
</tr>
</tbody>
</table>
<p>如果 arrowprops 包含了关键词 ' arrowstyle'， the above keys are forbidden. The allowed values of 'arrowstyle' are:</p>
<center>
tab 5-2 arrowstyle key-2
</center>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">Name</th>
<th style="text-align: center;">Attrs</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;"><code>'-'</code></td>
<td style="text-align: center;">None</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>'-&gt;'</code></td>
<td style="text-align: center;">head_length=0.4,head_width=0.2</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>'-['</code></td>
<td style="text-align: center;">widthB=1.0,lengthB=0.2,angleB=None</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>'|-|'</code></td>
<td style="text-align: center;">widthA=1.0,widthB=1.0</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>'-|&gt;'</code></td>
<td style="text-align: center;">head_length=0.4,head_width=0.2</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>'&lt;-'</code></td>
<td style="text-align: center;">head_length=0.4,head_width=0.2</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>'&lt;-&gt;'</code></td>
<td style="text-align: center;">head_length=0.4,head_width=0.2</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>'&lt;|-'</code></td>
<td style="text-align: center;">head_length=0.4,head_width=0.2</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>'&lt;|-|&gt;'</code></td>
<td style="text-align: center;">head_length=0.4,head_width=0.2</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>'fancy'</code></td>
<td style="text-align: center;">head_length=0.4,head_width=0.4,tail_width=0.4</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>'simple'</code></td>
<td style="text-align: center;">head_length=0.5,head_width=0.5,tail_width=0.2</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>'wedge'</code></td>
<td style="text-align: center;">tail_width=0.3,shrink_factor=0.5</td>
</tr>
</tbody>
</table>
<p>Valid keys for <code>~matplotlib.patches.FancyArrowPatch</code> are:</p>
<center>
tab 5-3 ~matplotlib.patches.FancyArrowPatch
</center>
<table>
<thead>
<tr class="header">
<th>Key</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>arrowstyle</td>
<td>the arrow style</td>
</tr>
<tr class="even">
<td>connectionstyle</td>
<td>the connection style</td>
</tr>
<tr class="odd">
<td>relpos</td>
<td>default is (0.5, 0.5)</td>
</tr>
<tr class="even">
<td>patchA</td>
<td>default is bounding box of the text</td>
</tr>
<tr class="odd">
<td>patchB</td>
<td>default is None</td>
</tr>
<tr class="even">
<td>shrinkA</td>
<td>default is 2 points</td>
</tr>
<tr class="odd">
<td>shrinkB</td>
<td>default is 2 points</td>
</tr>
<tr class="even">
<td>mutation_scale</td>
<td>default is text size (in points)</td>
</tr>
<tr class="odd">
<td>mutation_aspect</td>
<td>default is 1</td>
</tr>
<tr class="even">
<td>?</td>
<td>any key for <code>matplotlib.patches.PathPatch</code></td>
</tr>
</tbody>
</table>
<ul>
<li>bbox：设置文本周围所添加的外框属性</li>
</ul>
<p>Case 1:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># add annotation</span></span><br><span class="line">ax.annotate(<span class="string">u&#x27;The top point&#x27;</span>,</span><br><span class="line">            xy = (np.pi/<span class="number">2</span>, <span class="number">1</span>), <span class="comment"># 箭头指向点的坐标</span></span><br><span class="line">            xytext = (np.pi/<span class="number">2</span>, <span class="number">1.3</span>), <span class="comment"># 注释文本左端的坐标</span></span><br><span class="line">            weight = <span class="string">&#x27;regular&#x27;</span>, <span class="comment"># 注释文本的字体粗细风格，bold：粗体，regular：正常粗细</span></span><br><span class="line">            color = <span class="string">&#x27;g&#x27;</span>, <span class="comment"># 注释文本颜色，green</span></span><br><span class="line">            fontsize = <span class="number">15</span>, <span class="comment"># 注释文本字体大小</span></span><br><span class="line">            arrowprops = &#123; <span class="comment"># arrowprops： arrow properties，以字典格式设置箭头属性</span></span><br><span class="line">                <span class="string">&#x27;arrowstyle&#x27;</span>: <span class="string">&#x27;-&gt;&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;connectionstyle&#x27;</span>: <span class="string">&#x27;arc3&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;color&#x27;</span>:<span class="string">&#x27;g&#x27;</span></span><br><span class="line">                &#125;)</span><br><span class="line"></span><br><span class="line">ax.annotate(<span class="string">u&#x27;The low point&#x27;</span>,</span><br><span class="line">            xy = (np.pi*<span class="number">3</span>/<span class="number">2</span>, -<span class="number">1</span>), </span><br><span class="line">            xytext = (np.pi*<span class="number">3</span>/<span class="number">2</span>, -<span class="number">1.3</span>),</span><br><span class="line">            weight = <span class="string">&#x27;regular&#x27;</span>, </span><br><span class="line">            color = <span class="string">&#x27;r&#x27;</span>, <span class="comment"># red</span></span><br><span class="line">            fontsize = <span class="number">15</span>, </span><br><span class="line">            arrowprops = &#123; </span><br><span class="line">                <span class="string">&#x27;arrowstyle&#x27;</span>: <span class="string">&#x27;-&gt;&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;connectionstyle&#x27;</span>: <span class="string">&#x27;arc3&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;color&#x27;</span>:<span class="string">&#x27;r&#x27;</span></span><br><span class="line">                &#125;)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<p><img src="https://s3.ax1x.com/2020/11/30/DgWeKI.md.png" /></p>
<center>
fig 3-1 Annotation case1
</center>
<p>Case 2：绘制以下四种样式的标注点</p>
<ul>
<li>注释文本 'annotate1' 所对应的样式配置：在 arrowprops 参数中使用关键字 'arrowstyle' 设置 <strong>箭头样式</strong> '-&gt;'，关键字 connectionstyle 设置连接线的样式</li>
<li>注释文本 'annotate2' 所对应的样式配置：在 arrowprops 参数中使用关键字 'arrowstyle' ，允许配置箭头的宽度 width、 箭头两端收缩的百分比 shrink 等</li>
<li>注释文本 'annotate3' 所对应的样式配置：使用 bbox 参数在文本周围添加外框，设置外框为 round 格式</li>
<li>注释文本 'annotate1' 所对应的样式配置：使用 bbox 参数在文本周围添加外框， 设置外框为 round 样式</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = [<span class="string">&#x27;SimHei&#x27;</span>]</span><br><span class="line">plt.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">fig = plt.figure(figsize = (<span class="number">12</span>, <span class="number">8</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在 Figure 对象中创建一个 Axes 对象，每个 Axes 对象即为一个绘图区域</span></span><br><span class="line">ax = fig.add_subplot(<span class="number">111</span>)</span><br><span class="line">x = np.arange(<span class="number">10</span>, <span class="number">20</span>)</span><br><span class="line">y = np.around(np.log(x), <span class="number">2</span>)</span><br><span class="line">ax.plot(x, y, marker = <span class="string">&#x27;o&#x27;</span>)</span><br><span class="line"></span><br><span class="line">ax.annotate(<span class="string">u&#x27;样式1&#x27;</span>, xy = (x[<span class="number">1</span>], y[<span class="number">1</span>]), xytext = (<span class="number">80</span>, <span class="number">10</span>), textcoords = <span class="string">&#x27;offset points&#x27;</span>, </span><br><span class="line">            arrowprops = <span class="built_in">dict</span>(arrowstyle = <span class="string">&#x27;-&gt;&#x27;</span>, connectionstyle = <span class="string">&#x27;angle3, angleA = 80, angleB = 50&#x27;</span>))</span><br><span class="line"></span><br><span class="line">ax.annotate(<span class="string">u&#x27;样式2&#x27;</span>, xy = (x[<span class="number">3</span>], y[<span class="number">3</span>]), xytext = (<span class="number">80</span>, <span class="number">10</span>), textcoords = <span class="string">&#x27;offset points&#x27;</span>, </span><br><span class="line">            arrowprops = <span class="built_in">dict</span>(facecolor = <span class="string">&#x27;black&#x27;</span>, shrink = <span class="number">0.05</span>, width = <span class="number">5</span>))</span><br><span class="line"></span><br><span class="line">ax.annotate(<span class="string">u&#x27;样式3&#x27;</span>, xy = (x[<span class="number">5</span>], y[<span class="number">5</span>]), xytext = (<span class="number">80</span>, <span class="number">10</span>), textcoords = <span class="string">&#x27;offset points&#x27;</span>, </span><br><span class="line">            arrowprops = <span class="built_in">dict</span>(facecolor = <span class="string">&#x27;green&#x27;</span>, headwidth = <span class="number">5</span>, headlength = <span class="number">10</span>),</span><br><span class="line">            bbox = <span class="built_in">dict</span>(boxstyle = <span class="string">&#x27;circle, pad = 0.5&#x27;</span>, fc = <span class="string">&#x27;yellow&#x27;</span>, ec = <span class="string">&#x27;k&#x27;</span>, lw = <span class="number">1</span>, alpha = <span class="number">0.5</span>))</span><br><span class="line"><span class="comment"># fc: facecolor, ec: edegcolor, lw: lineweight</span></span><br><span class="line"></span><br><span class="line">ax.annotate(<span class="string">u&#x27;样式4&#x27;</span>, xy = (x[<span class="number">7</span>], y[<span class="number">7</span>]), xytext = (<span class="number">80</span>, <span class="number">10</span>), textcoords = <span class="string">&#x27;offset points&#x27;</span>, </span><br><span class="line">            arrowprops = <span class="built_in">dict</span>(facecolor = <span class="string">&#x27;blue&#x27;</span>, headwidth = <span class="number">5</span>, headlength = <span class="number">10</span>),</span><br><span class="line">            bbox = <span class="built_in">dict</span>(boxstyle = <span class="string">&#x27;round, pad = 0.5&#x27;</span>, fc = <span class="string">&#x27;gray&#x27;</span>, ec = <span class="string">&#x27;k&#x27;</span>, lw = <span class="number">1</span>, alpha = <span class="number">0.5</span>))</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<p>result:<img src="https://s3.ax1x.com/2020/11/30/DgWMa8.png" /></p>
<center>
fig 3-2 annoatation case2
</center>
<h2 id="参考线区域的绘制">3.3 参考线/区域的绘制</h2>
<ul>
<li>axhline(), axvline()</li>
</ul>
<p>使用 Matplotlib 的 axhline() 函数、axvline() 函数分别在图形中添加水平参考线和垂直参考线，使用 axhline() 函数时给定 y 轴上的位置，同理axvline() 使用时需要给定 x 轴上的位置</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ax.axhline(y = <span class="built_in">min</span>(y), c = <span class="string">&#x27;blue&#x27;</span>, ls = <span class="string">&#x27;:&#x27;</span>, lw = <span class="number">2</span>)</span><br><span class="line">ax.axvline(x = np.pi*<span class="number">3</span>/<span class="number">2</span>, c = <span class="string">&#x27;blue&#x27;</span>, ls = <span class="string">&#x27;-.&#x27;</span>, lw = <span class="number">2</span>)</span><br></pre></td></tr></table></figure>
<p>result:</p>
<p><img src="https://s3.ax1x.com/2020/11/30/DgW3GQ.png" /></p>
<center>
fig 3-3 Reference line
</center>
<ul>
<li>axhspan(), axvspan()</li>
</ul>
<p>使用 axhspan() 函数、axvspan() 函数分别在图形中添加 sin() 函数平行于 x 轴的参考区域和平行于 y 轴的参考区域，axhspan() 函数需给定 y 轴上的区间位置，同理在 axvspan() 中需给定 x 轴上的区间位置</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ax.axhspan(ymin = <span class="number">0</span>, ymax = <span class="number">1</span>, facecolor = <span class="string">&#x27;purple&#x27;</span>, alpha = <span class="number">0.3</span>)</span><br><span class="line">ax.axvspan(xmin = np.pi *<span class="number">2</span>, xmax = np.pi * <span class="number">5</span>/<span class="number">2</span>, facecolor = <span class="string">&#x27;g&#x27;</span>, alpha = <span class="number">0.3</span>)</span><br></pre></td></tr></table></figure>
<p>result:</p>
<p><img src="https://s3.ax1x.com/2020/11/30/DgW82j.png" /></p>
<center>
fig 3-4 Reference interval
</center>
<h2 id="双-y-轴图表的绘制">3.4 双 Y 轴图表的绘制</h2>
<ul>
<li>twinx(), twiny()</li>
</ul>
<p>如果要在同一个 x 轴上显示两个不同数量级别的序列， 可以将第二个序列绘制在右侧辅助的 y 轴上，借助 Matplotlib 的 twinx() 和 twiny() 可以实现两个 y 或 x 轴</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ax_aux = ax.twinx()</span><br><span class="line">ax_aux.plot(x, np.arange(<span class="number">1000</span>), color = <span class="string">&#x27;blue&#x27;</span>, label = <span class="string">&#x27;line 1000&#x27;</span>)</span><br><span class="line"></span><br><span class="line">y_location1 = np.arange(<span class="number">0</span>, <span class="number">1000</span>, <span class="number">100</span>)</span><br><span class="line">y_labels1 = np.arange(<span class="number">0</span>, <span class="number">1000</span>, <span class="number">100</span>)</span><br><span class="line">ax_aux.set_yticks(y_location1) <span class="comment"># 刻度</span></span><br><span class="line">ax_aux.set_yticklabels(y_labels1, fontsize= <span class="number">15</span>) <span class="comment"># 刻度标签</span></span><br><span class="line"></span><br><span class="line">ax_aux.set_ylabel(<span class="string">&#x27;Y 轴 - 辅助&#x27;</span>, fontsize= <span class="number">15</span>)</span><br></pre></td></tr></table></figure>
<p>result:</p>
<p><img src="https://s3.ax1x.com/2020/11/30/DgWGxs.md.png" /></p>
<center>
fig 3-5 双 Y 轴 图表
</center>
<ul>
<li>添加图例</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fig.legend(loc = <span class="string">&#x27;upper right&#x27;</span>, bbox_to_anchor = (<span class="number">1</span>, <span class="number">1</span>), bbox_transform = ax.transAxes, fontsize = <span class="number">15</span>)</span><br></pre></td></tr></table></figure>
<h2 id="条形图的绘制">3.5 条形图的绘制</h2>
<ul>
<li>bar()</li>
</ul>
<p>条形图时通过相同宽度条形的高度/宽度来表现数据差异的图表，可利用 bar() 函数绘制</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = [<span class="string">&#x27;SimHei&#x27;</span>]</span><br><span class="line">plt.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">fig = plt.figure(figsize = (<span class="number">12</span>, <span class="number">8</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在 Figure 对象中创建一个 Axes 对象，每个 Axes 对象即为一个绘图区域</span></span><br><span class="line">ax = fig.add_subplot(<span class="number">111</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># pandas 生成时间序列</span></span><br><span class="line">date_index = pd.date_range(<span class="string">&#x27;2019-01-01&#x27;</span>, freq = <span class="string">&#x27;D&#x27;</span>, periods = <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">y_location = np.arange(<span class="number">0</span>, <span class="number">1000</span>, <span class="number">200</span>)</span><br><span class="line">y_labels = np.arange(<span class="number">0</span>, <span class="number">1000</span>, <span class="number">200</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 分别模拟生成跌涨时的成交量数据</span></span><br><span class="line">red_bar = [<span class="number">1000</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">879</span>, <span class="number">986</span>, <span class="number">213</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">green_bar = [<span class="number">0</span>, <span class="number">200</span>, <span class="number">599</span>, <span class="number">567</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">234</span>, <span class="number">998</span>, <span class="number">489</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制条形图</span></span><br><span class="line">ax.bar(date_index, red_bar, facecolor = <span class="string">&#x27;red&#x27;</span>)</span><br><span class="line">ax.bar(date_index, green_bar, facecolor = <span class="string">&#x27;green&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置轴标签</span></span><br><span class="line">ax.set_xlabel(<span class="string">u&#x27;交易日&#x27;</span>, fontsize = <span class="number">15</span>)</span><br><span class="line">ax.set_ylabel(<span class="string">u&#x27;手&#x27;</span>,fontsize = <span class="number">15</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置标题</span></span><br><span class="line">ax.set_title(<span class="string">u&#x27;成交量&#x27;</span>, fontsize = <span class="number">25</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示图形</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<p>result:</p>
<p><img src="https://s3.ax1x.com/2020/11/30/DgWYMn.png" /></p>
<center>
fig 3-6 条形图
</center>
<h2 id="直方图">3.6 直方图</h2>
<ul>
<li>hist()</li>
</ul>
<p>绘制直方图，首先要将全部样本数据按照不同的区间范围划分为若干组，每个组为直方图的柱子，柱子宽度表示该组的区间，柱子的高度表示数据出现的次数</p>
<ul>
<li>x：绘制直方图的数据（一维数组形式），例如服从正态分布的随机数组</li>
<li>bins：直方图的柱数</li>
<li>desity：是否将直方图的频数（数据出现的次数）转换成频率（数据所占的比例）的表示，默认为 False，True表示显示频数统计结果</li>
<li>n：直方图中每一个 bar 区间数据的频数或频率， 由参数 density 设定</li>
<li>bins：用于返回各个 bin 的区间范围</li>
<li>patches：；列表形式返回每个 bin 的图形对象</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = [<span class="string">&#x27;SimHei&#x27;</span>]</span><br><span class="line">plt.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">fig = plt.figure(figsize = (<span class="number">12</span>, <span class="number">8</span>))</span><br><span class="line">ax = fig.add_subplot(<span class="number">111</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制直方图</span></span><br><span class="line">ax.hist(np.random.normal(loc = <span class="number">0</span>, scale = <span class="number">1</span>, size = <span class="number">1000</span>), bins = <span class="number">50</span>, density = <span class="literal">False</span>, color = <span class="string">&#x27;b&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置轴标签</span></span><br><span class="line">ax.set_xlabel(<span class="string">u&#x27;样本值&#x27;</span>, fontsize = <span class="number">15</span>)</span><br><span class="line">ax.set_ylabel(<span class="string">u&#x27;频数&#x27;</span>, fontsize = <span class="number">15</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置标题</span></span><br><span class="line">ax.set_title(<span class="string">u&#x27;正态分布直方图&#x27;</span>, fontsize = <span class="number">25</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<p>result:<img src="https://s3.ax1x.com/2020/11/30/DgWtrq.md.png" /></p>
<center>
fig 3-7 直方图
</center>
<h2 id="饼图">3.7 饼图</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> pylab <span class="keyword">import</span> *</span><br><span class="line">rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>]=[<span class="string">&#x27;SimHei&#x27;</span>]</span><br><span class="line"></span><br><span class="line">labels=[<span class="string">&quot;东部&quot;</span>,<span class="string">&quot;南部&quot;</span>,<span class="string">&quot;北部&quot;</span>,<span class="string">&quot;中部&quot;</span>]</span><br><span class="line">sizes=[<span class="number">5</span>,<span class="number">10</span>,<span class="number">20</span>,<span class="number">15</span>]</span><br><span class="line">colors=[<span class="string">&quot;red&quot;</span>,<span class="string">&quot;green&quot;</span>,<span class="string">&quot;blue&quot;</span>,<span class="string">&quot;yellow&quot;</span>]</span><br><span class="line">explode=(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.05</span>,<span class="number">0</span>) <span class="comment"># 突出</span></span><br><span class="line">plt.pie(sizes, explode = explode, labels = labels, colors = colors, labeldistance = <span class="number">1.1</span>,autopct = <span class="string">&quot;%3.1f%%&quot;</span>, shadow = <span class="literal">True</span>, startangle = <span class="number">90</span>, pctdistance = <span class="number">0.5</span>)</span><br><span class="line">plt.axis(<span class="string">&quot;equal&quot;</span>)</span><br><span class="line">plt.legend()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<p>result:<img src="https://s3.ax1x.com/2020/11/30/DgWwIU.png" /></p>
<center>
fig 3-8 饼图
</center>
<h2 id="k-线图">3.8 K 线图</h2>
<ul>
<li>candlestick_ochl(), candlestick2_ochl()</li>
</ul>
<p>股票的 K 线记录着一个时间段的开盘价、最高价、最低价、收盘价这 4 个数据，定义如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> mpl_finance <span class="keyword">as</span> mpf</span><br><span class="line">candlestick2_ochl(ax, opens, closea, highs, lows, width = <span class="number">4</span>, colorup = <span class="string">&#x27;k&#x27;</span>, colordown = <span class="string">&#x27;r&#x27;</span>, alpha = <span class="number">0.75</span>)</span><br></pre></td></tr></table></figure>
<ul>
<li>ochl: opens, closes, highs, lows, 分别表示开盘价、收盘价、最高价、最低价的序列</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> mpl_finance <span class="keyword">as</span> mpf</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = [<span class="string">&#x27;SimHei&#x27;</span>]</span><br><span class="line">plt.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 对象式绘图</span></span><br><span class="line"><span class="comment"># pyplt 模块中的 figure() 函数创建名为</span></span><br><span class="line">fig = plt.figure(figsize = (<span class="number">12</span>, <span class="number">8</span>))</span><br><span class="line">ax = fig.add_subplot(<span class="number">111</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制 K 线图</span></span><br><span class="line">opens = [<span class="number">2320.36</span>, <span class="number">2300</span>, <span class="number">2295.35</span>, <span class="number">2347.22</span>, <span class="number">2360.75</span>, <span class="number">2385.43</span>, <span class="number">2376.41</span>, <span class="number">2424.92</span>, <span class="number">2411</span>, <span class="number">2432.68</span>]</span><br><span class="line">closes = [<span class="number">2320.26</span>, <span class="number">2291.3</span>, <span class="number">2347.5</span>, <span class="number">2358.98</span>, <span class="number">2382.48</span>, <span class="number">2385.42</span>, <span class="number">2419.02</span>, <span class="number">2428.15</span>, <span class="number">2433.13</span>, <span class="number">2334.48</span>]</span><br><span class="line">lows = [<span class="number">2287.3</span>, <span class="number">2288.26</span>, <span class="number">2295.35</span>, <span class="number">2337.35</span>, <span class="number">2347.89</span>, <span class="number">2371.23</span>, <span class="number">2369.57</span>, <span class="number">2417.58</span>, <span class="number">2403.3</span>, <span class="number">2427.7</span>]</span><br><span class="line">highs = [<span class="number">2362.94</span>, <span class="number">2308.38</span>, <span class="number">2345.92</span>, <span class="number">2363.8</span>, <span class="number">2382.48</span>, <span class="number">2383.76</span>, <span class="number">2391.82</span>, <span class="number">2421.15</span>, <span class="number">2440.38</span>, <span class="number">2441.73</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制 K 线走势</span></span><br><span class="line">mpf.candlestick2_ochl(ax, opens, closes, highs, lows, width = <span class="number">0.5</span>, colorup = <span class="string">&#x27;r&#x27;</span>, colordown = <span class="string">&#x27;g&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># pandas 生成实践序列</span></span><br><span class="line">date_index = pd.date_range(<span class="string">&#x27;2019-01-01&#x27;</span>, freq = <span class="string">&#x27;D&#x27;</span>, periods = <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置 x 轴的范围</span></span><br><span class="line">ax.set_xlim(<span class="number">0</span>, <span class="number">10</span>)</span><br><span class="line"><span class="comment"># x 轴刻度设定，每15天标一个日期</span></span><br><span class="line">ax.set_xticks(np.arange(<span class="number">0</span>, <span class="number">10</span>))</span><br><span class="line"><span class="comment"># 标签设置为日期</span></span><br><span class="line">ax.set_xticklabels([date_index.strftime(<span class="string">&#x27;%Y-%m-%d&#x27;</span>)[index] <span class="keyword">for</span> index <span class="keyword">in</span> ax.get_xticks()])</span><br><span class="line"><span class="comment"># 设置轴标签</span></span><br><span class="line">ax.set_xlabel(<span class="string">u&#x27;Date&#x27;</span>, fontsize = <span class="number">15</span>)</span><br><span class="line">ax.set_ylabel(<span class="string">u&#x27;Price&#x27;</span>, fontsize = <span class="number">15</span>)</span><br><span class="line">ax.set_title(<span class="string">u&#x27;日 K 线图&#x27;</span>, fontsize = <span class="number">25</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<p>result:<img src="https://s3.ax1x.com/2020/11/30/DgWNq0.png" /></p>
<center>
fig 3-9 K 线图
</center>
<h2 id="time-series">3.9 Time series</h2>
<p>当横轴时间过长，不利于展示图片信息时，可以通过 matplotlib.datas 模块和<code>ax.xaxis.set_major_formatter(mdates.DateFormatter('%Y'))</code>来调整仅显示年份</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> matplotlib.dates <span class="keyword">as</span> mdates</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = [<span class="string">&#x27;SimHei&#x27;</span>]</span><br><span class="line">plt.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ticks</span></span><br><span class="line">data_ticks = pd.date_range(start = <span class="string">&#x27;1985-12&#x27;</span>, freq = <span class="string">&#x27;Y&#x27;</span>, end = <span class="string">&#x27;2019-01&#x27;</span>)</span><br><span class="line">data_labels = np.arange(<span class="number">1985</span>, <span class="number">2019</span>)</span><br><span class="line"></span><br><span class="line">data = pd.read_csv(<span class="string">r&#x27;D:\Demo\University\XMU\Thesis\Master\WTI.csv&#x27;</span>)</span><br><span class="line"><span class="comment"># date_index = data.loc[:, &#x27;日期&#x27;]</span></span><br><span class="line">x_index = pd.date_range(start = <span class="string">&#x27;1986-01&#x27;</span>, freq = <span class="string">&#x27;M&#x27;</span>, end = <span class="string">&#x27;2019-01&#x27;</span>)</span><br><span class="line">data1 = data.loc[:, <span class="string">&#x27;收盘&#x27;</span>]</span><br><span class="line">data_pt = data1.to_list()</span><br><span class="line"></span><br><span class="line">petrol_price = pd.DataFrame(data_pt, index = x_index, columns = [<span class="string">&#x27;Pt_price&#x27;</span>])</span><br><span class="line"></span><br><span class="line">fig = plt.figure(figsize = (<span class="number">12</span>, <span class="number">8</span>))</span><br><span class="line">ax = fig.add_subplot(<span class="number">111</span>)</span><br><span class="line"></span><br><span class="line">ax.plot(petrol_price, color = <span class="string">&#x27;b&#x27;</span>, lw = <span class="number">0.8</span>, label = <span class="s